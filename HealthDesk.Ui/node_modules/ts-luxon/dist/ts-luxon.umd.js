(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("tsLuxon", [], factory);
	else if(typeof exports === 'object')
		exports["tsLuxon"] = factory();
	else
		root["tsLuxon"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/tslib/tslib.es6.mjs":
/*!******************************************!*\
  !*** ./node_modules/tslib/tslib.es6.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),
/* harmony export */   __assign: () => (/* binding */ __assign),
/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),
/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),
/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),
/* harmony export */   __await: () => (/* binding */ __await),
/* harmony export */   __awaiter: () => (/* binding */ __awaiter),
/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),
/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   __createBinding: () => (/* binding */ __createBinding),
/* harmony export */   __decorate: () => (/* binding */ __decorate),
/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),
/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),
/* harmony export */   __exportStar: () => (/* binding */ __exportStar),
/* harmony export */   __extends: () => (/* binding */ __extends),
/* harmony export */   __generator: () => (/* binding */ __generator),
/* harmony export */   __importDefault: () => (/* binding */ __importDefault),
/* harmony export */   __importStar: () => (/* binding */ __importStar),
/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),
/* harmony export */   __metadata: () => (/* binding */ __metadata),
/* harmony export */   __param: () => (/* binding */ __param),
/* harmony export */   __propKey: () => (/* binding */ __propKey),
/* harmony export */   __read: () => (/* binding */ __read),
/* harmony export */   __rest: () => (/* binding */ __rest),
/* harmony export */   __rewriteRelativeImportExtension: () => (/* binding */ __rewriteRelativeImportExtension),
/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),
/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),
/* harmony export */   __spread: () => (/* binding */ __spread),
/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),
/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),
/* harmony export */   __values: () => (/* binding */ __values),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

var ownKeys = function(o) {
  ownKeys = Object.getOwnPropertyNames || function (o) {
    var ar = [];
    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
    return ar;
  };
  return ownKeys(o);
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
        }
        else s |= 1;
      }
      catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}

function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
      return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {
          return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : (d + ext + "." + cm.toLowerCase() + "js");
      });
  }
  return path;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __esDecorate,
  __runInitializers,
  __propKey,
  __setFunctionName,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
  __rewriteRelativeImportExtension,
});


/***/ }),

/***/ "./src/datetime.ts":
/*!*************************!*\
  !*** ./src/datetime.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateTime = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var duration_1 = __webpack_require__(/*! ./duration */ "./src/duration.ts");
var interval_1 = __webpack_require__(/*! ./interval */ "./src/interval.ts");
var settings_1 = __webpack_require__(/*! ./settings */ "./src/settings.ts");
var info_1 = __webpack_require__(/*! ./info */ "./src/info.ts");
var formatter_1 = __webpack_require__(/*! ./impl/formatter */ "./src/impl/formatter.ts");
var fixedOffsetZone_1 = __webpack_require__(/*! ./zones/fixedOffsetZone */ "./src/zones/fixedOffsetZone.ts");
var locale_1 = __webpack_require__(/*! ./impl/locale */ "./src/impl/locale.ts");
var util_1 = __webpack_require__(/*! ./impl/util */ "./src/impl/util.ts");
var zoneUtil_1 = __webpack_require__(/*! ./impl/zoneUtil */ "./src/impl/zoneUtil.ts");
var diff_1 = __webpack_require__(/*! ./impl/diff */ "./src/impl/diff.ts");
var regexParser_1 = __webpack_require__(/*! ./impl/regexParser */ "./src/impl/regexParser.ts");
var tokenParser_1 = __webpack_require__(/*! ./impl/tokenParser */ "./src/impl/tokenParser.ts");
var conversions_1 = __webpack_require__(/*! ./impl/conversions */ "./src/impl/conversions.ts");
var Formats = tslib_1.__importStar(__webpack_require__(/*! ./impl/formats */ "./src/impl/formats.ts"));
var errors_1 = __webpack_require__(/*! ./errors */ "./src/errors.ts");
var invalid_1 = __webpack_require__(/*! ./types/invalid */ "./src/types/invalid.ts");
// eslint-disable-next-line @typescript-eslint/naming-convention
var INVALID = "Invalid DateTime";
// eslint-disable-next-line @typescript-eslint/naming-convention
var MAX_DATE = 8.64e15;
// find the right offset at a given local time. The o input is our guess, which determines which
// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)
function fixOffset(localTS, o, tz) {
    // Our UTC time is just a guess because our offset is just a guess
    var utcGuess = localTS - o * 60 * 1000;
    // Test whether the zone matches the offset for this ts
    var o2 = tz.offset(utcGuess);
    // If so, offset didn't change and we're done
    if (o === o2) {
        return [utcGuess, o];
    }
    // If not, change the ts by the difference in the offset
    utcGuess -= (o2 - o) * 60 * 1000;
    // If that gives us the local time we want, we're done
    var o3 = tz.offset(utcGuess);
    if (o2 === o3) {
        return [utcGuess, o2];
    }
    // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time
    return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
}
// convert an epoch timestamp into a calendar object with the given offset
function tsToObj(ts, offset) {
    ts += offset * 60 * 1000;
    var d = new Date(ts);
    return {
        year: d.getUTCFullYear(),
        month: d.getUTCMonth() + 1,
        day: d.getUTCDate(),
        hour: d.getUTCHours(),
        minute: d.getUTCMinutes(),
        second: d.getUTCSeconds(),
        millisecond: d.getUTCMilliseconds()
    };
}
// convert a calendar object to an epoch timestamp
function objToTS(obj, offset, zone) {
    return fixOffset((0, util_1.objToLocalTS)(obj), offset, zone);
}
// helper useful in turning the results of parsing into real dates
// by handling the zone options
function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
    var setZone = opts.setZone, zone = opts.zone;
    if ((parsed && Object.keys(parsed).length !== 0) || parsedZone) {
        var interpretationZone = parsedZone || zone;
        // While null is not a suitable value for the arg default, void is.
        var inst = DateTime.fromObject(parsed || void 0, tslib_1.__assign(tslib_1.__assign({}, opts), { zone: interpretationZone, specificOffset: specificOffset }));
        return setZone ? inst : inst.setZone(zone);
    }
    else {
        return DateTime.invalid(new invalid_1.Invalid("unparsable", "the input \"".concat(text, "\" can't be parsed as ").concat(format)));
    }
}
// if you want to output a technical format (e.g. RFC 2822), this helper
// helps handle the details
function toTechFormat(dt, format, allowZ) {
    if (allowZ === void 0) { allowZ = true; }
    return dt.isValid
        ? formatter_1.Formatter.create(locale_1.Locale.create("en-US"), {
            allowZ: allowZ,
            forceSimple: true
        }).formatDateTimeFromString(dt, format)
        : null;
}
// defaults for unspecified units in the supported calendars
var defaultUnitValues = {
    year: 0, // unused value
    month: 1,
    day: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
}, defaultWeekUnitValues = {
    weekNumber: 1,
    weekday: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
}, defaultOrdinalUnitValues = {
    ordinal: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
};
// Units in the supported calendars, sorted by bigness
var orderedUnits = [
    "year",
    "month",
    "day",
    "hour",
    "minute",
    "second",
    "millisecond"
], orderedWeekUnits = [
    "weekYear",
    "weekNumber",
    "weekday",
    "hour",
    "minute",
    "second",
    "millisecond"
], orderedOrdinalUnits = [
    "year",
    "ordinal",
    "hour",
    "minute",
    "second",
    "millisecond"
];
// standardize case and plurality in units
function normalizeUnit(unit) {
    var normalized = util_1.PLURAL_MAPPING[unit.toLowerCase()];
    if (!normalized) {
        throw new errors_1.InvalidUnitError(unit);
    }
    return normalized;
}
/**
 * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
 *
 * A DateTime consists of:
 * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
 * * A time zone. Each instance is considered in the context of a specific zone (by default the system's time zone).
 * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
 *
 * Here is a brief overview of the most commonly used functionality it provides:
 *
 * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.
 * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e. as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},
 * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.
 * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.
 * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.
 * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime#plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.
 * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.
 *
 * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
 */
var DateTime = /** @class */ (function () {
    /**
     * @access private
     */
    function DateTime(config) {
        var _a;
        var zone = config.zone || settings_1.Settings.defaultZone;
        var invalid = config.invalid ||
            // invalid timestamp can happen when using plus or minus with 1E8 days resulting in overflows
            (Number.isNaN(config.ts) ? new invalid_1.Invalid("invalid timestamp") : null) ||
            (!zone.isValid ? DateTime._unsupportedZone(zone) : null);
        /**
         * @access private
         */
        this._ts = (0, util_1.isUndefined)(config.ts) ? settings_1.Settings.now() : config.ts;
        var o, c;
        if (!invalid) {
            var unchanged = !!config.old && config.old.ts === this._ts && config.old.zone.equals(zone);
            if (unchanged) {
                _a = [config.old.c, config.old.o], c = _a[0], o = _a[1];
            }
            else {
                // If an offset has been passed + we have not been called from clone(), we can trust it and avoid the offset calculation.
                var ot = (0, util_1.isNumber)(config.o) && !config.old ? config.o : zone.offset(this.ts);
                c = tsToObj(this._ts, ot);
                invalid = Number.isNaN(c.year) ? new invalid_1.Invalid("invalid input") : null;
                c = invalid ? void 0 : c;
                o = invalid ? void 0 : ot;
            }
        }
        /**
         * @access private
         */
        this._zone = zone;
        /**
         * @access private
         */
        this._loc = config.loc || locale_1.Locale.create();
        /**
         * @access private
         */
        this._invalid = invalid;
        /**
         * @access private
         */
        this._weekData = null;
        /**
         * @access private
         */
        this._c = c;
        /**
         * @access private
         */
        this._o = o;
        /**
         * @access private
         */
        this._isLuxonDateTime = true;
    }
    Object.defineProperty(DateTime.prototype, "day", {
        /**
         * Get the day of the month (1-30ish).
         * @example DateTime.local(2017, 5, 25).day //=> 25
         */
        get: function () {
            return this.isValid ? this._c.day : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "daysInMonth", {
        /**
         * Returns the number of days in this DateTime's month
         * @example DateTime.local(2016, 2).daysInMonth //=> 29
         * @example DateTime.local(2016, 3).daysInMonth //=> 31
         */
        get: function () {
            return (0, util_1.daysInMonth)(this.year, this.month);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "daysInYear", {
        /**
         * Returns the number of days in this DateTime's year
         * @example DateTime.local(2016).daysInYear //=> 366
         * @example DateTime.local(2013).daysInYear //=> 365
         */
        get: function () {
            return this.isValid ? (0, util_1.daysInYear)(this.year) : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "hour", {
        /**
         * Get the hour of the day (0-23).
         * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
         */
        get: function () {
            return this.isValid ? this._c.hour : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "invalidExplanation", {
        /**
         * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
         */
        get: function () {
            return this._invalid ? this._invalid.explanation : void 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "invalidReason", {
        /**
         * Returns an error code if this Duration became invalid, or null if the Duration is valid
         */
        get: function () {
            return this._invalid ? this._invalid.reason : void 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "isInDST", {
        /**
         * Get whether the DateTime is in a DST.
         */
        get: function () {
            if (this.isOffsetFixed) {
                return false;
            }
            else {
                return (this.offset > this.set({ month: 1, day: 1 }).offset || this.offset > this.set({ month: 5 }).offset);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "isInLeapYear", {
        /**
         * Returns true if this DateTime is in a leap year, false otherwise
         * @example DateTime.local(2016).isInLeapYear //=> true
         * @example DateTime.local(2013).isInLeapYear //=> false
         */
        get: function () {
            return (0, util_1.isLeapYear)(this.year);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "isOffsetFixed", {
        /**
         * Get whether this zone's offset ever changes, as in a DST.
         */
        get: function () {
            return this.isValid ? this.zone.isUniversal : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "isValid", {
        /**
         * Returns whether the DateTime is valid. Invalid DateTimes occur when:
         * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
         * * The DateTime was created by an operation on another invalid date
         */
        get: function () {
            return this._invalid === null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "isWeekend", {
        /**
         * Returns true if this date is on a weekend according to the locale, false otherwise
         * @returns {boolean}
         */
        get: function () {
            return this.isValid && this.loc.getWeekendDays().includes(this.weekday);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "loc", {
        /**
         * Get a clone of the Locale instance of a DateTime.
         */
        get: function () {
            return this.isValid ? this._loc.clone() : void 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "localWeekNumber", {
        /**
         * Get the week number of the week year according to the locale. Different locales assign week numbers differently,
         * because the week can start on different days of the week (see localWeekday) and because a different number of days
         * is required for a week to count as the first week of a year.
         */
        get: function () {
            return this.isValid ? this._possiblyCachedLocalWeekData(this).weekNumber : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "localWeekYear", {
        /**
         * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)
         * differently, see localWeekNumber.
         */
        get: function () {
            return this.isValid ? this._possiblyCachedLocalWeekData(this).weekYear : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "localWeekday", {
        /**
         * Get the day of the week according to the locale.
         * 1 is the first day of the week and 7 is the last day of the week.
         * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,
         */
        get: function () {
            return this.isValid ? this._possiblyCachedLocalWeekData(this).weekday : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "locale", {
        /**
         * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
         */
        get: function () {
            return this.isValid ? this._loc.locale : void 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "millisecond", {
        /**
         * Get the millisecond of the second (0-999).
         * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
         */
        get: function () {
            return this.isValid ? this._c.millisecond : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "minute", {
        /**
         * Get the minute of the hour (0-59).
         * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
         */
        get: function () {
            return this.isValid ? this._c.minute : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "month", {
        /**
         * Get the month (1-12).
         * @example DateTime.local(2017, 5, 25).month //=> 5
         */
        get: function () {
            return this.isValid ? this._c.month : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "monthLong", {
        /**
         * Get the human-readable long month name, such as 'October'.
         * Defaults to the system's locale if no locale has been specified
         * @example DateTime.local(2017, 10, 30).monthLong //=> October
         */
        get: function () {
            return this.isValid ? info_1.Info.months("long", { locObj: this._loc })[this.month - 1] : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "monthShort", {
        /**
         * Get the human-readable short month name, such as 'Oct'.
         * Defaults to the system's locale if no locale has been specified
         * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
         */
        get: function () {
            return this.isValid ? info_1.Info.months("short", { locObj: this._loc })[this.month - 1] : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "numberingSystem", {
        /**
         * Get the numbering system of a DateTime, such as "beng". The numbering system is used when formatting the DateTime
         */
        get: function () {
            return this.isValid ? this._loc.numberingSystem : void 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "offset", {
        /**
         * Get the UTC offset of this DateTime in minutes
         * @example DateTime.now().offset //=> -240
         * @example DateTime.utc().offset //=> 0
         */
        get: function () {
            return this.isValid ? +this._o : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "offsetNameLong", {
        /**
         * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
         * Defaults to the system's locale if no locale has been specified
         */
        get: function () {
            if (!this.isValid) {
                return null;
            }
            return this.zone.offsetName(this._ts, {
                format: "long",
                locale: this.locale
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "offsetNameShort", {
        /**
         * Get the short human name for the zone's current offset, for example "EST" or "EDT".
         * Defaults to the system's locale if no locale has been specified
         */
        get: function () {
            if (!this.isValid) {
                return null;
            }
            return this.zone.offsetName(this._ts, {
                format: "short",
                locale: this.locale
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "ordinal", {
        /**
         * Get the ordinal (meaning the day of the year)
         * @example DateTime.local(2017, 5, 25).ordinal //=> 145
         */
        get: function () {
            return this.isValid ? (0, conversions_1.gregorianToOrdinal)(this._c).ordinal : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "outputCalendar", {
        /**
         * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
         */
        get: function () {
            return this.isValid
                ? this._loc.outputCalendar
                : void 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "quarter", {
        /**
         * Get the quarter
         * @example DateTime.local(2017, 5, 25).quarter //=> 2
         */
        get: function () {
            return this.isValid ? Math.ceil(this._c.month / 3) : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "second", {
        /**
         * Get the second of the minute (0-59).
         * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
         */
        get: function () {
            return this.isValid ? this._c.second : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "ts", {
        /**
         * Get the timestamp.
         * @example DateTime.local(1970, 1, 1, 0, 0, 0, 654).ts //=> 654
         */
        get: function () {
            return this._ts;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "weekNumber", {
        /**
         * Get the week number of the week year (1-52ish).
         * @see https://en.wikipedia.org/wiki/ISO_week_date
         * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
         */
        get: function () {
            return this.isValid ? this._possiblyCachedWeekData(this).weekNumber : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "weekYear", {
        /**
         * Get the week year
         * @see https://en.wikipedia.org/wiki/ISO_week_date
         * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
         */
        get: function () {
            return this.isValid ? this._possiblyCachedWeekData(this).weekYear : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "weekday", {
        /**
         * Get the day of the week.
         * 1 is Monday and 7 is Sunday
         * @see https://en.wikipedia.org/wiki/ISO_week_date
         * @example DateTime.local(2014, 11, 31).weekday //=> 4
         */
        get: function () {
            return this.isValid ? this._possiblyCachedWeekData(this).weekday : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "weekdayLong", {
        /**
         * Get the human-readable long weekday, such as 'Monday'.
         * Defaults to the system's locale if no locale has been specified
         * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
         */
        get: function () {
            return this.isValid ? info_1.Info.weekdays("long", { locObj: this._loc })[this.weekday - 1] : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "weekdayShort", {
        /**
         * Get the human-readable short weekday, such as 'Mon'.
         * Defaults to the system's locale if no locale has been specified
         * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
         */
        get: function () {
            return this.isValid ? info_1.Info.weekdays("short", { locObj: this._loc })[this.weekday - 1] : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "weeksInLocalWeekYear", {
        /**
         * Returns the number of weeks in this DateTime's local week year
         * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52
         * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53
         * @type {number}
         */
        get: function () {
            return this.isValid
                ? (0, util_1.weeksInWeekYear)(this.localWeekYear, this.loc.getMinDaysInFirstWeek(), this.loc.getStartOfWeek())
                : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "weeksInWeekYear", {
        /**
         * Returns the number of weeks in this DateTime's year
         * @see https://en.wikipedia.org/wiki/ISO_week_date
         * @example DateTime.local(2004).weeksInWeekYear //=> 53
         * @example DateTime.local(2013).weeksInWeekYear //=> 52
         */
        get: function () {
            return this.isValid ? (0, util_1.weeksInWeekYear)(this.weekYear) : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "year", {
        /**
         * Get the year
         * @example DateTime.local(2017, 5, 25).year //=> 2017
         */
        get: function () {
            return this.isValid ? this._c.year : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "zone", {
        /**
         * Get the time zone associated with this DateTime.
         */
        get: function () {
            return this._zone;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DateTime.prototype, "zoneName", {
        /**
         * Get the name of the time zone.
         */
        get: function () {
            return this.isValid ? this.zone.name : null;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Build a parser for `fmt` using the given locale. This parser can be passed
     * to {@link DateTime.fromFormatParser} to a parse a date in this format. This
     * can be used to optimize cases where many dates need to be parsed in a
     * specific format.
     *
     * @param {String} fmt - the format the string is expected to be in (see
     * description)
     * @param {Object} options - options used to set locale and numberingSystem
     * for parser
     * @returns {TokenParser} - opaque object to be used
     */
    DateTime.buildFormatParser = function (fmt, options) {
        if (options === void 0) { options = {}; }
        var _a = options.locale, locale = _a === void 0 ? null : _a, _b = options.numberingSystem, numberingSystem = _b === void 0 ? null : _b, localeToUse = locale_1.Locale.fromOpts({
            locale: locale,
            numberingSystem: numberingSystem,
            defaultToEN: true
        });
        return new tokenParser_1.TokenParser(localeToUse, fmt);
    };
    /**
     * Produce the fully expanded format token for the locale
     * Does NOT quote characters, so quoted tokens will not round trip correctly
     * @param fmt
     * @param localeOpts
     */
    DateTime.expandFormat = function (fmt, localeOpts) {
        if (localeOpts === void 0) { localeOpts = {}; }
        var expanded = (0, tokenParser_1.expandMacroTokens)(formatter_1.Formatter.parseFormat(fmt), locale_1.Locale.fromObject(localeOpts));
        return expanded.map(function (t) { return t.val; }).join("");
    };
    /**
     * Create a DateTime from an input string and format string.
     * Defaults to en-US if no locale has been specified, regardless of the system's locale.
     * @see https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens
     * @param {string} text - the string to parse
     * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone="local"] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
     * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     */
    DateTime.fromFormat = function (text, fmt, opts) {
        if (opts === void 0) { opts = {}; }
        if ((0, util_1.isUndefined)(text) || (0, util_1.isUndefined)(fmt)) {
            throw new errors_1.InvalidArgumentError("fromFormat requires an input string and a format");
        }
        var locale = opts.locale, numberingSystem = opts.numberingSystem, localeToUse = locale_1.Locale.fromOpts({
            locale: locale,
            numberingSystem: numberingSystem,
            defaultToEN: true
        }), _a = (0, tokenParser_1.parseFromTokens)(localeToUse, text, fmt), vals = _a[0], parsedZone = _a[1], specificOffset = _a[2], invalid = _a[3];
        if (invalid) {
            return DateTime.invalid(invalid);
        }
        else {
            return parseDataToDateTime(vals, parsedZone || null, opts, "format ".concat(fmt), text, specificOffset);
        }
    };
    /**
     * Explain how a string would be parsed by fromFormat()
     * @param {string} text - the string to parse
     * @param {string} fmt - the format the string is expected to be in (see description)
     * @param {DateTimeOptions} options - options taken by fromFormat()
     */
    DateTime.fromFormatExplain = function (text, fmt, options) {
        if (options === void 0) { options = {}; }
        var locale = options.locale, numberingSystem = options.numberingSystem, localeToUse = locale_1.Locale.fromOpts({
            locale: locale,
            numberingSystem: numberingSystem,
            defaultToEN: true
        });
        return (0, tokenParser_1.explainFromTokens)(localeToUse, text, fmt);
    };
    /**
     * Create a DateTime from an input string and format parser.
     *
     * The format parser must have been created with the same locale as this call.
     *
     * @param {String} text - the string to parse
     * @param {TokenParser} formatParser - parser from {@link DateTime.buildFormatParser}
     * @param {DateTimeOptions} opts - options taken by fromFormat()
     * @returns {DateTime}
     */
    DateTime.fromFormatParser = function (text, formatParser, opts) {
        if (opts === void 0) { opts = {}; }
        if ((0, util_1.isUndefined)(text) || (0, util_1.isUndefined)(formatParser)) {
            throw new errors_1.InvalidArgumentError("fromFormatParser requires an input string and a format parser");
        }
        var _a = opts.locale, locale = _a === void 0 ? null : _a, _b = opts.numberingSystem, numberingSystem = _b === void 0 ? null : _b, localeToUse = locale_1.Locale.fromOpts({
            locale: locale,
            numberingSystem: numberingSystem,
            defaultToEN: true
        });
        if (!localeToUse.equals(formatParser.locale)) {
            throw new errors_1.InvalidArgumentError("fromFormatParser called with a locale of ".concat(localeToUse, ", ") +
                "but the format parser was created for ".concat(formatParser.locale));
        }
        var _d = formatParser.explainFromTokens(text), result = _d.result, zone = _d.zone, specificOffset = _d.specificOffset, invalidReason = _d.invalidReason;
        if (invalidReason) {
            return DateTime.invalid(invalidReason);
        }
        else {
            return parseDataToDateTime(result, zone, opts, "format ".concat(formatParser.format), text, specificOffset);
        }
    };
    /**
     * Create a DateTime from an HTTP header date
     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
     * @param {string} text - the HTTP header date
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone="local"] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
     * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
     * @param {string} [opts.locale="system's locale"] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
     * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
     * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
     */
    DateTime.fromHTTP = function (text, opts) {
        if (opts === void 0) { opts = {}; }
        var _a = (0, regexParser_1.parseHTTPDate)(text), vals = _a[0], parsedZone = _a[1];
        return parseDataToDateTime(vals, parsedZone, opts, "HTTP", text);
    };
    /**
     * Create a DateTime from an ISO 8601 string
     * @param {string} text - the ISO string
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone="local"] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @example DateTime.fromISO('2016-05-25T09:08:34.123')
     * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
     * @example DateTime.fromISO("2016-05-25T09:08:34.123+06:00", {setZone: true})
     * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
     * @example DateTime.fromISO('2016-W05-4')
     * @return {DateTime}
     */
    DateTime.fromISO = function (text, opts) {
        if (opts === void 0) { opts = {}; }
        var _a = (0, regexParser_1.parseISODate)(text), vals = _a[0], parsedZone = _a[1];
        return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
    };
    /**
     * Create a DateTime from a Javascript Date object. Uses the default zone.
     * @param {Date} date - a Javascript Date object
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone="local"] - the zone to place the DateTime into
     * @return {DateTime}
     */
    DateTime.fromJSDate = function (date, options) {
        if (options === void 0) { options = {}; }
        var ts = (0, util_1.isDate)(date) ? date.valueOf() : NaN;
        if (Number.isNaN(ts)) {
            return DateTime.invalid("invalid input");
        }
        var zoneToUse = (0, zoneUtil_1.normalizeZone)(options.zone, settings_1.Settings.defaultZone);
        if (!zoneToUse.isValid) {
            return DateTime.invalid(DateTime._unsupportedZone(zoneToUse));
        }
        return new DateTime({
            ts: ts,
            zone: zoneToUse,
            loc: locale_1.Locale.fromObject(options)
        });
    };
    /**
     * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
     * @param {number} milliseconds - a number of milliseconds since 1970 UTC
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone="local"] - the zone to place the DateTime into
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @param {string} [options.weekSettings] - the week settings to set on the resulting DateTime instance
     * @return {DateTime}
     */
    DateTime.fromMillis = function (milliseconds, options) {
        if (options === void 0) { options = {}; }
        if (!(0, util_1.isNumber)(milliseconds)) {
            throw new errors_1.InvalidArgumentError("fromMillis requires a numerical input, but received a ".concat(typeof milliseconds, " with value ").concat(milliseconds));
        }
        else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
            // this isn't perfect because we can still end up out of range because of additional shifting, but it's a start
            return DateTime.invalid("Timestamp out of range");
        }
        else {
            return new DateTime({
                ts: milliseconds,
                zone: (0, zoneUtil_1.normalizeZone)(options.zone, settings_1.Settings.defaultZone),
                loc: locale_1.Locale.fromObject(options)
            });
        }
    };
    /**
     * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
     * @param {Object} obj - the object to create the DateTime from
     * @param {number} obj.year - a year, such as 1987
     * @param {number} obj.month - a month, 1-12
     * @param {number} obj.day - a day of the month, 1-31, depending on the month
     * @param {number} obj.ordinal - day of the year, 1-365 or 366
     * @param {number} obj.weekYear - an ISO week year
     * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
     * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
     * @param {number} obj.localWeekYear - a week year, according to the locale
     * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale
     * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale
     * @param {number} obj.hour - hour of the day, 0-23
     * @param {number} obj.minute - minute of the hour, 0-59
     * @param {number} obj.second - second of the minute, 0-59
     * @param {number} obj.millisecond - millisecond of the second, 0-999
     * @param {Object} opts - options for creating this DateTime
     * @param {string|Zone} [opts.zone="local"] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
     * @param {string} [opts.locale="system's locale"] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
     * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
     * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
     * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: "en-US" }).toISODate() //=> '2021-12-26'
     * @return {DateTime}
     */
    DateTime.fromObject = function (obj, opts) {
        if (obj === void 0) { obj = {}; }
        if (opts === void 0) { opts = {}; }
        var zoneToUse = (0, zoneUtil_1.normalizeZone)(opts.zone, settings_1.Settings.defaultZone);
        if (!zoneToUse.isValid) {
            return DateTime.invalid(DateTime._unsupportedZone(zoneToUse));
        }
        var loc = locale_1.Locale.fromObject(opts);
        var normalized = (0, util_1.normalizeObject)(obj, normalizeUnit);
        var tsNow = settings_1.Settings.now(), offsetProvis = (0, util_1.isNumber)(opts.specificOffset)
            ? opts.specificOffset
            : zoneToUse.offset(tsNow), containsOrdinal = (0, util_1.isDefined)(normalized.ordinal), containsGregorYear = (0, util_1.isDefined)(normalized.year), containsGregorMD = (0, util_1.isDefined)(normalized.month) || (0, util_1.isDefined)(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
        // cases:
        // just a weekday -> this week's instance of that weekday, no worries
        // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
        // (gregorian month or day) + ordinal -> error
        // otherwise just use weeks or ordinals or gregorian, depending on what's specified
        if ((containsGregor || containsOrdinal) && definiteWeekDef) {
            throw new errors_1.ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
        }
        if (containsGregorMD && containsOrdinal) {
            throw new errors_1.ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }
        var useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);
        var _a = (0, conversions_1.usesLocalWeekValues)(normalized, loc), minDaysInFirstWeek = _a.minDaysInFirstWeek, startOfWeek = _a.startOfWeek;
        // configure ourselves to deal with gregorian dates or week stuff
        var tmpNow = tsToObj(tsNow, offsetProvis);
        var config = {
            containsGregor: containsGregor,
            containsOrdinal: containsOrdinal,
            loc: loc,
            normalized: normalized,
            obj: obj,
            offsetProvis: offsetProvis,
            useWeekData: useWeekData,
            zoneToUse: zoneToUse
        };
        /*
         * For future refactors here, I assume the original had a lot of duplicated code,
         * while I decided to create this cool _buildObject method, to minimize the code
         * and simplify maintenance
         **/
        if (useWeekData) {
            return DateTime._buildObject(config, orderedWeekUnits, defaultWeekUnitValues, (0, conversions_1.gregorianToWeek)(tmpNow, minDaysInFirstWeek, startOfWeek));
        }
        else if (containsOrdinal) {
            return DateTime._buildObject(config, orderedOrdinalUnits, defaultOrdinalUnitValues, (0, conversions_1.gregorianToOrdinal)(tmpNow));
        }
        else {
            return DateTime._buildObject(config, orderedUnits, defaultUnitValues, tmpNow);
        }
    };
    /**
     * Create a DateTime from an RFC 2822 string
     * @param {string} text - the RFC 2822 string
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone="local"] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
     * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale="system's locale"] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
     * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
     * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
     */
    DateTime.fromRFC2822 = function (text, opts) {
        if (opts === void 0) { opts = {}; }
        var _a = (0, regexParser_1.parseRFC2822Date)(text), vals = _a[0], parsedZone = _a[1];
        return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
    };
    /**
     * Create a DateTime from a SQL date, time, or datetime
     * Defaults to en-US if no locale has been specified, regardless of the system's locale
     * @param {string} text - the string to parse
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone="local"] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
     * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @example DateTime.fromSQL('2017-05-15')
     * @example DateTime.fromSQL('2017-05-15 09:12:34')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
     * @example DateTime.fromSQL('09:12:34.342')
     */
    DateTime.fromSQL = function (text, opts) {
        if (opts === void 0) { opts = {}; }
        var _a = (0, regexParser_1.parseSQL)(text), vals = _a[0], parsedZone = _a[1];
        return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
    };
    /**
     * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
     * @param {number} seconds - a number of seconds since 1970 UTC
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone="local"] - the zone to place the DateTime into
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @param {string} [options.weekSettings] - the week settings to set on the resulting DateTime instance
     * @return {DateTime}
     */
    DateTime.fromSeconds = function (seconds, options) {
        if (options === void 0) { options = {}; }
        if (!(0, util_1.isNumber)(seconds)) {
            throw new errors_1.InvalidArgumentError("fromSeconds requires a numerical input");
        }
        return new DateTime({
            ts: seconds * 1000,
            zone: (0, zoneUtil_1.normalizeZone)(options.zone, settings_1.Settings.defaultZone),
            loc: locale_1.Locale.fromObject(options)
        });
    };
    /**
     * @deprecated use fromFormat instead
     */
    DateTime.fromString = function (text, fmt, opts) {
        if (opts === void 0) { opts = {}; }
        return DateTime.fromFormat(text, fmt, opts);
    };
    /**
     * @deprecated use fromFormatExplain instead
     */
    DateTime.fromStringExplain = function (text, fmt, options) {
        if (options === void 0) { options = {}; }
        return DateTime.fromFormatExplain(text, fmt, options);
    };
    /**
     * Create an invalid DateTime.
     * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     */
    DateTime.invalid = function (reason, explanation) {
        if (!reason) {
            throw new errors_1.InvalidArgumentError("need to specify a reason the DateTime is invalid");
        }
        var invalid = reason instanceof invalid_1.Invalid ? reason : new invalid_1.Invalid(reason, explanation);
        if (settings_1.Settings.throwOnInvalid) {
            throw new errors_1.InvalidDateTimeError(invalid);
        }
        return new DateTime({ invalid: invalid });
    };
    /**
     * Check if an object is an instance of DateTime. Works across context boundaries
     * @param {Object} o
     */
    DateTime.isDateTime = function (o) {
        return !!(o && o._isLuxonDateTime);
    };
    /**
     * Create a local DateTime
     * @param args - The date values (year, month, etc.) and/or the configuration options for the DateTime
     * @example {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
     * @example {number} [month=1] - The month, 1-indexed
     * @example {number} [day=1] - The day of the month, 1-indexed
     * @example {number} [hour=0] - The hour of the day, in 24-hour time
     * @example {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
     * @example {number} [second=0] - The second of the minute, meaning a number between 0 and 59
     * @example {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
     * @example DateTime.local()                                //~> now
     * @example DateTime.local({ zone: "America/New_York" })    //~> now, in US east coast time
     * @example DateTime.local(2017)                            //~> 2017-01-01T00:00:00
     * @example DateTime.local(2017, 3)                         //~> 2017-03-01T00:00:00
     * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
     * @example DateTime.local(2017, 3, 12, 5)                  //~> 2017-03-12T05:00:00
     * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" }) //~> 2017-03-12T05:00:00, in UTC
     * @example DateTime.local(2017, 3, 12, 5, 45, 10)          //~> 2017-03-12T05:45:10
     * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)     //~> 2017-03-12T05:45:10.765
     * @return {DateTime}
     */
    DateTime.local = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a = this._lastOpts(args), opts = _a[0], dateValues = _a[1];
        var year = dateValues[0], month = dateValues[1], day = dateValues[2], hour = dateValues[3], minute = dateValues[4], second = dateValues[5], millisecond = dateValues[6];
        return DateTime._quickDT({
            year: year,
            month: month,
            day: day,
            hour: hour,
            minute: minute,
            second: second,
            millisecond: millisecond
        }, opts);
    };
    DateTime.max = function () {
        var dateTimes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            dateTimes[_i] = arguments[_i];
        }
        if (!dateTimes.every(DateTime.isDateTime)) {
            throw new errors_1.InvalidArgumentError("max requires all arguments be DateTimes");
        }
        return (0, util_1.bestBy)(dateTimes, function (i) { return i.valueOf(); }, Math.max);
    };
    DateTime.min = function () {
        var dateTimes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            dateTimes[_i] = arguments[_i];
        }
        if (!dateTimes.every(DateTime.isDateTime)) {
            throw new errors_1.InvalidArgumentError("min requires all arguments be DateTimes");
        }
        return (0, util_1.bestBy)(dateTimes, function (i) { return i.valueOf(); }, Math.min);
    };
    /**
     * Create a DateTime for the current instant, in the system's time zone.
     *
     * Use Settings to override these default values if needed.
     * @example DateTime.now().toISO() //~> now in the ISO format
     * @return {DateTime}
     */
    DateTime.now = function () {
        return new DateTime({});
    };
    /**
     * Produce the format string for a set of options
     * @param formatOpts
     * @param localeOpts
     * @returns {string}
     */
    DateTime.parseFormatForOpts = function (formatOpts, localeOpts) {
        if (localeOpts === void 0) { localeOpts = {}; }
        var tokenList = (0, tokenParser_1.formatOptsToTokens)(formatOpts, locale_1.Locale.fromObject(localeOpts));
        return !tokenList ? null : tokenList.map(function (t) { return (t ? t.val : null); }).join("");
    };
    DateTime.resetCache = function () {
        this._zoneOffsetTs = void 0;
        this._zoneOffsetGuessCache = new Map();
    };
    /**
     * Create a DateTime in UTC
     * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
     * @param {number} [month=1] - The month, 1-indexed
     * @param {number} [day=1] - The day of the month
     * @param {number} [hour=0] - The hour of the day, in 24-hour time
     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
     * @param {Object} options - configuration options for the DateTime
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @param {string} [options.weekSettings] - the week settings to set on the resulting DateTime instance
     * @example DateTime.utc()                                              //~> now
     * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
     * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
     * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
     * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
     * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
     * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
     * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
     * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
     * @return {DateTime}
     */
    DateTime.utc = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a = this._lastOpts(args), opts = _a[0], dateValues = _a[1];
        var year = dateValues[0], month = dateValues[1], day = dateValues[2], hour = dateValues[3], minute = dateValues[4], second = dateValues[5], millisecond = dateValues[6];
        opts.zone = fixedOffsetZone_1.FixedOffsetZone.utcInstance;
        return this._quickDT({ year: year, month: month, day: day, hour: hour, minute: minute, second: second, millisecond: millisecond }, opts);
    };
    /**
     * @private
     */
    DateTime._buildObject = function (config, units, defaultValues, objNow) {
        // set default values for missing stuff
        var foundFirst = false;
        units.forEach(function (u) {
            var v = config.normalized[u];
            if ((0, util_1.isDefined)(v)) {
                foundFirst = true;
            }
            else if (foundFirst) {
                config.normalized[u] = defaultValues[u];
            }
            else {
                config.normalized[u] = objNow[u];
            }
        });
        // make sure the values we have are in range
        var higherOrderInvalid = config.useWeekData
            ? (0, conversions_1.hasInvalidWeekData)(config.normalized)
            : config.containsOrdinal
                ? (0, conversions_1.hasInvalidOrdinalData)(config.normalized)
                : (0, conversions_1.hasInvalidGregorianData)(config.normalized);
        var invalid = higherOrderInvalid || (0, conversions_1.hasInvalidTimeData)(config.normalized);
        if (invalid) {
            return DateTime.invalid(invalid);
        }
        // compute the actual time
        var gregorian = config.useWeekData
            ? (0, conversions_1.weekToGregorian)(config.normalized)
            : config.containsOrdinal
                ? (0, conversions_1.ordinalToGregorian)(config.normalized)
                : config.normalized, _a = objToTS(gregorian, config.offsetProvis, config.zoneToUse), tsFinal = _a[0], offsetFinal = _a[1], inst = new DateTime({
            ts: tsFinal,
            zone: config.zoneToUse,
            o: offsetFinal,
            loc: config.loc
        });
        // gregorian data + weekday serves only to validate
        if (config.normalized.weekday && config.containsGregor && config.obj.weekday !== inst.weekday) {
            return DateTime.invalid("mismatched weekday", "you can't specify both a weekday of ".concat(config.normalized.weekday, " and a date of ").concat(inst.toISO()));
        }
        if (!inst.isValid) {
            return DateTime.invalid(inst._invalid);
        }
        return inst;
    };
    /**
     * @private
     */
    DateTime._diffRelative = function (start, end, opts) {
        var round = (0, util_1.isUndefined)(opts.round) ? true : opts.round, format = function (c, unit) {
            c = (0, util_1.roundTo)(c, round || opts.calendary ? 0 : 2, true);
            var formatter = end._loc.clone(opts).relFormatter(opts);
            return formatter.format(c, unit);
        }, differ = function (unit) {
            if (opts.calendary) {
                if (!end.hasSame(start, unit)) {
                    return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
                }
                return 0;
            }
            return end.diff(start, unit).get(unit);
        };
        if (opts.unit) {
            return format(differ(opts.unit), opts.unit);
        }
        for (var _i = 0, _a = opts.units; _i < _a.length; _i++) {
            var unit = _a[_i];
            var count = differ(unit);
            if (Math.abs(count) >= 1) {
                return format(count, unit);
            }
        }
        return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
    };
    /**
     * @private
     * cache offsets for zones based on the current timestamp when this function is
     * first called. When we are handling a datetime from components like (year,
     * month, day, hour) in a time zone, we need a guess about what the timezone
     * offset is so that we can convert into a UTC timestamp. One way is to find the
     * offset of now in the zone. The actual date may have a different offset (for
     * example, if we handle a date in June while we're in December in a zone that
     * observes DST), but we can check and adjust that.
     * When handling many dates, calculating the offset for now every time is
     * expensive. It's just a guess, so we can cache the offset to use even if we
     * are right on a time change boundary (we'll just correct in the other
     * direction). Using a timestamp from first read is a slight optimization for
     * handling dates close to the current date, since those dates will usually be
     * in the same offset (we could set the timestamp statically, instead). We use a
     * single timestamp for all zones to make things a bit more predictable.
     * This is safe for quickDT (used by local() and utc()) because we don't fill in
     * higher-order units from tsNow (as we do in fromObject, this requires that
     * offset is calculated from tsNow).
     */
    DateTime._guessOffsetForZone = function (zone) {
        if (!this._zoneOffsetGuessCache.has(zone)) {
            if (this._zoneOffsetTs === undefined) {
                this._zoneOffsetTs = settings_1.Settings.now();
            }
            this._zoneOffsetGuessCache.set(zone, zone.offset(this._zoneOffsetTs));
        }
        return this._zoneOffsetGuessCache.get(zone);
    };
    /**
     * @private
     */
    DateTime._lastOpts = function (argList) {
        var opts = {}, args;
        // There's at least 1 argument and the last position holds the DateTimeOptions
        if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
            opts = argList.pop();
            args = argList;
        }
        // We expect everything to be number
        else {
            args = Array.from(argList);
        }
        return [opts, args];
    };
    /**
     * @private
     */
    // this is a dumbed down version of fromObject() that runs about 60% faster
    // but doesn't do any validation, makes a bunch of assumptions about what units
    // are present, and so on.
    DateTime._quickDT = function (obj, opts) {
        var _a;
        var zone = (0, zoneUtil_1.normalizeZone)(opts.zone, settings_1.Settings.defaultZone);
        if (!zone.isValid) {
            return DateTime.invalid(this._unsupportedZone(zone));
        }
        var loc = locale_1.Locale.fromObject(opts);
        var tsNow = settings_1.Settings.now();
        var ts, o;
        // assume we have the higher-order units
        if ((0, util_1.isDefined)(obj.year)) {
            for (var _i = 0, orderedUnits_1 = orderedUnits; _i < orderedUnits_1.length; _i++) {
                var u = orderedUnits_1[_i];
                if ((0, util_1.isUndefined)(obj[u])) {
                    obj[u] = defaultUnitValues[u];
                }
            }
            var invalid = (0, conversions_1.hasInvalidGregorianData)(obj) || (0, conversions_1.hasInvalidTimeData)(obj);
            if (invalid) {
                return DateTime.invalid(invalid);
            }
            var offsetProvis = this._guessOffsetForZone(zone);
            _a = objToTS(obj, offsetProvis, zone), ts = _a[0], o = _a[1];
        }
        else {
            ts = tsNow;
        }
        return new DateTime({ ts: ts, zone: zone, loc: loc, o: o });
    };
    /**
     * @private
     */
    DateTime._unsupportedZone = function (zone) {
        return new invalid_1.Invalid("unsupported zone", "the zone \"".concat(zone.name, "\" is not supported"));
    };
    // PUBLIC
    /**
     * Returns a string representation of this DateTime appropriate for the REPL.
     * @return {string}
     */
    DateTime.prototype[Symbol.for("nodejs.util.inspect.custom")] = function () {
        if (this.isValid) {
            return "DateTime { ts: ".concat(this.toISO(), ", zone: ").concat(this.zone.name, ", locale: ").concat(this.locale, " }");
        }
        else {
            return "DateTime { Invalid, reason: ".concat(this.invalidReason, " }");
        }
    };
    /**
     * Returns the difference between two DateTimes as a Duration.
     * @param {DateTime} otherDateTime - the DateTime to compare this one to
     * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @example
     * var i1 = DateTime.fromISO('1982-05-25T09:45'),
     *     i2 = DateTime.fromISO('1983-10-14T10:30');
     * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
     * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
     * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
     * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
     * @return {Duration}
     */
    DateTime.prototype.diff = function (otherDateTime, unit, opts) {
        if (unit === void 0) { unit = "milliseconds"; }
        if (opts === void 0) { opts = {}; }
        if (!this.isValid || !otherDateTime.isValid) {
            var reason = (this.invalidReason || otherDateTime.invalidReason); // One of the two is certainly a string
            return duration_1.Duration.invalid(reason, "created by diffing an invalid DateTime");
        }
        var units = (0, util_1.maybeArray)(unit).map(duration_1.Duration.normalizeUnit), otherIsLater = otherDateTime.valueOf() > this.valueOf(), earlier = otherIsLater ? this : otherDateTime, later = otherIsLater ? otherDateTime : this, diffed = (0, diff_1.diff)(earlier, later, units, tslib_1.__assign({ locale: this.locale, numberingSystem: this.numberingSystem }, opts));
        return otherIsLater ? diffed.negate() : diffed;
    };
    /**
     * Returns the difference between this DateTime and right now.
     * See {@link DateTime#diff}
     * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @return {Duration}
     */
    DateTime.prototype.diffNow = function (unit, opts) {
        if (unit === void 0) { unit = "milliseconds"; }
        if (opts === void 0) { opts = {}; }
        return this.diff(DateTime.now(), unit, opts);
    };
    /**
     * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
     * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
     * @param {Object} opts - options
     * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
     * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
     * @return {DateTime}
     */
    DateTime.prototype.endOf = function (unit, _a) {
        var _b;
        var _d = _a === void 0 ? {} : _a, _e = _d.useLocaleWeeks, useLocaleWeeks = _e === void 0 ? false : _e;
        return this.plus((_b = {}, _b[unit] = 1, _b))
            .startOf(unit, { useLocaleWeeks: useLocaleWeeks })
            .minus({ milliseconds: 1 });
    };
    /**
     * Equality check
     * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
     * To compare just the millisecond values, use `+dt1 === +dt2`.
     * @param {DateTime} other - the other DateTime
     */
    DateTime.prototype.equals = function (other) {
        return (this.valueOf() === other.valueOf() &&
            this.zone.equals(other.zone) &&
            this._loc.equals(other._loc));
    };
    /**
     * Get the value of unit.
     * @param {string} unit - a unit such as 'minute' or 'day'
     * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
     * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
     * @return {number}
     */
    DateTime.prototype.get = function (unit) {
        return this[unit];
    };
    /**
     * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC
     * in this DateTime's zone. During DST changes local time can be ambiguous, for example
     * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.
     * This method will return both possible DateTimes if this DateTime's local time is ambiguous.
     */
    DateTime.prototype.getPossibleOffsets = function () {
        if (!this.isValid || this.isOffsetFixed) {
            return [this];
        }
        var dayMs = 86400000;
        var minuteMs = 60000;
        var localTS = (0, util_1.objToLocalTS)(this._c);
        var oEarlier = this.zone.offset(localTS - dayMs);
        var oLater = this.zone.offset(localTS + dayMs);
        var o1 = this.zone.offset(localTS - oEarlier * minuteMs);
        var o2 = this.zone.offset(localTS - oLater * minuteMs);
        if (o1 === o2) {
            return [this];
        }
        var ts1 = localTS - o1 * minuteMs;
        var ts2 = localTS - o2 * minuteMs;
        var c1 = tsToObj(ts1, o1);
        var c2 = tsToObj(ts2, o2);
        if (c1.hour === c2.hour &&
            c1.minute === c2.minute &&
            c1.second === c2.second &&
            c1.millisecond === c2.millisecond) {
            return [this._clone({ ts: ts1 }), this._clone({ ts: ts2 })];
        }
        return [this];
    };
    /**
     * Return whether this DateTime is in the same unit of time as another DateTime.
     * Higher-order units must also be identical for this function to return `true`.
     * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
     * @param {DateTime} otherDateTime - the other DateTime
     * @param {string} unit - the unit of time to check sameness on
     * @param {Object} opts - options
     * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used
     * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
     */
    DateTime.prototype.hasSame = function (otherDateTime, unit, opts) {
        if (!this.isValid) {
            return false;
        }
        var inputMs = otherDateTime.valueOf();
        var adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
        return +adjustedToZone.startOf(unit) <= inputMs && inputMs <= +adjustedToZone.endOf(unit, opts);
    };
    /**
     * Subtract a period of time to this DateTime and return the resulting DateTime
     * See {@link DateTime#plus}
     * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     @return {DateTime}
     */
    DateTime.prototype.minus = function (duration) {
        if (!this.isValid) {
            return this;
        }
        var dur = duration_1.Duration.fromDurationLike(duration).negate();
        return this._clone(this._adjustTime(dur));
    };
    /**
     * Add a period of time to this DateTime and return the resulting DateTime
     *
     * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
     * @param {Duration|Object} duration - The amount to add. Either a Luxon Duration or the object argument to Duration.fromObject()
     * @example DateTime.now().plus(123) //~> in 123 milliseconds
     * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
     * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
     * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
     * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
     * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
     * @return {DateTime}
     */
    DateTime.prototype.plus = function (duration) {
        if (!this.isValid) {
            return this;
        }
        var dur = duration_1.Duration.fromDurationLike(duration);
        return this._clone(this._adjustTime(dur));
    };
    /**
     * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
     * @param {Object} [options] - the options to set
     * @param {string} [options.locale] - ;
     * @param {CalendarSystem} [options.outputCalendar] - ;
     * @param {NumberingSystem} [options.numberingSystem] - ;
     * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
     * @return {DateTime}
     */
    DateTime.prototype.reconfigure = function (options) {
        var loc = this._loc.clone(options);
        return this._clone({ loc: loc });
    };
    /**
     * Returns the resolved Intl options for this DateTime.
     * This is useful in understanding the behavior of formatting methods
     * @param {Object} opts - the same options as toLocaleString
     * @return {Object}
     */
    DateTime.prototype.resolvedLocaleOptions = function (opts) {
        if (opts === void 0) { opts = {}; }
        var _a = formatter_1.Formatter.create(this._loc.clone(opts), opts).resolvedOptions(this), locale = _a.locale, numberingSystem = _a.numberingSystem, calendar = _a.calendar;
        return { locale: locale, numberingSystem: numberingSystem, outputCalendar: calendar };
    };
    /**
     * "Set" the values of specified units. Returns a newly-constructed DateTime.
     * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
     *
     * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.
     * They cannot be mixed with ISO-week units like `weekday`.
     * @param {Object} values - a mapping of units to numbers
     * @example dt.set({ year: 2017 })
     * @example dt.set({ hour: 8, minute: 30 })
     * @example dt.set({ weekday: 5 })
     * @example dt.set({ year: 2005, ordinal: 234 })
     */
    DateTime.prototype.set = function (values) {
        if (!this.isValid) {
            return this;
        }
        var normalized = (0, util_1.normalizeObject)(values, normalizeUnit);
        var _a = (0, conversions_1.usesLocalWeekValues)(normalized, this.loc), minDaysInFirstWeek = _a.minDaysInFirstWeek, startOfWeek = _a.startOfWeek;
        var settingWeekStuff = (0, util_1.isDefined)(normalized.weekYear) || (0, util_1.isDefined)(normalized.weekNumber) || (0, util_1.isDefined)(normalized.weekday);
        var containsOrdinal = (0, util_1.isDefined)(normalized.ordinal), containsGregorYear = (0, util_1.isDefined)(normalized.year), containsGregorMD = (0, util_1.isDefined)(normalized.month) || (0, util_1.isDefined)(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
        if ((containsGregor || containsOrdinal) && definiteWeekDef) {
            throw new errors_1.ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
        }
        if (containsGregorMD && containsOrdinal) {
            throw new errors_1.ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }
        var mixed;
        if (settingWeekStuff) {
            mixed = (0, conversions_1.weekToGregorian)(tslib_1.__assign(tslib_1.__assign({}, (0, conversions_1.gregorianToWeek)(this._c, minDaysInFirstWeek, startOfWeek)), normalized), minDaysInFirstWeek, startOfWeek);
        }
        else if (!(0, util_1.isUndefined)(normalized.ordinal)) {
            mixed = (0, conversions_1.ordinalToGregorian)(tslib_1.__assign(tslib_1.__assign({}, (0, conversions_1.gregorianToOrdinal)(this._c)), normalized));
        }
        else {
            mixed = tslib_1.__assign(tslib_1.__assign({}, this.toObject()), normalized);
            // if we didn't set the day, but we ended up on an overflow date,
            // use the last day of the right month
            if ((0, util_1.isUndefined)(normalized.day)) {
                mixed.day = Math.min((0, util_1.daysInMonth)(mixed.year, mixed.month), mixed.day);
            }
        }
        var _b = objToTS(mixed, this._o, this.zone), ts = _b[0], o = _b[1];
        return this._clone({ ts: ts, o: o });
    };
    /**
     * "Set" the locale. Returns a newly-constructed DateTime.
     * Just a convenient alias for reconfigure({ locale })
     * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
     * @return {DateTime}
     */
    DateTime.prototype.setLocale = function (locale) {
        return this.reconfigure({ locale: locale });
    };
    /**
     * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
     *
     * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
     * @param {string|Zone} [zone="local"] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.
     * @param {Object} opts - options
     * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
     * @return {DateTime}
     */
    DateTime.prototype.setZone = function (zone, _a) {
        var _b = _a === void 0 ? {} : _a, _d = _b.keepLocalTime, keepLocalTime = _d === void 0 ? false : _d, _e = _b.keepCalendarTime, keepCalendarTime = _e === void 0 ? false : _e;
        zone = (0, zoneUtil_1.normalizeZone)(zone, settings_1.Settings.defaultZone);
        if (zone.equals(this.zone)) {
            return this;
        }
        else if (!zone.isValid) {
            return DateTime.invalid(DateTime._unsupportedZone(zone));
        }
        else {
            var newTS = this._ts;
            if (keepLocalTime || keepCalendarTime) {
                var offsetGuess = zone.offset(this._ts);
                var asObj = this.toObject();
                newTS = objToTS(asObj, offsetGuess, zone)[0];
            }
            return this._clone({ ts: newTS, zone: zone });
        }
    };
    /**
     * "Set" this DateTime to the beginning of a unit of time.
     * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
     * @param {Object} opts - options
     * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
     * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
     * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('week').toISOTime(); //=> '2014-03-03', weeks always start on a Monday
     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
     */
    DateTime.prototype.startOf = function (unit, _a) {
        var _b = _a === void 0 ? {} : _a, _d = _b.useLocaleWeeks, useLocaleWeeks = _d === void 0 ? false : _d;
        if (!this.isValid) {
            return this;
        }
        var o = {}, normalizedUnit = duration_1.Duration.normalizeUnit(unit);
        switch (normalizedUnit) {
            case "years":
                o.month = 1;
            // falls through
            case "quarters":
            case "months":
                o.day = 1;
            // falls through
            case "weeks":
            case "days":
                o.hour = 0;
            // falls through
            case "hours":
                o.minute = 0;
            // falls through
            case "minutes":
                o.second = 0;
            // falls through
            case "seconds":
                o.millisecond = 0;
                break;
            case "milliseconds":
                break;
            // no default, invalid units throw in normalizeUnit()
        }
        if (normalizedUnit === "weeks") {
            if (useLocaleWeeks) {
                var startOfWeek = this.loc.getStartOfWeek();
                var weekday = this.weekday;
                if (weekday < startOfWeek) {
                    o.weekNumber = this.weekNumber - 1;
                }
                o.weekday = startOfWeek;
            }
            else {
                o.weekday = 1;
            }
        }
        if (normalizedUnit === "quarters") {
            var q = Math.ceil(this.month / 3);
            o.month = (q - 1) * 3 + 1;
        }
        return this.set(o);
    };
    /**
     * Returns a BSON serializable equivalent to this DateTime.
     * @return {Date}
     */
    DateTime.prototype.toBSON = function () {
        return this.toJSDate();
    };
    /**
     * Returns a string representation of this DateTime formatted according to the specified format string.
     * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
     * Defaults to en-US if no locale has been specified, regardless of the system's locale.
     * @param {string} fmt - the format string
     * @param {Object} opts - opts to override the configuration options on this DateTime
     * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
     * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
     * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
     * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
     * @return {string}
     */
    DateTime.prototype.toFormat = function (fmt, opts) {
        if (opts === void 0) { opts = {}; }
        return this.isValid
            ? formatter_1.Formatter.create(this._loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)
            : INVALID;
    };
    /**
     * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT
     * Specifically, the string conforms to RFC 1123.
     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
     * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
     * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
     * @return {string}
     */
    DateTime.prototype.toHTTP = function () {
        return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
    };
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime
     * @param {Object} options - options
     * @param {boolean} [options.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [options.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [options.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [options.extendedZone=false] - add the time zone format extension
     * @param {string} [options.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
     * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
     * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
     * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
     * @return {string|null}
     */
    DateTime.prototype.toISO = function (_a) {
        var _b = _a === void 0 ? {} : _a, _d = _b.format, format = _d === void 0 ? "extended" : _d, _e = _b.suppressSeconds, suppressSeconds = _e === void 0 ? false : _e, _f = _b.suppressMilliseconds, suppressMilliseconds = _f === void 0 ? false : _f, _g = _b.includeOffset, includeOffset = _g === void 0 ? true : _g, _h = _b.extendedZone, extendedZone = _h === void 0 ? false : _h;
        if (!this.isValid) {
            return null;
        }
        var ext = format === "extended";
        return [
            this._toISODate(ext),
            "T",
            this._toISOTime(ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone)
        ].join("");
    };
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's date component
     * @param {Object} options - options
     * @param {string} [options.format="extended"] - choose between the basic and extended (default) format
     * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
     * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
     * @return {string|null}
     */
    DateTime.prototype.toISODate = function (_a) {
        var _b = _a === void 0 ? { format: "extended" } : _a, _d = _b.format, format = _d === void 0 ? "extended" : _d;
        if (!this.isValid) {
            return null;
        }
        return this._toISODate(format === "extended");
    };
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's time component
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
     * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
     * @return {string}
     */
    DateTime.prototype.toISOTime = function (_a) {
        var _b = _a === void 0 ? {} : _a, _d = _b.suppressMilliseconds, suppressMilliseconds = _d === void 0 ? false : _d, _e = _b.suppressSeconds, suppressSeconds = _e === void 0 ? false : _e, _f = _b.includeOffset, includeOffset = _f === void 0 ? true : _f, _g = _b.includePrefix, includePrefix = _g === void 0 ? false : _g, _h = _b.extendedZone, extendedZone = _h === void 0 ? false : _h, _j = _b.format, format = _j === void 0 ? "extended" : _j;
        if (!this.isValid) {
            return null;
        }
        return [
            includePrefix ? "T" : "",
            this._toISOTime(format === "extended", suppressSeconds, suppressMilliseconds, includeOffset, extendedZone)
        ].join("");
    };
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's week date
     * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
     * @return {string}
     */
    DateTime.prototype.toISOWeekDate = function () {
        return toTechFormat(this, "kkkk-'W'WW-c");
    };
    /**
     * Returns a Javascript Date equivalent to this DateTime.
     * @return {Date}
     */
    DateTime.prototype.toJSDate = function () {
        return new Date(this.isValid ? this._ts : NaN);
    };
    /**
     * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
     * @return {string}
     */
    DateTime.prototype.toJSON = function () {
        return this.toISO();
    };
    /**
     * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
     *
     * Equivalent to `setZone('local')`
     * @return {DateTime}
     */
    DateTime.prototype.toLocal = function () {
        return this.setZone(settings_1.Settings.defaultZone);
    };
    /**
     * Returns an array of format "parts", meaning individual tokens along with metadata. This allows callers to post-process individual sections of the formatted output.
     * Defaults to the system's locale if no locale has been specified
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
     * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
     * @example DateTime.now().toLocaleParts(); //=> [
     *                                   //=>   { type: "day", value: "25" },
     *                                   //=>   { type: "literal", value: "/" },
     *                                   //=>   { type: 'month', value: '05' },
     *                                   //=>   { type: "literal", value: "/" },
     *                                   //=>   { type: "year", value: "1982" }
     *                                   //=> ]
     */
    DateTime.prototype.toLocaleParts = function (opts) {
        if (opts === void 0) { opts = {}; }
        return this.isValid
            ? formatter_1.Formatter.create(this._loc.clone(opts), opts).formatDateTimeParts(this)
            : [];
    };
    /**
     * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
     * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
     * of the DateTime in the assigned locale.
     * Defaults to the system's locale if no locale has been specified
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
     * @param {Object} opts - opts to override the configuration options on this DateTime
     * @example DateTime.now().toLocaleString(); //=> 4/20/2017
     * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
     * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
     * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
     * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
     * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
     * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
     * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
     * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
     * @return {string}
     */
    DateTime.prototype.toLocaleString = function (formatOpts, opts) {
        if (formatOpts === void 0) { formatOpts = Formats.DATE_SHORT; }
        if (opts === void 0) { opts = {}; }
        return this.isValid
            ? formatter_1.Formatter.create(this._loc.clone(opts), formatOpts).formatDateTime(this)
            : INVALID;
    };
    /**
     * Returns the epoch milliseconds of this DateTime.
     * @return {number}
     */
    DateTime.prototype.toMillis = function () {
        return this.isValid ? this.ts : NaN;
    };
    /**
     * Returns a JavaScript object with this DateTime's year, month, day, and so on.
     * @param opts - options for generating the object
     * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
     * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
     * @return {Object}
     */
    DateTime.prototype.toObject = function (opts) {
        if (opts === void 0) { opts = { includeConfig: !1 }; }
        if (!this.isValid) {
            return {};
        }
        var base = Object.assign({}, this._c);
        if (opts.includeConfig) {
            base.outputCalendar = this.outputCalendar;
            base.numberingSystem = this._loc.numberingSystem;
            base.locale = this._loc.locale;
        }
        return base;
    };
    /**
     * Returns an RFC 2822-compatible string representation of this DateTime
     * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
     * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
     * @return {string}
     */
    DateTime.prototype.toRFC2822 = function () {
        return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
    };
    /**
     * Returns a string representation of a time relative to now, such as "in two days". Can only internationalize if your
     * platform supports Intl.RelativeTimeFormat. Rounds down by default.
     * @param {Object} options - options that affect the output
     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
     * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
     * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"     * @param {boolean} [options.round=true] - whether to round the numbers in the output.
     * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
     * @param {string} [options.locale] - override the locale of this DateTime
     * @param {string} [options.numberingSystem] - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
     * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
     * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
     * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
     * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
     * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
     * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
     */
    DateTime.prototype.toRelative = function (options) {
        if (options === void 0) { options = {}; }
        if (!this.isValid) {
            return null;
        }
        var base = options.base || DateTime.fromObject({}, { zone: this.zone });
        var padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;
        var units = ["years", "months", "days", "hours", "minutes", "seconds"];
        var unit = options.unit;
        if (Array.isArray(options.unit)) {
            units = options.unit;
            unit = void 0;
        }
        return DateTime._diffRelative(base, this.plus(padding), tslib_1.__assign(tslib_1.__assign({}, options), { numeric: "always", units: units, unit: unit }));
    };
    /**
     * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
     * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
     * @param {Object} options - options that affect the output
     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
     * @param {string} [options.locale] - override the locale of this DateTime
     * @param {string} [options.unit] - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
     * @param {string} [options.numberingSystem] - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
     * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
     * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
     */
    DateTime.prototype.toRelativeCalendar = function (options) {
        if (options === void 0) { options = {}; }
        if (!this.isValid) {
            return null;
        }
        return DateTime._diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, tslib_1.__assign(tslib_1.__assign({}, options), { numeric: "auto", units: ["years", "months", "days"], calendary: true }));
    };
    /**
     * Returns a string representation of this DateTime appropriate for use in SQL DateTime
     * @param {Object} opts - options
     * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
     * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
     * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
     * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
     * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
     * @return {string}
     */
    DateTime.prototype.toSQL = function (opts) {
        if (opts === void 0) { opts = {}; }
        if (!this.isValid) {
            return null;
        }
        return "".concat(this.toSQLDate(), " ").concat(this.toSQLTime(opts));
    };
    /**
     * Returns a string representation of this DateTime appropriate for use in SQL Date
     * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
     * @return {string}
     */
    DateTime.prototype.toSQLDate = function () {
        if (!this.isValid) {
            return null;
        }
        return this._toISODate(!0);
    };
    /**
     * Returns a string representation of this DateTime appropriate for use in SQL Time
     * @param {Object} opts - options
     * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
     * @example DateTime.utc().toSQL() //=> '05:15:16.345'
     * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
     * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
     * @example DateTime.now().toSQL({ includeZone: false }) //=> "05:15:16.345 America/New_York"
     * @return {string}
     */
    DateTime.prototype.toSQLTime = function (_a) {
        var _b = _a === void 0 ? {} : _a, _d = _b.includeOffset, includeOffset = _d === void 0 ? !0 : _d, _e = _b.includeZone, includeZone = _e === void 0 ? !1 : _e, _f = _b.includeOffsetSpace, includeOffsetSpace = _f === void 0 ? !0 : _f;
        var fmt = "HH:mm:ss.SSS";
        if (includeZone || includeOffset) {
            includeOffsetSpace && (fmt += " ");
            if (includeZone) {
                fmt += "z";
            }
            else if (includeOffset) {
                fmt += "ZZ";
            }
        }
        return toTechFormat(this, fmt, true);
    };
    /**
     * Returns the epoch seconds of this DateTime.
     * @return {number}
     */
    DateTime.prototype.toSeconds = function () {
        return this.isValid ? this._ts / 1000 : NaN;
    };
    /**
     * Returns a string representation of this DateTime appropriate for debugging
     * @return {string}
     */
    DateTime.prototype.toString = function () {
        return this.isValid ? this.toISO() : INVALID;
    };
    /**
     * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
     *
     * Equivalent to {@link setZone}('utc')
     * @param {number} [offset=0] - optionally, an offset from UTC in minutes
     * @param {Object} [opts={}] - options to pass to `setZone()`
     * @return {DateTime}
     */
    DateTime.prototype.toUTC = function (offset, opts) {
        if (offset === void 0) { offset = 0; }
        if (opts === void 0) { opts = {}; }
        return this.setZone(fixedOffsetZone_1.FixedOffsetZone.instance(offset), opts);
    };
    /**
     * Returns the epoch seconds (as a whole number) of this DateTime.
     * @return {number}
     */
    DateTime.prototype.toUnixInteger = function () {
        return this.isValid ? Math.floor(this.ts / 1000) : NaN;
    };
    /**
     * Return an Interval spanning between this DateTime and another DateTime
     * @param {DateTime} otherDateTime - the other end point of the Interval
     * @return {Interval|DateTime}
     */
    DateTime.prototype.until = function (otherDateTime) {
        return this.isValid ? interval_1.Interval.fromDateTimes(this, otherDateTime) : this;
    };
    /**
     * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
     * @return {number}
     */
    DateTime.prototype.valueOf = function () {
        return this.toMillis();
    };
    // PRIVATE
    /**
     * @private
     */
    /**
     * create a new DT instance by adding a duration, adjusting for DSTs
     * Remember that compared to Luxon.js I don't need to pass the instance as argument here,
     * because it's a private member of the instance itself.
     * Honestly don't know why he didn't do this way!
     * @param dur
     * @private
     */
    DateTime.prototype._adjustTime = function (dur) {
        var previousOffset = this._o, year = this._c.year + Math.trunc(dur.years), month = this._c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3, c = tslib_1.__assign(tslib_1.__assign({}, this._c), { year: year, month: month, day: Math.min(this._c.day, (0, util_1.daysInMonth)(year, month)) +
                Math.trunc(dur.days) +
                Math.trunc(dur.weeks) * 7 }), millisToAdd = duration_1.Duration.fromObject({
            years: dur.years - Math.trunc(dur.years),
            quarters: dur.quarters - Math.trunc(dur.quarters),
            months: dur.months - Math.trunc(dur.months),
            weeks: dur.weeks - Math.trunc(dur.weeks),
            days: dur.days - Math.trunc(dur.days),
            hours: dur.hours,
            minutes: dur.minutes,
            seconds: dur.seconds,
            milliseconds: dur.milliseconds
        }).as("milliseconds"), localTS = (0, util_1.objToLocalTS)(c);
        var _a = fixOffset(localTS, previousOffset, this.zone), ts = _a[0], o = _a[1];
        if (millisToAdd !== 0) {
            ts += millisToAdd;
            // that could have changed the offset by going over a DST, but we want to keep the ts the same
            o = this.zone.offset(ts);
        }
        return { ts: ts, o: o };
    };
    /**
     * @private
     */
    // clone really means, "make a new object with these modifications". all "setters" really use this
    // to create a new object while only changing some of the properties
    DateTime.prototype._clone = function (alts) {
        var current = {
            ts: this._ts,
            zone: this.zone,
            c: this._c,
            o: this._o,
            loc: this._loc,
            invalid: this._invalid || void 0
        };
        return new DateTime(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, current), alts), { old: current }));
    };
    DateTime.prototype._possiblyCachedLocalWeekData = function (dt) {
        if (!dt._localWeekData) {
            dt._localWeekData = (0, conversions_1.gregorianToWeek)(dt._c, dt.loc.getMinDaysInFirstWeek(), dt.loc.getStartOfWeek());
        }
        return dt._localWeekData;
    };
    /**
     * @private
     */
    // we cache week data on the DT object and this method intermediates the cache
    DateTime.prototype._possiblyCachedWeekData = function (dt) {
        if (dt._weekData === null) {
            dt._weekData = (0, conversions_1.gregorianToWeek)(dt._c);
        }
        return dt._weekData;
    };
    DateTime.prototype._toISODate = function (extended) {
        var longFormat = this._c.year > 9999 || this._c.year < 0;
        var c = "";
        if (longFormat && this._c.year >= 0) {
            c += "+";
        }
        c += (0, util_1.padStart)(this._c.year, longFormat ? 6 : 4);
        if (extended) {
            c += "-";
            c += (0, util_1.padStart)(this._c.month);
            c += "-";
            c += (0, util_1.padStart)(this._c.day);
        }
        else {
            c += (0, util_1.padStart)(this._c.month);
            c += (0, util_1.padStart)(this._c.day);
        }
        return c;
    };
    DateTime.prototype._toISOTime = function (extended, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone) {
        var c = (0, util_1.padStart)(this._c.hour);
        if (extended) {
            c += ":";
            c += (0, util_1.padStart)(this._c.minute);
            if (this._c.millisecond !== 0 || this._c.second !== 0 || !suppressSeconds) {
                c += ":";
            }
        }
        else {
            c += (0, util_1.padStart)(this._c.minute);
        }
        if (this._c.millisecond !== 0 || this._c.second !== 0 || !suppressSeconds) {
            c += (0, util_1.padStart)(this._c.second);
            if (this._c.millisecond !== 0 || !suppressMilliseconds) {
                c += ".";
                c += (0, util_1.padStart)(this._c.millisecond, 3);
            }
        }
        if (includeOffset) {
            if (this.isOffsetFixed && this.offset === 0 && !extendedZone) {
                c += "Z";
            }
            else if (this._o < 0) {
                c += "-";
                c += (0, util_1.padStart)(Math.trunc(-this._o / 60));
                c += ":";
                c += (0, util_1.padStart)(Math.trunc(-this._o % 60));
            }
            else {
                c += "+";
                c += (0, util_1.padStart)(Math.trunc(this._o / 60));
                c += ":";
                c += (0, util_1.padStart)(Math.trunc(this._o % 60));
            }
        }
        if (extendedZone) {
            c += "[" + this.zone.ianaName + "]";
        }
        return c;
    };
    // FORMAT PRESETS
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
     */
    DateTime.DATETIME_FULL = Formats.DATETIME_FULL;
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
     */
    DateTime.DATETIME_FULL_WITH_SECONDS = Formats.DATETIME_FULL_WITH_SECONDS;
    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     */
    DateTime.DATETIME_HUGE = Formats.DATETIME_HUGE;
    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     */
    DateTime.DATETIME_HUGE_WITH_SECONDS = Formats.DATETIME_HUGE_WITH_SECONDS;
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
     */
    DateTime.DATETIME_MED = Formats.DATETIME_MED;
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
     */
    DateTime.DATETIME_MED_WITH_SECONDS = Formats.DATETIME_MED_WITH_SECONDS;
    /**
     * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
     */
    DateTime.DATETIME_MED_WITH_WEEKDAY = Formats.DATETIME_MED_WITH_WEEKDAY;
    /**
     * {@link DateTime#toLocaleString} format like "10/14/1983, 9:30 AM". Only 12-hour if the locale is.
     */
    DateTime.DATETIME_SHORT = Formats.DATETIME_SHORT;
    /**
     * {@link DateTime#toLocaleString} format like "10/14/1983, 9:30:33 AM". Only 12-hour if the locale is.
     */
    DateTime.DATETIME_SHORT_WITH_SECONDS = Formats.DATETIME_SHORT_WITH_SECONDS;
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983'
     */
    DateTime.DATE_FULL = Formats.DATE_FULL;
    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983'
     */
    DateTime.DATE_HUGE = Formats.DATE_HUGE;
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
     */
    DateTime.DATE_MED = Formats.DATE_MED;
    /**
     * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
     */
    DateTime.DATE_MED_WITH_WEEKDAY = Formats.DATE_MED_WITH_WEEKDAY;
    /**
     * {@link DateTime#toLocaleString} format like 10/14/1983
     */
    DateTime.DATE_SHORT = Formats.DATE_SHORT;
    /**
     * {@link DateTime#toLocaleString} format like "09:30", always 24-hour.
     */
    DateTime.TIME_24_SIMPLE = Formats.TIME_24_SIMPLE;
    /**
     * {@link DateTime#toLocaleString} format like "09:30:23 Eastern Daylight Time", always 24-hour.
     */
    DateTime.TIME_24_WITH_LONG_OFFSET = Formats.TIME_24_WITH_LONG_OFFSET;
    /**
     * {@link DateTime#toLocaleString} format like "09:30:23", always 24-hour.
     */
    DateTime.TIME_24_WITH_SECONDS = Formats.TIME_24_WITH_SECONDS;
    /**
     * {@link DateTime#toLocaleString} format like "09:30:23 EDT", always 24-hour.
     */
    DateTime.TIME_24_WITH_SHORT_OFFSET = Formats.TIME_24_WITH_SHORT_OFFSET;
    /**
     * {@link DateTime#toLocaleString} format like "09:30 AM". Only 12-hour if the locale is.
     */
    DateTime.TIME_SIMPLE = Formats.TIME_SIMPLE;
    /**
     * {@link DateTime#toLocaleString} format like "09:30:23 AM Eastern Daylight Time". Only 12-hour if the locale is.
     */
    DateTime.TIME_WITH_LONG_OFFSET = Formats.TIME_WITH_LONG_OFFSET;
    /**
     * {@link DateTime#toLocaleString} format like "09:30:23 AM". Only 12-hour if the locale is.
     */
    DateTime.TIME_WITH_SECONDS = Formats.TIME_WITH_SECONDS;
    /**
     * {@link DateTime#toLocaleString} format like "09:30:23 AM EDT". Only 12-hour if the locale is.
     */
    DateTime.TIME_WITH_SHORT_OFFSET = Formats.TIME_WITH_SHORT_OFFSET;
    DateTime._zoneOffsetGuessCache = new Map();
    return DateTime;
}());
exports.DateTime = DateTime;


/***/ }),

/***/ "./src/duration.ts":
/*!*************************!*\
  !*** ./src/duration.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Duration = exports.casualMatrix = exports.lowOrderMatrix = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var util_1 = __webpack_require__(/*! ./impl/util */ "./src/impl/util.ts");
var locale_1 = __webpack_require__(/*! ./impl/locale */ "./src/impl/locale.ts");
var formatter_1 = __webpack_require__(/*! ./impl/formatter */ "./src/impl/formatter.ts");
var regexParser_1 = __webpack_require__(/*! ./impl/regexParser */ "./src/impl/regexParser.ts");
var errors_1 = __webpack_require__(/*! ./errors */ "./src/errors.ts");
var settings_1 = __webpack_require__(/*! ./settings */ "./src/settings.ts");
var invalid_1 = __webpack_require__(/*! ./types/invalid */ "./src/types/invalid.ts");
var datetime_1 = __webpack_require__(/*! ./datetime */ "./src/datetime.ts");
// unit conversion constants
// tslint:disable-next-line:naming-convention
exports.lowOrderMatrix = {
    weeks: {
        days: 7,
        hours: 7 * 24,
        minutes: 7 * 24 * 60,
        seconds: 7 * 24 * 60 * 60,
        milliseconds: 7 * 24 * 60 * 60 * 1000
    },
    days: {
        hours: 24,
        minutes: 24 * 60,
        seconds: 24 * 60 * 60,
        milliseconds: 24 * 60 * 60 * 1000
    },
    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },
    minutes: { seconds: 60, milliseconds: 60 * 1000 },
    seconds: { milliseconds: 1000 }
};
// tslint:disable-next-line:naming-convention
exports.casualMatrix = tslib_1.__assign({ years: {
        quarters: 4,
        months: 12,
        weeks: 52,
        days: 365,
        hours: 365 * 24,
        minutes: 365 * 24 * 60,
        seconds: 365 * 24 * 60 * 60,
        milliseconds: 365 * 24 * 60 * 60 * 1000
    }, quarters: {
        months: 3,
        weeks: 13,
        days: 91,
        hours: 91 * 24,
        minutes: 91 * 24 * 60,
        seconds: 91 * 24 * 60 * 60,
        milliseconds: 91 * 24 * 60 * 60 * 1000
    }, months: {
        weeks: 4,
        days: 30,
        hours: 30 * 24,
        minutes: 30 * 24 * 60,
        seconds: 30 * 24 * 60 * 60,
        milliseconds: 30 * 24 * 60 * 60 * 1000
    } }, exports.lowOrderMatrix);
var daysInYearAccurate = 146097.0 / 400;
var daysInMonthAccurate = 146097.0 / 4800;
var accurateMatrix = tslib_1.__assign({ years: {
        quarters: 4,
        months: 12,
        weeks: daysInYearAccurate / 7,
        days: daysInYearAccurate,
        hours: daysInYearAccurate * 24,
        minutes: daysInYearAccurate * 24 * 60,
        seconds: daysInYearAccurate * 24 * 60 * 60,
        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000
    }, quarters: {
        months: 3,
        weeks: daysInYearAccurate / 28,
        days: daysInYearAccurate / 4,
        hours: (daysInYearAccurate * 24) / 4,
        minutes: (daysInYearAccurate * 24 * 60) / 4,
        seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,
        milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4
    }, months: {
        weeks: daysInMonthAccurate / 7,
        days: daysInMonthAccurate,
        hours: daysInMonthAccurate * 24,
        minutes: daysInMonthAccurate * 24 * 60,
        seconds: daysInMonthAccurate * 24 * 60 * 60,
        milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000
    } }, exports.lowOrderMatrix);
function durationToMillis(matrix, vals) {
    var _a;
    var sum = (_a = vals.milliseconds) !== null && _a !== void 0 ? _a : 0;
    for (var _i = 0, _b = util_1.REVERSE_ORDERED_UNITS.slice(1); _i < _b.length; _i++) {
        var unit = _b[_i];
        if (vals[unit]) {
            sum += vals[unit] * matrix[unit]["milliseconds"];
        }
    }
    return sum;
}
function eq(v1, v2) {
    // Consider 0 and undefined as equal
    if (v1 === undefined || v1 === 0) {
        return v2 === undefined || v2 === 0;
    }
    return v1 === v2;
}
// NB: mutates vals parameters
function normalizeValues(matrix, vals) {
    // the logic below assumes the overall value of the duration is positive
    // if this is not the case, factor is used to make it so
    var factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;
    util_1.REVERSE_ORDERED_UNITS.reduce(function (previous, current) {
        if (!(0, util_1.isUndefined)(vals[current])) {
            if (previous) {
                var previousVal = vals[previous] * factor;
                var conv = matrix[current][previous];
                // if (previousVal < 0):
                // lower order unit is negative (e.g. { years: 2, days: -2 })
                // normalize this by reducing the higher order unit by the appropriate amount
                // and increasing the lower order unit
                // this can never make the higher order unit negative, because this function only operates
                // on positive durations, so the amount of time represented by the lower order unit cannot
                // be larger than the higher order unit
                // else:
                // lower order unit is positive (e.g. { years: 2, days: 450 } or { years: -2, days: 450 })
                // in this case we attempt to convert as much as possible from the lower order unit into
                // the higher order one
                //
                // Math.floor takes care of both of these cases, rounding away from 0
                // if previousVal < 0 it makes the absolute value larger
                // if previousVal >= it makes the absolute value smaller
                var rollUp = Math.floor(previousVal / conv);
                vals[current] += rollUp * factor;
                vals[previous] -= rollUp * conv * factor;
            }
            return current;
        }
        else {
            return previous;
        }
    }, null);
    // try to convert any decimals into smaller units if possible
    // for example for { years: 2.5, days: 0, seconds: 0 } we want to get { years: 2, days: 182, hours: 12 }
    util_1.ORDERED_UNITS.reduce(function (previous, current) {
        if (!(0, util_1.isUndefined)(vals[current])) {
            if (previous) {
                var fraction = vals[previous] % 1;
                vals[previous] -= fraction;
                vals[current] += fraction * matrix[previous][current];
            }
            return current;
        }
        else {
            return previous;
        }
    }, null);
}
// Remove all properties with a value of 0 from an object
function removeZeroes(vals) {
    if (vals === void 0) { vals = {}; }
    return Object.entries(vals).reduce(function (acc, _a) {
        var key = _a[0], value = _a[1];
        if (value !== 0) {
            acc[key] = value;
        }
        return acc;
    }, {});
}
/**
 * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime. *
 * Here is a brief overview of commonly used methods and getters in Duration:
 *
 * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
 * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.
 * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.
 * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.
 * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}
 *
 * There are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
 */
var Duration = /** @class */ (function () {
    /**
     * @private
     */
    function Duration(config) {
        var accurate = config.conversionAccuracy === "longterm" || false;
        var matrix, conversionAccuracy;
        if (accurate) {
            conversionAccuracy = "longterm";
            matrix = accurateMatrix;
        }
        else {
            conversionAccuracy = "casual";
            matrix = exports.casualMatrix;
        }
        if (config.matrix) {
            matrix = config.matrix;
        }
        /**
         * @access private
         */
        this._values = config.values || {};
        /**
         * @access private
         */
        this._loc = config.loc || locale_1.Locale.create();
        /**
         * @access private
         */
        this._conversionAccuracy = conversionAccuracy;
        /**
         * @access private
         */
        this._invalid = config.invalid || null;
        /**
         * @access private
         */
        this._matrix = matrix;
        /**
         * @access private
         */
        this._isLuxonDuration = true;
    }
    Object.defineProperty(Duration, "_INVALID", {
        get: function () {
            return "Invalid Duration";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "conversionAccuracy", {
        /**
         * Returns the conversion system to use
         * @type {ConversionAccuracy}
         */
        get: function () {
            return this._conversionAccuracy;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "days", {
        /**
         * Get the days.
         * @type {number}
         */
        get: function () {
            return this.isValid ? this._values.days || 0 : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "hours", {
        /**
         * Get the hours.
         * @type {number}
         */
        get: function () {
            return this.isValid ? this._values.hours || 0 : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "invalidExplanation", {
        /**
         * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
         * @type {string}
         */
        get: function () {
            return this._invalid ? this._invalid.explanation : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "invalidReason", {
        /**
         * Returns an error code if this Duration became invalid, or null if the Duration is valid
         * @return {string}
         */
        get: function () {
            return this._invalid ? this._invalid.reason : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "isValid", {
        /**
         * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
         * on invalid DateTimes or Intervals.
         * @return {boolean}
         */
        get: function () {
            return this._invalid === null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "locale", {
        /**
         * Get  the locale of a Duration, such 'en-GB'
         * @type {string}
         */
        get: function () {
            return this.isValid ? this._loc.locale : void 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "matrix", {
        /**
         * Get the conversion matrix of a Duration
         * @type {ConversionMatrix}
         */
        get: function () {
            return this._matrix;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "milliseconds", {
        /**
         * Get the milliseconds.
         * @return {number}
         */
        get: function () {
            return this.isValid ? this._values.milliseconds || 0 : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "minutes", {
        /**
         * Get the minutes.
         * @type {number}
         */
        get: function () {
            return this.isValid ? this._values.minutes || 0 : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "months", {
        /**
         * Get the months.
         * @type {number}
         */
        get: function () {
            return this.isValid ? this._values.months || 0 : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "numberingSystem", {
        /**
         * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
         *
         * @type {NumberingSystem}
         */
        get: function () {
            return this.isValid ? this._loc.numberingSystem : void 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "quarters", {
        /**
         * Get the quarters.
         * @type {number}
         */
        get: function () {
            return this.isValid ? this._values.quarters || 0 : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "seconds", {
        /**
         * Get the seconds.
         * @return {number}
         */
        get: function () {
            return this.isValid ? this._values.seconds || 0 : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "weeks", {
        /**
         * Get the weeks
         * @type {number}
         */
        get: function () {
            return this.isValid ? this._values.weeks || 0 : NaN;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "years", {
        /**
         * Get the years.
         * @type {number}
         */
        get: function () {
            return this.isValid ? this._values.years || 0 : NaN;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Create a Duration from DurationLike.
     *
     * @param {Object | number | Duration} durationLike
     * One of:
     * - object with keys like 'years' and 'hours'.
     * - number representing milliseconds
     * - Duration instance
     * @return {Duration}
     */
    Duration.fromDurationLike = function (durationLike) {
        if ((0, util_1.isNumber)(durationLike)) {
            return Duration.fromMillis(durationLike);
        }
        else if (Duration.isDuration(durationLike)) {
            return durationLike;
        }
        else if (typeof durationLike === "object") {
            return Duration.fromObject(durationLike);
        }
        else {
            throw new errors_1.InvalidArgumentError("Unknown duration argument ".concat(durationLike, " of type ").concat(typeof durationLike));
        }
    };
    /**
     * Create a Duration from an ISO 8601 duration string.
     * @param {string} text - text to parse
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the preset conversion system to use
     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
     * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
     * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
     * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
     * @return {Duration}
     */
    Duration.fromISO = function (text, opts) {
        var parsed = (0, regexParser_1.parseISODuration)(text)[0];
        if (parsed) {
            return Duration.fromObject(parsed, opts);
        }
        else {
            return Duration.invalid("unparsable", "the input \"".concat(text, "\" can't be parsed as ISO 8601"));
        }
    };
    /**
     * Create a Duration from an ISO 8601 time string.
     * @param {string} text - text to parse
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the conversion system to use
     * @see https://en.wikipedia.org/wiki/ISO_8601#Times
     * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
     * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @return {Duration}
     */
    Duration.fromISOTime = function (text, opts) {
        if (opts === void 0) { opts = {}; }
        var parsed = (0, regexParser_1.parseISOTimeOnly)(text)[0];
        if (parsed) {
            return Duration.fromObject(parsed, opts);
        }
        else {
            return Duration.invalid("unparsable", "the input \"".concat(text, "\" can't be parsed as ISO 8601"));
        }
    };
    /**
     * Create Duration from a number of milliseconds.
     * @param {number} milliseconds of milliseconds
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @return {Duration}
     */
    Duration.fromMillis = function (milliseconds, opts) {
        if (opts === void 0) { opts = {}; }
        return Duration.fromObject({ milliseconds: milliseconds }, opts);
    };
    /**
     * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
     * If this object is empty then a zero milliseconds duration is returned.
     * @param {Object} obj - the object to create the DateTime from
     * @param {number} obj.years
     * @param {number} obj.quarters
     * @param {number} obj.months
     * @param {number} obj.weeks
     * @param {number} obj.days
     * @param {number} obj.hours
     * @param {number} obj.minutes
     * @param {number} obj.seconds
     * @param {number} obj.milliseconds
     * @param {Object} [opts=[]] - options for creating this Duration
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the custom conversion system to use
     * @return {Duration}
     */
    Duration.fromObject = function (obj, opts) {
        if (opts === void 0) { opts = {}; }
        if (obj == null || typeof obj !== "object") {
            throw new errors_1.InvalidArgumentError("Duration.fromObject: argument expected to be an object, got ".concat(obj === null ? "null" : typeof obj));
        }
        return new Duration({
            values: (0, util_1.normalizeObject)(obj, Duration.normalizeUnit),
            loc: locale_1.Locale.fromObject(opts),
            conversionAccuracy: opts.conversionAccuracy,
            matrix: opts.matrix
        });
    };
    /**
     * Create an invalid Duration.
     * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {Duration}
     */
    Duration.invalid = function (reason, explanation) {
        if (!reason) {
            throw new errors_1.InvalidArgumentError("need to specify a reason the Duration is invalid");
        }
        var invalid = reason instanceof invalid_1.Invalid ? reason : new invalid_1.Invalid(reason, explanation);
        if (settings_1.Settings.throwOnInvalid) {
            throw new errors_1.InvalidDurationError(invalid);
        }
        else {
            return new Duration({ invalid: invalid });
        }
    };
    /**
     * Check if an object is a Duration. Works across context boundaries
     * @param {Object} o
     * @return {boolean}
     */
    Duration.isDuration = function (o) {
        return (!!o && o._isLuxonDuration) || false;
    };
    /**
     * @private
     */
    Duration.normalizeUnit = function (unit) {
        var normalized = {
            year: "years",
            years: "years",
            quarter: "quarters",
            quarters: "quarters",
            month: "months",
            months: "months",
            localWeekNumber: "localWeekNumbers",
            localWeekYear: "localWeekYears",
            localWeekday: "localWeekdays",
            localWeekNumbers: "localWeekNumbers",
            localWeekYears: "localWeekYears",
            localWeekdays: "localWeekdays",
            week: "weeks",
            weeks: "weeks",
            day: "days",
            days: "days",
            hour: "hours",
            hours: "hours",
            minute: "minutes",
            minutes: "minutes",
            second: "seconds",
            seconds: "seconds",
            millisecond: "milliseconds",
            milliseconds: "milliseconds"
        }[unit];
        if (!normalized) {
            throw new errors_1.InvalidUnitError(unit);
        }
        return normalized;
    };
    // PUBLIC INSTANCE
    /**
     * Returns a string representation of this Duration appropriate for the REPL.
     * @return {string}
     */
    Duration.prototype[Symbol.for("nodejs.util.inspect.custom")] = function () {
        if (this.isValid) {
            return "Duration { values: ".concat(JSON.stringify(this._values), " }");
        }
        else {
            return "Duration { Invalid, reason: ".concat(this.invalidReason, " }");
        }
    };
    /**
     * Return the length of the duration in the specified unit.
     * @param {string} unit - a unit such as 'minutes' or 'days'
     * @example Duration.fromObject({years: 1}).as('days') //=> 365
     * @example Duration.fromObject({years: 1}).as('months') //=> 12
     * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
     * @return {number}
     */
    Duration.prototype.as = function (unit) {
        return this.shiftTo(unit).get(unit);
    };
    /**
     * Equality check
     * Two Durations are equal iff they have the same units and the same values for each unit.
     * @param {Duration} other
     * @return {boolean}
     */
    Duration.prototype.equals = function (other) {
        if (!this.isValid || !other.isValid) {
            return false;
        }
        if (!this._loc.equals(other._loc)) {
            return false;
        }
        for (var _i = 0, ORDERED_UNITS_1 = util_1.ORDERED_UNITS; _i < ORDERED_UNITS_1.length; _i++) {
            var u = ORDERED_UNITS_1[_i];
            if (!eq(this._values[u], other._values[u])) {
                return false;
            }
        }
        return true;
    };
    /**
     * Get the value of unit.
     * @param {string} unit - a unit such as 'minute' or 'day'
     * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
     * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
     * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
     * @return {number}
     */
    Duration.prototype.get = function (unit) {
        return this[Duration.normalizeUnit(unit)];
    };
    Duration.prototype.getMaxUnit = function (onlyHuman) {
        if (onlyHuman === void 0) { onlyHuman = !1; }
        var refUnits = onlyHuman ? util_1.HUMAN_ORDERED_UNITS : util_1.ORDERED_UNITS;
        var val = this.shiftTo.apply(this, refUnits).toObject();
        return refUnits.find(function (k) { return (val[k] || 0) > 0; }) || util_1.REVERSE_ORDERED_UNITS[0];
    };
    /**
     * Scale this Duration by the specified amount. Return a newly-constructed Duration.
     * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
     * @return {Duration}
     */
    Duration.prototype.mapUnits = function (fn) {
        var _this = this;
        if (!this.isValid) {
            return this;
        }
        var result = {};
        Object.keys(this._values).forEach(function (unit) {
            result[unit] = (0, util_1.asNumber)(fn(_this._values[unit], unit));
        });
        return this._clone(this, { values: result }, true);
    };
    /**
     * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
     * @param {Duration|Object} duration - The amount to subtract. Either a Luxon Duration or the object argument to Duration.fromObject()
     * @return {Duration}
     */
    Duration.prototype.minus = function (duration) {
        if (!this.isValid) {
            return this;
        }
        var dur = Duration.fromDurationLike(duration);
        return this.plus(dur.negate());
    };
    /**
     * Return the negative of this Duration.
     * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
     * @return {Duration}
     */
    Duration.prototype.negate = function () {
        var _this = this;
        if (!this.isValid) {
            return this;
        }
        var negated = {};
        Object.keys(this._values).forEach(function (unit) {
            negated[unit] = _this._values[unit] === 0 ? 0 : -_this._values[unit];
        });
        return this._clone(this, { values: negated }, true);
    };
    /**
     * Reduce this Duration to its canonical representation in its current units.
     * Assuming the overall value of the Duration is positive, this means:
     * - excessive values for lower-order units are converted to higher order units (if possible, see first and second example)
     * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise
     *   the overall value would be negative, see third example)
     *
     * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.
     * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
     * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }
     * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
     * @return {Duration}
     */
    Duration.prototype.normalize = function () {
        if (!this.isValid) {
            return this;
        }
        var vals = this.toObject();
        normalizeValues(this._matrix, vals);
        return this._clone(this, { values: vals }, !0);
    };
    /**
     * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
     * @param {Duration|Object} duration - The amount to add. Either a Luxon Duration or the object argument to Duration.fromObject()
     * @return {Duration}
     */
    Duration.prototype.plus = function (duration) {
        var _this = this;
        if (!this.isValid) {
            return this;
        }
        var dur = Duration.fromDurationLike(duration), result = {};
        util_1.ORDERED_UNITS.forEach(function (unit) {
            if (dur._values[unit] !== undefined || _this._values[unit] !== undefined) {
                result[unit] = dur.get(unit) + _this.get(unit);
            }
        });
        return this._clone(this, { values: result }, !0);
    };
    /**
     * "Set" the locale and/or numberingSystem and/or conversionAccuracy. Returns a newly-constructed Duration.
     * @example dur.reconfigure({ locale: 'en-GB' })
     * @return {Duration}
     */
    Duration.prototype.reconfigure = function (_a) {
        var _b = _a === void 0 ? {} : _a, locale = _b.locale, numberingSystem = _b.numberingSystem, conversionAccuracy = _b.conversionAccuracy, matrix = _b.matrix;
        var loc = this._loc.clone({ locale: locale, numberingSystem: numberingSystem });
        var opts = { loc: loc, matrix: matrix, conversionAccuracy: conversionAccuracy };
        return this._clone(this, opts);
    };
    /**
     * Rescale units to its largest representation
     * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
     * @return {Duration}
     */
    Duration.prototype.rescale = function () {
        if (!this.isValid) {
            return this;
        }
        var vals = removeZeroes(this.normalize().shiftToAll().toObject());
        return this._clone(this, { values: vals }, true);
    };
    /**
     * "Set" the values of specified units. Non-specified units stay unchanged. Return a newly-constructed Duration.
     * @param {Object} values - a mapping of units to numbers
     * @example dur.set({ years: 2017 })
     * @example dur.set({ hours: 8, minutes: 30 })
     * @return {Duration}
     */
    Duration.prototype.set = function (values) {
        if (!this.isValid) {
            return this;
        }
        var mixed = tslib_1.__assign(tslib_1.__assign({}, this._values), (0, util_1.normalizeObject)(values, Duration.normalizeUnit));
        return this._clone(this, { values: mixed });
    };
    /**
     * Convert this Duration into its representation in a different set of units.
     * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
     * @return {Duration}
     */
    Duration.prototype.shiftTo = function () {
        var _this = this;
        var units = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            units[_i] = arguments[_i];
        }
        if (!this.isValid || units.length === 0) {
            return this;
        }
        units = units.map(function (u) { return Duration.normalizeUnit(u); });
        var built = {}, accumulated = {}, vals = this.toObject();
        var lastUnit;
        util_1.ORDERED_UNITS.forEach(function (k) {
            if (units.indexOf(k) >= 0) {
                lastUnit = k;
                var own_1 = 0;
                Object.keys(accumulated).forEach(function (ak) {
                    own_1 += _this._matrix[ak][k] * accumulated[ak];
                    accumulated[ak] = 0;
                });
                // plus anything that's already in this unit
                if ((0, util_1.isNumber)(vals[k])) {
                    own_1 += vals[k];
                }
                var i = Math.trunc(own_1);
                built[k] = i;
                accumulated[k] = (own_1 * 1000 - i * 1000) / 1000;
                // otherwise, keep it in the wings to boil it later
            }
            else if ((0, util_1.isNumber)(vals[k])) {
                accumulated[k] = vals[k];
            }
        });
        // anything leftover becomes the decimal for the last unit
        // lastUnit must be defined since units is not empty
        Object.keys(accumulated).forEach(function (key) {
            var v = accumulated[key];
            if (v !== 0) {
                built[lastUnit] +=
                    key === lastUnit ? v : v / _this._matrix[lastUnit][key];
            }
        });
        return this._clone(this, { values: built }, true).normalize();
    };
    /**
     * Shift this Duration to all available units.
     * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
     * @return {Duration}
     */
    Duration.prototype.shiftToAll = function () {
        if (!this.isValid) {
            return this;
        }
        return this.shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds");
    };
    /**
     * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
     * * `S` for milliseconds
     * * `s` for seconds
     * * `m` for minutes
     * * `h` for hours
     * * `d` for days
     * * `w` for weeks
     * * `M` for months
     * * `y` for years
     * Notes:
     * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
     * * Tokens can be escaped by wrapping with single quotes.
     * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations' conversion accuracy setting.
     * @param {string} fmt - the format string
     * @param {Object} opts - options
     * @param {boolean} [opts.floor=true] - floor numerical values
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
     * @return {string}
     */
    Duration.prototype.toFormat = function (fmt, opts) {
        if (opts === void 0) { opts = { floor: true }; }
        // reverse-compat since 1.2; we always round down now, never up, and we do it by default
        var fmtOpts = tslib_1.__assign(tslib_1.__assign({}, opts), { floor: opts.round !== false && opts.floor !== false });
        return this.isValid
            ? formatter_1.Formatter.create(this._loc, fmtOpts).formatDurationFromString(this, fmt)
            : Duration._INVALID;
    };
    /**
     * Returns a string representation of a Duration with all units included.
     * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options
     * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.
     * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.
     * @example
     * ```js
     * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
     * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
     * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
     * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
     * ```
     */
    Duration.prototype.toHuman = function (opts) {
        var _this = this;
        if (opts === void 0) { opts = {}; }
        if (!this.isValid) {
            return Duration._INVALID;
        }
        var maxUnit = this.getMaxUnit(!0);
        var refUnits = !!opts.onlyHumanUnits ? util_1.HUMAN_ORDERED_UNITS : util_1.ORDERED_UNITS;
        var shifted = this.shiftTo.apply(this, refUnits.slice(refUnits.indexOf(maxUnit)));
        var shiftedValues = shifted.toObject();
        var l = refUnits
            .map(function (unit) {
            var val = shiftedValues[unit];
            if ((0, util_1.isUndefined)(val) || val === 0) {
                return null;
            }
            return _this._loc
                .numberFormatter(tslib_1.__assign(tslib_1.__assign({ style: "unit", unitDisplay: "long" }, opts), { unit: unit.slice(0, -1) }))
                .format(val);
        })
            .filter(function (n) { return n; });
        var mergedOpts = tslib_1.__assign({ type: "conjunction", style: opts.listStyle || "narrow" }, opts);
        return this._loc
            .listFormatter(mergedOpts)
            .format(l);
    };
    /**
     * Returns an ISO 8601-compliant string representation of this Duration.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
     * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
     * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
     * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
     * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
     * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
     * @return {string}
     */
    Duration.prototype.toISO = function () {
        // we could use the formatter, but this is an easier way to get the minimum string
        if (!this.isValid) {
            return null;
        }
        var s = "P";
        if (this.years !== 0) {
            s += this.years + "Y";
        }
        if (this.months !== 0 || this.quarters !== 0) {
            s += this.months + this.quarters * 3 + "M";
        }
        if (this.weeks !== 0) {
            s += this.weeks + "W";
        }
        if (this.days !== 0) {
            s += this.days + "D";
        }
        if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) {
            s += "T";
        }
        if (this.hours !== 0) {
            s += this.hours + "H";
        }
        if (this.minutes !== 0) {
            s += this.minutes + "M";
        }
        if (this.seconds !== 0 || this.milliseconds !== 0) {
            // this will handle "floating point madness" by removing extra decimal places
            // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
            s += (0, util_1.roundTo)(this.seconds + this.milliseconds / 1000, 3) + "S";
        }
        if (s === "P") {
            s += "T0S";
        }
        return s;
    };
    /**
     * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
     * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Times
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
     * @return {string}
     */
    Duration.prototype.toISOTime = function (opts) {
        if (opts === void 0) { opts = {}; }
        if (!this.isValid) {
            return null;
        }
        var millis = this.toMillis();
        if (millis < 0 || millis >= 86400000) {
            return null;
        }
        opts = tslib_1.__assign(tslib_1.__assign({ suppressMilliseconds: false, suppressSeconds: false, includePrefix: false, format: "extended" }, opts), { includeOffset: false });
        var dateTime = datetime_1.DateTime.fromMillis(millis, { zone: "UTC" });
        return dateTime.toISOTime(opts);
    };
    /**
     * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
     * @return {string}
     */
    Duration.prototype.toJSON = function () {
        return this.toISO();
    };
    /**
     * Returns the value of this Duration in milliseconds.
     * @return {number}
     */
    Duration.prototype.toMillis = function () {
        if (!this.isValid) {
            return NaN;
        }
        return durationToMillis(this.matrix, this._values);
    };
    /**
     * Returns a JavaScript object with this Duration's values.
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
     * @return {Object}
     */
    Duration.prototype.toObject = function () {
        if (!this.isValid) {
            return {};
        }
        return tslib_1.__assign({}, this._values);
    };
    /**
     * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
     * @return {string}
     */
    Duration.prototype.toString = function () {
        return this.toISO();
    };
    /**
     * Returns a milliseconds value of this Duration. Alias of {@link toMillis}
     * @return {number}
     */
    Duration.prototype.valueOf = function () {
        return this.toMillis();
    };
    /**
     * @private
     */
    // clone really means "create another instance just like this one, but with these changes"
    Duration.prototype._clone = function (dur, alts, clear) {
        if (clear === void 0) { clear = false; }
        // deep merge for vals
        var conf = {
            values: clear ? alts.values : tslib_1.__assign(tslib_1.__assign({}, dur._values), (alts.values || {})),
            loc: dur._loc.clone(alts.loc),
            conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
            matrix: alts.matrix || dur.matrix
        };
        return new Duration(conf);
    };
    return Duration;
}());
exports.Duration = Duration;


/***/ }),

/***/ "./src/errors.ts":
/*!***********************!*\
  !*** ./src/errors.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ZoneIsAbstractError = exports.InvalidArgumentError = exports.ConflictingSpecificationError = exports.InvalidZoneError = exports.InvalidUnitError = exports.InvalidIntervalError = exports.InvalidDurationError = exports.InvalidDateTimeError = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/**
 * @private
 */
var TsLuxonError = /** @class */ (function (_super) {
    tslib_1.__extends(TsLuxonError, _super);
    function TsLuxonError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TsLuxonError;
}(Error));
/**
 * @private
 */
var InvalidDateTimeError = /** @class */ (function (_super) {
    tslib_1.__extends(InvalidDateTimeError, _super);
    function InvalidDateTimeError(reason) {
        return _super.call(this, "Invalid DateTime: ".concat(reason.toMessage())) || this;
    }
    return InvalidDateTimeError;
}(TsLuxonError));
exports.InvalidDateTimeError = InvalidDateTimeError;
/**
 * @private
 */
var InvalidDurationError = /** @class */ (function (_super) {
    tslib_1.__extends(InvalidDurationError, _super);
    function InvalidDurationError(reason) {
        return _super.call(this, "Invalid Duration: ".concat(reason.toMessage())) || this;
    }
    return InvalidDurationError;
}(TsLuxonError));
exports.InvalidDurationError = InvalidDurationError;
/**
 * @private
 */
var InvalidIntervalError = /** @class */ (function (_super) {
    tslib_1.__extends(InvalidIntervalError, _super);
    function InvalidIntervalError(reason) {
        return _super.call(this, "Invalid Interval: ".concat(reason.toMessage())) || this;
    }
    return InvalidIntervalError;
}(TsLuxonError));
exports.InvalidIntervalError = InvalidIntervalError;
/**
 * @private
 */
var InvalidUnitError = /** @class */ (function (_super) {
    tslib_1.__extends(InvalidUnitError, _super);
    function InvalidUnitError(unit) {
        var _this = _super.call(this, "Invalid unit ".concat(unit)) || this;
        Object.setPrototypeOf(_this, InvalidUnitError.prototype);
        return _this;
    }
    return InvalidUnitError;
}(TsLuxonError));
exports.InvalidUnitError = InvalidUnitError;
/**
 * @private
 */
var InvalidZoneError = /** @class */ (function (_super) {
    tslib_1.__extends(InvalidZoneError, _super);
    function InvalidZoneError(zoneName) {
        var _this = _super.call(this, "".concat(zoneName, " is an invalid or unknown zone specifier")) || this;
        Object.setPrototypeOf(_this, InvalidZoneError.prototype);
        return _this;
    }
    return InvalidZoneError;
}(TsLuxonError));
exports.InvalidZoneError = InvalidZoneError;
/**
 * @private
 */
var ConflictingSpecificationError = /** @class */ (function (_super) {
    tslib_1.__extends(ConflictingSpecificationError, _super);
    function ConflictingSpecificationError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, ConflictingSpecificationError.prototype);
        return _this;
    }
    return ConflictingSpecificationError;
}(TsLuxonError));
exports.ConflictingSpecificationError = ConflictingSpecificationError;
/**
 * @private
 */
var InvalidArgumentError = /** @class */ (function (_super) {
    tslib_1.__extends(InvalidArgumentError, _super);
    function InvalidArgumentError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, InvalidArgumentError.prototype);
        return _this;
    }
    return InvalidArgumentError;
}(TsLuxonError));
exports.InvalidArgumentError = InvalidArgumentError;
/**
 * @private
 */
var ZoneIsAbstractError = /** @class */ (function (_super) {
    tslib_1.__extends(ZoneIsAbstractError, _super);
    function ZoneIsAbstractError() {
        var _this = _super.call(this, "Zone is an abstract class") || this;
        Object.setPrototypeOf(_this, ZoneIsAbstractError.prototype);
        return _this;
    }
    return ZoneIsAbstractError;
}(TsLuxonError));
exports.ZoneIsAbstractError = ZoneIsAbstractError;


/***/ }),

/***/ "./src/impl/conversions.ts":
/*!*********************************!*\
  !*** ./src/impl/conversions.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dayOfWeek = dayOfWeek;
exports.gregorianToWeek = gregorianToWeek;
exports.weekToGregorian = weekToGregorian;
exports.gregorianToOrdinal = gregorianToOrdinal;
exports.ordinalToGregorian = ordinalToGregorian;
exports.hasInvalidWeekData = hasInvalidWeekData;
exports.hasInvalidOrdinalData = hasInvalidOrdinalData;
exports.hasInvalidGregorianData = hasInvalidGregorianData;
exports.hasInvalidTimeData = hasInvalidTimeData;
exports.isoWeekdayToLocal = isoWeekdayToLocal;
exports.usesLocalWeekValues = usesLocalWeekValues;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var util_1 = __webpack_require__(/*! ./util */ "./src/impl/util.ts");
var invalid_1 = __webpack_require__(/*! ../types/invalid */ "./src/types/invalid.ts");
var errors_1 = __webpack_require__(/*! ../errors */ "./src/errors.ts");
var nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
var leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];
function unitOutOfRange(unit, value) {
    return new invalid_1.Invalid("unit out of range", "you specified ".concat(value, " (of type ").concat(typeof value, ") as a ").concat(unit, ", which is invalid"));
}
function computeOrdinal(year, month, day) {
    return day + ((0, util_1.isLeapYear)(year) ? leapLadder : nonLeapLadder)[month - 1];
}
function uncomputeOrdinal(year, ordinal) {
    var table = (0, util_1.isLeapYear)(year) ? leapLadder : nonLeapLadder;
    var month0 = table.findIndex(function (i) { return i < ordinal; });
    var day = ordinal - table[month0];
    return { month: month0 + 1, day: day };
}
function dayOfWeek(year, month, day) {
    var d = new Date(Date.UTC(year, month - 1, day));
    if (year < 100 && year >= 0) {
        d.setUTCFullYear(d.getUTCFullYear() - 1900);
    }
    var js = d.getUTCDay();
    return js === 0 ? 7 : js;
}
function gregorianToWeek(gregObj, minDaysInFirstWeek, startOfWeek) {
    if (minDaysInFirstWeek === void 0) { minDaysInFirstWeek = util_1.FALLBACK_WEEK_SETTINGS.minimalDays; }
    if (startOfWeek === void 0) { startOfWeek = util_1.FALLBACK_WEEK_SETTINGS.firstDay; }
    var year = gregObj.year, month = gregObj.month, day = gregObj.day;
    var ordinal = computeOrdinal(year, month, day);
    var weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);
    var weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7), weekYear;
    if (weekNumber < 1) {
        weekYear = year - 1;
        weekNumber = (0, util_1.weeksInWeekYear)(weekYear, minDaysInFirstWeek, startOfWeek);
    }
    else if (weekNumber > (0, util_1.weeksInWeekYear)(year, minDaysInFirstWeek, startOfWeek)) {
        weekYear = year + 1;
        weekNumber = 1;
    }
    else {
        weekYear = year;
    }
    return tslib_1.__assign({ weekYear: weekYear, weekNumber: weekNumber, weekday: weekday }, (0, util_1.timeObject)(gregObj));
}
function weekToGregorian(weekData, minDaysInFirstWeek, startOfWeek) {
    if (minDaysInFirstWeek === void 0) { minDaysInFirstWeek = util_1.FALLBACK_WEEK_SETTINGS.minimalDays; }
    if (startOfWeek === void 0) { startOfWeek = util_1.FALLBACK_WEEK_SETTINGS.firstDay; }
    var weekYear = weekData.weekYear, weekNumber = weekData.weekNumber, weekday = weekData.weekday;
    var weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek);
    var yearInDays = (0, util_1.daysInYear)(weekYear);
    var ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek, year;
    if (ordinal < 1) {
        year = weekYear - 1;
        ordinal += (0, util_1.daysInYear)(year);
    }
    else if (ordinal > yearInDays) {
        year = weekYear + 1;
        ordinal -= (0, util_1.daysInYear)(weekYear);
    }
    else {
        year = weekYear;
    }
    var _a = uncomputeOrdinal(year, ordinal), month = _a.month, day = _a.day;
    return tslib_1.__assign({ year: year, month: month, day: day }, (0, util_1.timeObject)(weekData));
}
function gregorianToOrdinal(gregData) {
    var year = gregData.year, month = gregData.month, day = gregData.day;
    var ordinal = computeOrdinal(year, month, day);
    return tslib_1.__assign({ year: year, ordinal: ordinal }, (0, util_1.timeObject)(gregData));
}
function ordinalToGregorian(ordinalData) {
    var year = ordinalData.year, ordinal = ordinalData.ordinal;
    var _a = uncomputeOrdinal(year, ordinal), month = _a.month, day = _a.day;
    return tslib_1.__assign({ year: year, month: month, day: day }, (0, util_1.timeObject)(ordinalData));
}
function hasInvalidWeekData(obj, minDaysInFirstWeek, startOfWeek) {
    if (minDaysInFirstWeek === void 0) { minDaysInFirstWeek = 4; }
    if (startOfWeek === void 0) { startOfWeek = 1; }
    var validYear = (0, util_1.isInteger)(obj.weekYear), validWeek = (0, util_1.integerBetween)(obj.weekNumber, 1, (0, util_1.weeksInWeekYear)(obj.weekYear, minDaysInFirstWeek, startOfWeek)), validWeekday = (0, util_1.integerBetween)(obj.weekday, 1, 7);
    if (!validYear) {
        return unitOutOfRange("weekYear", obj.weekYear);
    }
    else if (!validWeek) {
        return unitOutOfRange("week", obj.weekNumber);
    }
    else if (!validWeekday) {
        return unitOutOfRange("weekday", obj.weekday);
    }
    return false;
}
function hasInvalidOrdinalData(obj) {
    var validYear = (0, util_1.isInteger)(obj.year), validOrdinal = (0, util_1.integerBetween)(obj.ordinal, 1, (0, util_1.daysInYear)(obj.year));
    if (!validYear) {
        return unitOutOfRange("year", obj.year);
    }
    else if (!validOrdinal) {
        return unitOutOfRange("ordinal", obj.ordinal);
    }
    return false;
}
function hasInvalidGregorianData(obj) {
    var validYear = (0, util_1.isInteger)(obj.year), validMonth = (0, util_1.integerBetween)(obj.month, 1, 12), validDay = (0, util_1.integerBetween)(obj.day, 1, (0, util_1.daysInMonth)(obj.year, obj.month));
    if (!validYear) {
        return unitOutOfRange("year", obj.year);
    }
    else if (!validMonth) {
        return unitOutOfRange("month", obj.month);
    }
    else if (!validDay) {
        return unitOutOfRange("day", obj.day);
    }
    return false;
}
function hasInvalidTimeData(obj) {
    var hour = obj.hour, minute = obj.minute, second = obj.second, millisecond = obj.millisecond;
    var validHour = (0, util_1.integerBetween)(hour, 0, 23) ||
        (hour === 24 && minute === 0 && second === 0 && millisecond === 0), validMinute = (0, util_1.integerBetween)(minute, 0, 59), validSecond = (0, util_1.integerBetween)(second, 0, 59), validMillisecond = (0, util_1.integerBetween)(millisecond, 0, 999);
    if (!validHour) {
        return unitOutOfRange("hour", hour);
    }
    else if (!validMinute) {
        return unitOutOfRange("minute", minute);
    }
    else if (!validSecond) {
        return unitOutOfRange("second", second);
    }
    else if (!validMillisecond) {
        return unitOutOfRange("millisecond", millisecond);
    }
    return false;
}
function isoWeekdayToLocal(isoWeekday, startOfWeek) {
    return ((isoWeekday - startOfWeek + 7) % 7) + 1;
}
/**
 * Check if local week units like localWeekday are used in obj.
 * If so, validates that they are not mixed with ISO week units and then copies them to the normal week unit properties.
 * Modifies obj in-place!
 * @param obj the object values
 * @param loc
 */
function usesLocalWeekValues(obj, loc) {
    var hasLocaleWeekData = (0, util_1.isDefined)(obj.localWeekday) ||
        (0, util_1.isDefined)(obj.localWeekNumber) ||
        (0, util_1.isDefined)(obj.localWeekYear);
    if (hasLocaleWeekData) {
        var hasIsoWeekData = (0, util_1.isDefined)(obj.weekday) || (0, util_1.isDefined)(obj.weekNumber) || (0, util_1.isDefined)(obj.weekYear);
        if (hasIsoWeekData) {
            throw new errors_1.ConflictingSpecificationError("Cannot mix locale-based week fields with ISO-based week fields");
        }
        if ((0, util_1.isDefined)(obj.localWeekday)) {
            obj.weekday = obj.localWeekday;
        }
        if ((0, util_1.isDefined)(obj.localWeekNumber)) {
            obj.weekNumber = obj.localWeekNumber;
        }
        if ((0, util_1.isDefined)(obj.localWeekYear)) {
            obj.weekYear = obj.localWeekYear;
        }
        delete obj.localWeekday;
        delete obj.localWeekNumber;
        delete obj.localWeekYear;
        return {
            minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),
            startOfWeek: loc.getStartOfWeek()
        };
    }
    else {
        return { minDaysInFirstWeek: util_1.FALLBACK_WEEK_SETTINGS.minimalDays, startOfWeek: util_1.FALLBACK_WEEK_SETTINGS.firstDay };
    }
}


/***/ }),

/***/ "./src/impl/diff.ts":
/*!**************************!*\
  !*** ./src/impl/diff.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.diff = void 0;
var duration_1 = __webpack_require__(/*! ../duration */ "./src/duration.ts");
function dayDiff(earlier, later) {
    var utcDayStart = function (dt) {
        return dt
            .toUTC(0, { keepLocalTime: true })
            .startOf("days")
            .valueOf();
    }, ms = utcDayStart(later) - utcDayStart(earlier);
    return Math.floor(duration_1.Duration.fromMillis(ms).as("days"));
}
function highOrderDiffs(cursor, later, units) {
    var differs = [
        ["years", function (a, b) { return b.year - a.year; }],
        ["quarters", function (a, b) { return b.quarter - a.quarter + (b.year - a.year) * 4; }],
        ["months", function (a, b) { return b.month - a.month + (b.year - a.year) * 12; }],
        [
            "weeks",
            function (a, b) {
                var days = dayDiff(a, b);
                return (days - (days % 7)) / 7;
            }
        ],
        ["days", dayDiff]
    ];
    var results = {};
    var earlier = cursor;
    var lowestOrder, highWater;
    /* This loop tries to diff using larger units first.
     If we overshoot, we backtrack and try the next smaller unit.
     "cursor" starts out at the earlier timestamp and moves closer and closer to "later"
     as we use smaller and smaller units.
     highWater keeps track of where we would be if we added one more of the smallest unit,
     this is used later to potentially convert any difference smaller than the smallest higher order unit
     into a fraction of that smallest higher order unit
     */
    for (var _i = 0, differs_1 = differs; _i < differs_1.length; _i++) {
        var _a = differs_1[_i], unit = _a[0], differ = _a[1];
        if (units.indexOf(unit) >= 0) {
            lowestOrder = unit;
            // we overshot the end point, backtrack cursor by 1
            results[unit] = differ(cursor, later);
            highWater = earlier.plus(results);
            // if we are still overshooting now, we need to backtrack again
            // this happens in certain situations when diffing times in different zones,
            // because this calculation ignores time zones
            if (highWater > later) {
                results[unit]--;
                cursor = earlier.plus(results);
                // if we are still overshooting now, we need to backtrack again
                // this happens in certain situations when diffing times in different zones,
                // because this calculation ignores time zones
                if (cursor > later) {
                    // keep the "overshot by 1" around as highWater
                    highWater = cursor;
                    // backtrack cursor by 1
                    results[unit]--;
                    cursor = earlier.plus(results);
                }
            }
            else {
                cursor = highWater;
            }
        }
    }
    return [cursor, results, highWater, lowestOrder];
}
var diff = function (earlier, later, units, opts) {
    var _a, _b;
    // eslint-disable-next-line prefer-const
    var _c = highOrderDiffs(earlier, later, units), cursor = _c[0], results = _c[1], highWater = _c[2], lowestOrder = _c[3];
    var remainingMillis = +later - +cursor;
    var lowerOrderUnits = units.filter(function (u) { return ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0; });
    if (lowerOrderUnits.length === 0) {
        if (highWater < later) {
            highWater = cursor.plus((_a = {}, _a[lowestOrder] = 1, _a));
        }
        if (highWater !== cursor) {
            results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (+highWater - +cursor);
        }
    }
    var duration = duration_1.Duration.fromObject(results, opts);
    if (lowerOrderUnits.length > 0) {
        return (_b = duration_1.Duration.fromMillis(remainingMillis, opts))
            .shiftTo.apply(_b, lowerOrderUnits).plus(duration);
    }
    else {
        return duration;
    }
};
exports.diff = diff;


/***/ }),

/***/ "./src/impl/digits.ts":
/*!****************************!*\
  !*** ./src/impl/digits.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseDigits = parseDigits;
exports.resetDigitRegexCache = resetDigitRegexCache;
exports.digitRegex = digitRegex;
var numberingSystems = {
    arab: "[\u0660-\u0669]",
    arabext: "[\u06F0-\u06F9]",
    bali: "[\u1B50-\u1B59]",
    beng: "[\u09E6-\u09EF]",
    deva: "[\u0966-\u096F]",
    fullwide: "[\uFF10-\uFF19]",
    gujr: "[\u0AE6-\u0AEF]",
    hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
    khmr: "[\u17E0-\u17E9]",
    knda: "[\u0CE6-\u0CEF]",
    laoo: "[\u0ED0-\u0ED9]",
    limb: "[\u1946-\u194F]",
    mlym: "[\u0D66-\u0D6F]",
    mong: "[\u1810-\u1819]",
    mymr: "[\u1040-\u1049]",
    orya: "[\u0B66-\u0B6F]",
    tamldec: "[\u0BE6-\u0BEF]",
    telu: "[\u0C66-\u0C6F]",
    thai: "[\u0E50-\u0E59]",
    tibt: "[\u0F20-\u0F29]",
    latn: "\\d"
};
// Why "latn" and "hanidec" are missing in Luxon??
var numberingSystemsUTF16 = {
    arab: [1632, 1641],
    arabext: [1776, 1785],
    bali: [6992, 7001],
    beng: [2534, 2543],
    deva: [2406, 2415],
    fullwide: [65296, 65303],
    gujr: [2790, 2799],
    khmr: [6112, 6121],
    knda: [3302, 3311],
    laoo: [3792, 3801],
    limb: [6470, 6479],
    mlym: [3430, 3439],
    mong: [6160, 6169],
    mymr: [4160, 4169],
    orya: [2918, 2927],
    tamldec: [3046, 3055],
    telu: [3174, 3183],
    thai: [3664, 3673],
    tibt: [3872, 3881]
};
// eslint-disable-next-line no-useless-escape
var hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
function parseDigits(str) {
    var intValue = parseInt(str, 10);
    if (!isNaN(intValue)) {
        return intValue;
    }
    var digits = "";
    for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        if (str[i].search(numberingSystems.hanidec) !== -1) {
            digits += hanidecChars.indexOf(str[i]);
        }
        else {
            for (var key in numberingSystemsUTF16) {
                var _a = numberingSystemsUTF16[key], min = _a[0], max = _a[1];
                if (code >= min && code <= max) {
                    digits += code - min;
                    break;
                }
            }
        }
    }
    return parseInt(digits, 10);
}
// cache of {numberingSystem: {append: regex}}
var digitRegexCache = {};
function resetDigitRegexCache() {
    digitRegexCache = {};
}
function digitRegex(_a, append) {
    var numberingSystem = _a.numberingSystem;
    if (append === void 0) { append = ""; }
    var ns = numberingSystem || "latn";
    if (!digitRegexCache[ns]) {
        digitRegexCache[ns] = {};
    }
    if (!digitRegexCache[ns][append]) {
        digitRegexCache[ns][append] = new RegExp("".concat(numberingSystems[ns]).concat(append));
    }
    return digitRegexCache[ns][append];
}


/***/ }),

/***/ "./src/impl/english.ts":
/*!*****************************!*\
  !*** ./src/impl/english.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.erasNarrow = exports.erasShort = exports.erasLong = exports.meridiems = exports.weekdaysNarrow = exports.weekdaysShort = exports.weekdaysLong = exports.monthsNarrow = exports.monthsShort = exports.monthsLong = void 0;
exports.months = months;
exports.weekdays = weekdays;
exports.eras = eras;
exports.meridiemForDateTime = meridiemForDateTime;
exports.weekdayForDateTime = weekdayForDateTime;
exports.monthForDateTime = monthForDateTime;
exports.eraForDateTime = eraForDateTime;
exports.formatRelativeTime = formatRelativeTime;
exports.formatString = formatString;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var Formats = tslib_1.__importStar(__webpack_require__(/*! ./formats */ "./src/impl/formats.ts"));
var util_1 = __webpack_require__(/*! ./util */ "./src/impl/util.ts");
var duration_1 = __webpack_require__(/*! ../duration */ "./src/duration.ts");
function stringify(obj) {
    return JSON.stringify(obj, Object.keys(obj).sort());
}
/**
 * @private
 */
// tslint:disable-next-line:naming-convention
exports.monthsLong = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
];
// tslint:disable-next-line:naming-convention
exports.monthsShort = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
// tslint:disable-next-line:naming-convention
exports.monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
function months(length) {
    switch (length) {
        case "narrow":
            return tslib_1.__spreadArray([], exports.monthsNarrow, true);
        case "short":
            return tslib_1.__spreadArray([], exports.monthsShort, true);
        case "long":
            return tslib_1.__spreadArray([], exports.monthsLong, true);
        case "numeric":
            return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
        case "2-digit":
            return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    }
}
// tslint:disable-next-line:naming-convention
exports.weekdaysLong = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday"
];
// tslint:disable-next-line:naming-convention
exports.weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
// tslint:disable-next-line:naming-convention
exports.weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
function weekdays(length) {
    switch (length) {
        case "narrow":
            return tslib_1.__spreadArray([], exports.weekdaysNarrow, true);
        case "short":
            return tslib_1.__spreadArray([], exports.weekdaysShort, true);
        case "long":
            return tslib_1.__spreadArray([], exports.weekdaysLong, true);
        case "numeric":
            return ["1", "2", "3", "4", "5", "6", "7"];
        default:
            return null;
    }
}
// tslint:disable-next-line:naming-convention
exports.meridiems = ["AM", "PM"];
// tslint:disable-next-line:naming-convention
exports.erasLong = ["Before Christ", "Anno Domini"];
// tslint:disable-next-line:naming-convention
exports.erasShort = ["BC", "AD"];
// tslint:disable-next-line:naming-convention
exports.erasNarrow = ["B", "A"];
function eras(length) {
    switch (length) {
        case "narrow":
            return tslib_1.__spreadArray([], exports.erasNarrow, true);
        case "short":
            return tslib_1.__spreadArray([], exports.erasShort, true);
        case "long":
            return tslib_1.__spreadArray([], exports.erasLong, true);
        default:
            return null;
    }
}
function meridiemForDateTime(dt) {
    return exports.meridiems[dt.hour < 12 ? 0 : 1];
}
function weekdayForDateTime(dt, length) {
    return weekdays(length)[dt.weekday - 1];
}
function monthForDateTime(dt, length) {
    return months(length)[dt.month - 1];
}
function eraForDateTime(dt, length) {
    return eras(length)[dt.year < 0 ? 0 : 1];
}
function formatRelativeTime(unit, count, numeric, narrow) {
    if (numeric === void 0) { numeric = "always"; }
    if (narrow === void 0) { narrow = false; }
    var units = {
        years: ["year", "yr."],
        quarters: ["quarter", "qtr."],
        months: ["month", "mo."],
        weeks: ["week", "wk."],
        days: ["day", "day", "days"],
        hours: ["hour", "hr."],
        minutes: ["minute", "min."],
        seconds: ["second", "sec."],
        milliseconds: [] // never used
    };
    var normalizedUnit = duration_1.Duration.normalizeUnit(unit), unitTexts = units[normalizedUnit], lastable = ["hours", "minutes", "seconds"].indexOf(normalizedUnit) === -1;
    if (numeric === "auto" && lastable) {
        var isDay = normalizedUnit === "days";
        switch (count) {
            case 1:
                return isDay ? "tomorrow" : "next ".concat(unitTexts[0]);
            case -1:
                return isDay ? "yesterday" : "last ".concat(unitTexts[0]);
            case 0:
                return isDay ? "today" : "this ".concat(unitTexts[0]);
            default: // fall through
        }
    }
    var isInPast = Object.is(count, -0) || count < 0, formatValue = Math.abs(count), singular = formatValue === 1, formatUnit = narrow
        ? singular
            ? unitTexts[1]
            : unitTexts[2] || unitTexts[1]
        : singular
            ? unitTexts[0]
            : normalizedUnit;
    return isInPast ? "".concat(formatValue, " ").concat(formatUnit, " ago") : "in ".concat(formatValue, " ").concat(formatUnit);
}
function formatString(knownFormat) {
    // these all have the offsets removed because we don't have access to them
    // without all the intl stuff this is backfilling
    var filtered = (0, util_1.pick)(knownFormat, [
        "weekday",
        "era",
        "year",
        "month",
        "day",
        "hour",
        "minute",
        "second",
        "timeZoneName",
        "hourCycle"
    ]), key = stringify(filtered), dateTimeHuge = "EEEE, LLLL d, yyyy, h:mm a";
    switch (key) {
        case stringify(Formats.DATE_SHORT):
            return "M/d/yyyy";
        case stringify(Formats.DATE_MED):
            return "LLL d, yyyy";
        case stringify(Formats.DATE_MED_WITH_WEEKDAY):
            return "EEE, LLL d, yyyy";
        case stringify(Formats.DATE_FULL):
            return "LLLL d, yyyy";
        case stringify(Formats.DATE_HUGE):
            return "EEEE, LLLL d, yyyy";
        case stringify(Formats.TIME_SIMPLE):
            return "h:mm a";
        case stringify(Formats.TIME_WITH_SECONDS):
            return "h:mm:ss a";
        case stringify(Formats.TIME_WITH_SHORT_OFFSET):
            return "h:mm a";
        case stringify(Formats.TIME_WITH_LONG_OFFSET):
            return "h:mm a";
        case stringify(Formats.TIME_24_SIMPLE):
            return "HH:mm";
        case stringify(Formats.TIME_24_WITH_SECONDS):
            return "HH:mm:ss";
        case stringify(Formats.TIME_24_WITH_SHORT_OFFSET):
            return "HH:mm";
        case stringify(Formats.TIME_24_WITH_LONG_OFFSET):
            return "HH:mm";
        case stringify(Formats.DATETIME_SHORT):
            return "M/d/yyyy, h:mm a";
        case stringify(Formats.DATETIME_MED):
            return "LLL d, yyyy, h:mm a";
        case stringify(Formats.DATETIME_FULL):
            return "LLLL d, yyyy, h:mm a";
        case stringify(Formats.DATETIME_HUGE):
            return dateTimeHuge;
        case stringify(Formats.DATETIME_SHORT_WITH_SECONDS):
            return "M/d/yyyy, h:mm:ss a";
        case stringify(Formats.DATETIME_MED_WITH_SECONDS):
            return "LLL d, yyyy, h:mm:ss a";
        case stringify(Formats.DATETIME_MED_WITH_WEEKDAY):
            return "EEE, d LLL yyyy, h:mm a";
        case stringify(Formats.DATETIME_FULL_WITH_SECONDS):
            return "LLLL d, yyyy, h:mm:ss a";
        case stringify(Formats.DATETIME_HUGE_WITH_SECONDS):
            return "EEEE, LLLL d, yyyy, h:mm:ss a";
        default:
            return dateTimeHuge;
    }
}


/***/ }),

/***/ "./src/impl/formats.ts":
/*!*****************************!*\
  !*** ./src/impl/formats.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DATETIME_HUGE_WITH_SECONDS = exports.DATETIME_HUGE = exports.DATETIME_FULL_WITH_SECONDS = exports.DATETIME_FULL = exports.DATETIME_MED_WITH_WEEKDAY = exports.DATETIME_MED_WITH_SECONDS = exports.DATETIME_MED = exports.DATETIME_SHORT_WITH_SECONDS = exports.DATETIME_SHORT = exports.TIME_24_WITH_LONG_OFFSET = exports.TIME_24_WITH_SHORT_OFFSET = exports.TIME_24_WITH_SECONDS = exports.TIME_24_SIMPLE = exports.TIME_WITH_LONG_OFFSET = exports.TIME_WITH_SHORT_OFFSET = exports.TIME_WITH_SECONDS = exports.TIME_SIMPLE = exports.DATE_HUGE = exports.DATE_FULL = exports.DATE_MED_WITH_WEEKDAY = exports.DATE_MED = exports.DATE_SHORT = void 0;
/**
 * @private
 */
var n = "numeric", s = "short", l = "long";
exports.DATE_SHORT = {
    year: n,
    month: n,
    day: n
};
exports.DATE_MED = {
    year: n,
    month: s,
    day: n
};
exports.DATE_MED_WITH_WEEKDAY = {
    year: n,
    month: s,
    day: n,
    weekday: s
};
exports.DATE_FULL = {
    year: n,
    month: l,
    day: n
};
exports.DATE_HUGE = {
    year: n,
    month: l,
    day: n,
    weekday: l
};
exports.TIME_SIMPLE = {
    hour: n,
    minute: n
};
exports.TIME_WITH_SECONDS = {
    hour: n,
    minute: n,
    second: n
};
exports.TIME_WITH_SHORT_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    timeZoneName: s
};
exports.TIME_WITH_LONG_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    timeZoneName: l
};
exports.TIME_24_SIMPLE = {
    hour: n,
    minute: n,
    hourCycle: "h23"
};
exports.TIME_24_WITH_SECONDS = {
    hour: n,
    minute: n,
    second: n,
    hourCycle: "h23"
};
exports.TIME_24_WITH_SHORT_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    hourCycle: "h23",
    timeZoneName: s
};
exports.TIME_24_WITH_LONG_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    hourCycle: "h23",
    timeZoneName: l
};
exports.DATETIME_SHORT = {
    year: n,
    month: n,
    day: n,
    hour: n,
    minute: n
};
exports.DATETIME_SHORT_WITH_SECONDS = {
    year: n,
    month: n,
    day: n,
    hour: n,
    minute: n,
    second: n
};
exports.DATETIME_MED = {
    year: n,
    month: s,
    day: n,
    hour: n,
    minute: n
};
exports.DATETIME_MED_WITH_SECONDS = {
    year: n,
    month: s,
    day: n,
    hour: n,
    minute: n,
    second: n
};
exports.DATETIME_MED_WITH_WEEKDAY = {
    year: n,
    month: s,
    day: n,
    weekday: s,
    hour: n,
    minute: n
};
exports.DATETIME_FULL = {
    year: n,
    month: l,
    day: n,
    hour: n,
    minute: n,
    timeZoneName: s
};
exports.DATETIME_FULL_WITH_SECONDS = {
    year: n,
    month: l,
    day: n,
    hour: n,
    minute: n,
    second: n,
    timeZoneName: s
};
exports.DATETIME_HUGE = {
    year: n,
    month: l,
    day: n,
    weekday: l,
    hour: n,
    minute: n,
    timeZoneName: l
};
exports.DATETIME_HUGE_WITH_SECONDS = {
    year: n,
    month: l,
    day: n,
    weekday: l,
    hour: n,
    minute: n,
    second: n,
    timeZoneName: l
};


/***/ }),

/***/ "./src/impl/formatter.ts":
/*!*******************************!*\
  !*** ./src/impl/formatter.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Formatter = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var English = tslib_1.__importStar(__webpack_require__(/*! ./english */ "./src/impl/english.ts"));
var Formats = tslib_1.__importStar(__webpack_require__(/*! ./formats */ "./src/impl/formats.ts"));
var util_1 = __webpack_require__(/*! ./util */ "./src/impl/util.ts");
function stringifyTokens(splits, tokenToString) {
    var s = "";
    for (var _i = 0, splits_1 = splits; _i < splits_1.length; _i++) {
        var token = splits_1[_i];
        if (token.literal) {
            s += token.val;
        }
        else {
            s += tokenToString(token.val);
        }
    }
    return s;
}
// eslint-disable-next-line @typescript-eslint/naming-convention
var TokenToFormatOpts = {
    /* eslint-disable @typescript-eslint/naming-convention */
    D: Formats.DATE_SHORT,
    DD: Formats.DATE_MED,
    DDD: Formats.DATE_FULL,
    DDDD: Formats.DATE_HUGE,
    t: Formats.TIME_SIMPLE,
    tt: Formats.TIME_WITH_SECONDS,
    ttt: Formats.TIME_WITH_SHORT_OFFSET,
    tttt: Formats.TIME_WITH_LONG_OFFSET,
    T: Formats.TIME_24_SIMPLE,
    TT: Formats.TIME_24_WITH_SECONDS,
    TTT: Formats.TIME_24_WITH_SHORT_OFFSET,
    TTTT: Formats.TIME_24_WITH_LONG_OFFSET,
    f: Formats.DATETIME_SHORT,
    ff: Formats.DATETIME_MED,
    fff: Formats.DATETIME_FULL,
    ffff: Formats.DATETIME_HUGE,
    F: Formats.DATETIME_SHORT_WITH_SECONDS,
    FF: Formats.DATETIME_MED_WITH_SECONDS,
    FFF: Formats.DATETIME_FULL_WITH_SECONDS,
    FFFF: Formats.DATETIME_HUGE_WITH_SECONDS
    /* eslint-enable @typescript-eslint/naming-convention */
};
/**
 * @private
 */
var Formatter = /** @class */ (function () {
    function Formatter(locale, formatOptions) {
        this._opts = formatOptions;
        this._loc = locale;
        this._systemLoc = void 0;
    }
    Formatter.create = function (locale, options) {
        if (options === void 0) { options = {}; }
        return new Formatter(locale, options);
    };
    Formatter.macroTokenToFormatOpts = function (token) {
        return TokenToFormatOpts[token];
    };
    Formatter.parseFormat = function (fmt) {
        // white-space is always considered a literal in user-provided formats
        // the " " token has a special meaning (see unitForToken)
        var current = null, currentFull = "", bracketed = false;
        var splits = [];
        for (var i = 0; i < fmt.length; i++) {
            var c = fmt.charAt(i);
            if (c === "'") {
                if (currentFull.length > 0) {
                    splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
                }
                current = null;
                currentFull = "";
                bracketed = !bracketed;
            }
            else if (bracketed) {
                currentFull += c;
            }
            else if (c === current) {
                currentFull += c;
            }
            else {
                if (currentFull.length > 0) {
                    splits.push({ literal: /^\s+$/.test(currentFull), val: currentFull });
                }
                currentFull = c;
                current = c;
            }
        }
        if (currentFull.length > 0) {
            splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
        }
        return splits;
    };
    Formatter.prototype.dtFormatter = function (dt, opts) {
        if (opts === void 0) { opts = {}; }
        return this._loc.dtFormatter(dt, tslib_1.__assign(tslib_1.__assign({}, this._opts), opts));
    };
    Formatter.prototype.formatDateTime = function (dt, opts) {
        return this.dtFormatter(dt, opts).format();
    };
    Formatter.prototype.formatDateTimeFromString = function (dt, fmt) {
        var _this = this;
        var knownEnglish = this._loc.listingMode() === "en", useDateTimeFormatter = this._loc.outputCalendar && this._loc.outputCalendar !== "gregory", string = function (opts, extract) { return _this._loc.extract(dt, opts, extract); }, formatOffset = function (opts) {
            if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
                return "Z";
            }
            return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
        }, meridiem = function () {
            return knownEnglish
                ? English.meridiemForDateTime(dt)
                : string({ hour: "numeric", hourCycle: "h12" }, "dayPeriod");
        }, month = function (length, standalone) {
            return knownEnglish
                ? English.monthForDateTime(dt, length)
                : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month");
        }, weekday = function (length, standalone) {
            return knownEnglish
                ? English.weekdayForDateTime(dt, length)
                : string(standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" }, "weekday");
        }, maybeMacro = function (token) {
            var formatOpts = Formatter.macroTokenToFormatOpts(token);
            if (formatOpts) {
                return _this.formatWithSystemDefault(dt, formatOpts);
            }
            else {
                return token;
            }
        }, era = function (length) {
            return knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, "era");
        }, tokenToString = function (token) {
            // Where possible: https://cldr.unicode.org/translation/date-time/date-time-symbols
            switch (token) {
                // ms
                case "S":
                    return _this.num(dt.millisecond);
                case "u":
                // falls through
                case "SSS":
                    return _this.num(dt.millisecond, 3);
                // seconds
                case "s":
                    return _this.num(dt.second);
                case "ss":
                    return _this.num(dt.second, 2);
                // fractional seconds
                case "uu":
                    return _this.num(Math.floor(dt.millisecond / 10), 2);
                case "uuu":
                    return _this.num(Math.floor(dt.millisecond / 100));
                // minutes
                case "m":
                    return _this.num(dt.minute);
                case "mm":
                    return _this.num(dt.minute, 2);
                // hours
                case "h":
                    return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
                case "hh":
                    return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
                case "H":
                    return _this.num(dt.hour);
                case "HH":
                    return _this.num(dt.hour, 2);
                // offset
                case "Z":
                    // like +6
                    return formatOffset({ format: "narrow", allowZ: _this._opts.allowZ });
                case "ZZ":
                    // like +06:00
                    return formatOffset({ format: "short", allowZ: _this._opts.allowZ });
                case "ZZZ":
                    // like +0600
                    return formatOffset({ format: "techie", allowZ: _this._opts.allowZ });
                case "ZZZZ":
                    // like EST
                    return dt.zone.offsetName(dt.ts, { format: "short", locale: _this._loc.locale }) || "";
                case "ZZZZZ":
                    // like Eastern Standard Time
                    return dt.zone.offsetName(dt.ts, { format: "long", locale: _this._loc.locale }) || "";
                // zone
                case "z":
                    // like America/New_York
                    return dt.zoneName || "";
                // meridiems
                case "a":
                    return meridiem();
                // dates
                case "d":
                    return useDateTimeFormatter ? string({ day: "numeric" }, "day") : _this.num(dt.day);
                case "dd":
                    return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : _this.num(dt.day, 2);
                // weekdays - standalone
                case "c":
                    // like 1
                    return _this.num(dt.weekday);
                case "ccc":
                    // like 'Tues'
                    return weekday("short", true);
                case "cccc":
                    // like 'Tuesday'
                    return weekday("long", true);
                case "ccccc":
                    // like 'T'
                    return weekday("narrow", true);
                // weekdays - format
                case "E":
                    // like 1
                    return _this.num(dt.weekday);
                case "EEE":
                    // like 'Tues'
                    return weekday("short", false);
                case "EEEE":
                    // like 'Tuesday'
                    return weekday("long", false);
                case "EEEEE":
                    // like 'T'
                    return weekday("narrow", false);
                // months - standalone
                case "L":
                    // like 1
                    return useDateTimeFormatter
                        ? string({ month: "numeric", day: "numeric" }, "month")
                        : _this.num(dt.month);
                case "LL":
                    // like 01, doesn't seem to work
                    return useDateTimeFormatter
                        ? string({ month: "2-digit", day: "numeric" }, "month")
                        : _this.num(dt.month, 2);
                case "LLL":
                    // like Jan
                    return month("short", true);
                case "LLLL":
                    // like January
                    return month("long", true);
                case "LLLLL":
                    // like J
                    return month("narrow", true);
                // months - format
                case "M":
                    // like 1
                    return useDateTimeFormatter
                        ? string({ month: "numeric" }, "month")
                        : _this.num(dt.month);
                case "MM":
                    // like 01
                    return useDateTimeFormatter
                        ? string({ month: "2-digit" }, "month")
                        : _this.num(dt.month, 2);
                case "MMM":
                    // like Jan
                    return month("short", false);
                case "MMMM":
                    // like January
                    return month("long", false);
                case "MMMMM":
                    // like J
                    return month("narrow", false);
                // years
                case "y":
                    // like 2014
                    return useDateTimeFormatter ? string({ year: "numeric" }, "year") : _this.num(dt.year);
                case "yy":
                    // like 14
                    return useDateTimeFormatter
                        ? string({ year: "2-digit" }, "year")
                        : _this.num(parseInt(dt.year.toString().slice(-2), 10), 2);
                case "yyyy":
                    // like 0012
                    return useDateTimeFormatter
                        ? string({ year: "numeric" }, "year")
                        : _this.num(dt.year, 4);
                case "yyyyyy":
                    // like 000012
                    return useDateTimeFormatter
                        ? string({ year: "numeric" }, "year")
                        : _this.num(dt.year, 6);
                // eras
                case "G":
                    // like AD
                    return era("short");
                case "GG":
                    // like Anno Domini
                    return era("long");
                case "GGGGG":
                    return era("narrow");
                case "kk":
                    return _this.num(parseInt(dt.weekYear.toString().slice(-2), 10), 2);
                case "kkkk":
                    return _this.num(dt.weekYear, 4);
                case "W":
                    return _this.num(dt.weekNumber);
                case "WW":
                    return _this.num(dt.weekNumber, 2);
                case "o":
                    return _this.num(dt.ordinal);
                case "ooo":
                    return _this.num(dt.ordinal, 3);
                case "q":
                    // like 1
                    return _this.num(dt.quarter);
                case "qq":
                    // like 01
                    return _this.num(dt.quarter, 2);
                case "X":
                    return _this.num(Math.floor(dt.ts / 1000));
                case "x":
                    return _this.num(dt.ts);
                default:
                    return maybeMacro(token);
            }
        };
        return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
    };
    Formatter.prototype.formatDateTimeParts = function (dt, opts) {
        return this.dtFormatter(dt, opts).formatToParts();
    };
    Formatter.prototype.formatDurationFromString = function (dur, format) {
        var _this = this;
        var tokenToField = function (token) {
            switch (token[0]) {
                case "S":
                    return "milliseconds";
                case "s":
                    return "seconds";
                case "m":
                    return "minutes";
                case "h":
                    return "hours";
                case "d":
                    return "days";
                case "M":
                    return "months";
                case "y":
                    return "years";
                default:
                    return undefined;
            }
        };
        var tokenToString = function (lildur) { return function (token) {
            var mapped = tokenToField(token);
            if (mapped) {
                return _this.num(lildur.get(mapped), token.length);
            }
            else {
                return token;
            }
        }; };
        var tokens = Formatter.parseFormat(format);
        var realTokens = tokens.reduce(function (found, _a) {
            var literal = _a.literal, val = _a.val;
            return (literal ? found : found.concat(val));
        }, []);
        var collapsed = dur.shiftTo.apply(dur, realTokens.map(tokenToField).filter(function (t) { return !!t; }));
        return stringifyTokens(tokens, tokenToString(collapsed));
    };
    Formatter.prototype.formatInterval = function (interval, opts) {
        if (opts === void 0) { opts = {}; }
        if (!interval.isValid) {
            throw Error("Invalid Interval provided!");
        }
        var df = this.dtFormatter(interval.start, opts);
        return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
    };
    Formatter.prototype.formatWithSystemDefault = function (dt, opts) {
        if (this._systemLoc === void 0) {
            this._systemLoc = this._loc.redefaultToSystem();
        }
        var df = this._systemLoc.dtFormatter(dt, tslib_1.__assign(tslib_1.__assign({}, this._opts), opts));
        return df.format();
    };
    Formatter.prototype.num = function (n, p) {
        if (p === void 0) { p = 0; }
        // we get some perf out of doing this here, annoyingly
        if (this._opts.forceSimple) {
            return (0, util_1.padStart)(n, p);
        }
        var opts = tslib_1.__assign({}, this._opts);
        if (p > 0) {
            opts.padTo = p;
        }
        return this._loc.numberFormatter(opts).format(n);
    };
    Formatter.prototype.resolvedOptions = function (dt, opts) {
        if (opts === void 0) { opts = {}; }
        return this.dtFormatter(dt, opts).resolvedOptions();
    };
    return Formatter;
}());
exports.Formatter = Formatter;


/***/ }),

/***/ "./src/impl/locale-cache.ts":
/*!**********************************!*\
  !*** ./src/impl/locale-cache.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocaleCache = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var intl_next_1 = tslib_1.__importDefault(__webpack_require__(/*! ../types/intl-next */ "./src/types/intl-next.ts"));
/**
 * @private
 */
var LocaleCache = /** @class */ (function () {
    function LocaleCache() {
    }
    LocaleCache.getCachedDTF = function (locString, options) {
        if (options === void 0) { options = {}; }
        var key = JSON.stringify([locString, options]);
        var dtf = this._intlDTCache[key];
        if (!dtf) {
            dtf = new intl_next_1.default.DateTimeFormat(locString, options);
            this._intlDTCache[key] = dtf;
        }
        return dtf;
    };
    LocaleCache.getCachedINF = function (locString, options) {
        var key = JSON.stringify([locString, options]);
        var inf = this._intlNumCache[key];
        if (!inf) {
            inf = new intl_next_1.default.NumberFormat(locString, options);
            this._intlNumCache[key] = inf;
        }
        return inf;
    };
    LocaleCache.getCachedIntResolvedOptions = function (locString) {
        if (!this._intlResolvedOptionsCache[locString]) {
            this._intlResolvedOptionsCache[locString] = new intl_next_1.default.DateTimeFormat(locString).resolvedOptions();
        }
        return this._intlResolvedOptionsCache[locString];
    };
    LocaleCache.getCachedLF = function (locString, opts) {
        if (opts === void 0) { opts = {}; }
        var key = JSON.stringify([locString, opts]);
        var dtf = this._intlLFCache[key];
        if (!dtf) {
            dtf = new intl_next_1.default.ListFormat(locString, opts);
            this._intlLFCache[key] = dtf;
        }
        return dtf;
    };
    LocaleCache.getCachedRTF = function (locale, options) {
        if (options === void 0) { options = {}; }
        var key = JSON.stringify([locale, options]);
        var inf = this._intlRelCache[key];
        if (!inf) {
            inf = new intl_next_1.default.RelativeTimeFormat(locale, options);
            this._intlRelCache[key] = inf;
        }
        return inf;
    };
    LocaleCache.reset = function () {
        this._sysLocaleCache = void 0;
        this._intlLFCache = {};
        this._intlDTCache = {};
        this._intlNumCache = {};
        this._intlRelCache = {};
        this._intlResolvedOptionsCache = {};
    };
    LocaleCache.systemLocale = function () {
        if (!this._sysLocaleCache) {
            this._sysLocaleCache = new intl_next_1.default.DateTimeFormat().resolvedOptions().locale;
        }
        return this._sysLocaleCache;
    };
    LocaleCache._intlDTCache = {};
    LocaleCache._intlLFCache = {};
    LocaleCache._intlNumCache = {};
    LocaleCache._intlRelCache = {};
    LocaleCache._intlResolvedOptionsCache = {};
    return LocaleCache;
}());
exports.LocaleCache = LocaleCache;


/***/ }),

/***/ "./src/impl/locale.ts":
/*!****************************!*\
  !*** ./src/impl/locale.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Locale = exports.PolyDateFormatter = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var util_1 = __webpack_require__(/*! ./util */ "./src/impl/util.ts");
var English = tslib_1.__importStar(__webpack_require__(/*! ./english */ "./src/impl/english.ts"));
var settings_1 = __webpack_require__(/*! ../settings */ "./src/settings.ts");
var datetime_1 = __webpack_require__(/*! ../datetime */ "./src/datetime.ts");
var IANAZone_1 = __webpack_require__(/*! ../zones/IANAZone */ "./src/zones/IANAZone.ts");
var intl_next_1 = tslib_1.__importDefault(__webpack_require__(/*! ../types/intl-next */ "./src/types/intl-next.ts"));
var locale_cache_1 = __webpack_require__(/*! ./locale-cache */ "./src/impl/locale-cache.ts");
function parseLocaleString(localeStr) {
    // I really want to avoid writing a BCP 47 parser
    // see, e.g. https://github.com/wooorm/bcp-47
    // Instead, we'll do this:
    // a) if the string has no -u extensions, just leave it alone
    // b) if it does, use Intl to resolve everything
    // c) if Intl fails, try again without the -u
    // private subtags and Unicode subtags have ordering requirements,
    // and we're not properly parsing this, so just strip out the
    // private ones if they exist.
    var xIndex = localeStr.indexOf("-x-");
    if (xIndex !== -1) {
        localeStr = localeStr.substring(0, xIndex);
    }
    var uIndex = localeStr.indexOf("-u-");
    if (uIndex === -1) {
        return [localeStr];
    }
    else {
        var options = void 0;
        var selectedStr = void 0;
        try {
            options = locale_cache_1.LocaleCache.getCachedDTF(localeStr).resolvedOptions();
            selectedStr = localeStr;
        }
        catch (e) {
            var smaller = localeStr.substring(0, uIndex);
            options = locale_cache_1.LocaleCache.getCachedDTF(smaller).resolvedOptions();
            selectedStr = smaller;
        }
        var numberingSystem = options.numberingSystem, calendar = options.calendar;
        return [selectedStr, numberingSystem, calendar];
    }
}
function intlConfigString(localeStr, numberingSystem, outputCalendar) {
    if (outputCalendar || numberingSystem) {
        if (!localeStr.includes("-u-")) {
            localeStr += "-u";
        }
        if (outputCalendar) {
            localeStr += "-ca-".concat(outputCalendar);
        }
        if (numberingSystem) {
            localeStr += "-nu-".concat(numberingSystem);
        }
        return localeStr;
    }
    else {
        return localeStr;
    }
}
function mapMonths(f) {
    var ms = [];
    for (var i = 1; i <= 12; i++) {
        var dt = datetime_1.DateTime.utc(2009, i, 1);
        ms.push(f(dt));
    }
    return ms;
}
function mapWeekdays(f) {
    var ms = [];
    for (var i = 1; i <= 7; i++) {
        var dt = datetime_1.DateTime.utc(2016, 11, 13 + i);
        ms.push(f(dt));
    }
    return ms;
}
function listStuff(loc, length, englishFn, intlFn) {
    var mode = loc.listingMode();
    // In Luxon a check on mode === "error" was kept, but could never be true
    if (mode === "en") {
        return englishFn(length);
    }
    else {
        return intlFn(length);
    }
}
/**
 * @private
 */
var PolyNumberFormatter = /** @class */ (function () {
    function PolyNumberFormatter(intl, forceSimple, opts) {
        var padTo = opts.padTo, floor = opts.floor, otherOpts = tslib_1.__rest(opts, ["padTo", "floor"]);
        this._padTo = padTo || 0;
        this._floor = floor || false;
        if (!forceSimple || Object.keys(otherOpts).length > 0) {
            var intlOpts = tslib_1.__assign({ useGrouping: false }, opts);
            if (this._padTo > 0) {
                intlOpts.minimumIntegerDigits = padTo;
            }
            this._inf = locale_cache_1.LocaleCache.getCachedINF(intl, intlOpts);
        }
    }
    PolyNumberFormatter.prototype.format = function (i) {
        if (this._inf) {
            var fixed = this._floor ? Math.floor(i) : i;
            return this._inf.format(fixed);
        }
        else {
            // to match the browser's numberformatter defaults
            var fixed = this._floor ? Math.floor(i) : (0, util_1.roundTo)(i, 3);
            return (0, util_1.padStart)(fixed, this._padTo);
        }
    };
    return PolyNumberFormatter;
}());
/**
 * @private
 */
var PolyDateFormatter = /** @class */ (function () {
    function PolyDateFormatter(dt, intl, opts) {
        this._opts = opts;
        var z;
        if (this._opts.timeZone) {
            // Don't apply any workarounds if a timeZone is explicitly provided in opts
            this._dt = dt;
        }
        else if (dt.zone.type === "fixed") {
            // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.
            // That is why fixed-offset TZ is set to that unless it is:
            // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.
            // 2. Unsupported by the browser:
            //    - some do not support Etc/
            //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata
            var gmtOffset = -1 * (dt.offset / 60);
            var offsetZ = gmtOffset >= 0 ? "Etc/GMT+".concat(gmtOffset) : "Etc/GMT".concat(gmtOffset);
            if (dt.offset !== 0 && IANAZone_1.IANAZone.create(offsetZ).isValid) {
                z = offsetZ;
                this._dt = dt;
            }
            else {
                // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so
                // we manually apply the offset and substitute the zone as needed.
                z = "UTC";
                this._dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({ minutes: dt.offset });
                this._originalZone = dt.zone;
            }
        }
        else if (dt.zone.type === "system") {
            this._dt = dt;
        }
        else if (dt.zone.type === "iana") {
            this._dt = dt;
            z = dt.zone.name;
        }
        else {
            // Custom zones can have any offset / offsetName, so we just manually apply the offset and substitute the zone as needed.
            z = "UTC";
            this._dt = dt.setZone("UTC").plus({ minutes: dt.offset });
            this._originalZone = dt.zone;
        }
        var intlOpts = tslib_1.__assign(tslib_1.__assign({}, this._opts), { timeZone: this._opts.timeZone || z });
        this._dtf = locale_cache_1.LocaleCache.getCachedDTF(intl, intlOpts);
    }
    Object.defineProperty(PolyDateFormatter.prototype, "dtf", {
        get: function () {
            return this._dtf;
        },
        enumerable: false,
        configurable: true
    });
    PolyDateFormatter.prototype.format = function () {
        if (this._originalZone) {
            // If we have to substitute in the actual zone name, we have to use
            // formatToParts so that the timezone can be replaced.
            return this.formatToParts()
                .map(function (_a) {
                var value = _a.value;
                return value;
            })
                .join("");
        }
        return this.dtf.format(this._dt.toJSDate());
    };
    PolyDateFormatter.prototype.formatToParts = function () {
        var _this = this;
        var parts = this.dtf.formatToParts(this._dt.toJSDate());
        if (!!this._originalZone) {
            return parts.map(function (part) {
                if (part.type === "timeZoneName") {
                    // tslint:disable-next-line:no-non-null-assertion
                    var offsetName = _this._originalZone.offsetName(_this._dt.ts, {
                        locale: _this._dt.locale,
                        format: _this._opts.timeZoneName
                    });
                    return tslib_1.__assign(tslib_1.__assign({}, part), { 
                        // tslint:disable-next-line:no-non-null-assertion
                        value: offsetName });
                }
                else {
                    return part;
                }
            });
        }
        return parts;
    };
    PolyDateFormatter.prototype.resolvedOptions = function () {
        return this._dtf.resolvedOptions();
    };
    return PolyDateFormatter;
}());
exports.PolyDateFormatter = PolyDateFormatter;
/**
 * @private
 */
var PolyRelFormatter = /** @class */ (function () {
    function PolyRelFormatter(locale, isEnglish, opts) {
        this._opts = tslib_1.__assign({ style: "long" }, opts);
        if (!isEnglish && (0, util_1.hasRelative)()) {
            this._rtf = locale_cache_1.LocaleCache.getCachedRTF(locale, opts);
        }
    }
    PolyRelFormatter.prototype.format = function (count, unit) {
        if (this._rtf) {
            return this._rtf.format(count, unit);
        }
        else {
            return English.formatRelativeTime(unit, count, this._opts.numeric, this._opts.style !== "long");
        }
    };
    PolyRelFormatter.prototype.formatToParts = function (count, unit) {
        if (this._rtf) {
            return this._rtf.formatToParts(count, unit);
        }
        else {
            return [];
        }
    };
    return PolyRelFormatter;
}());
/**
 * @private
 */
var Locale = /** @class */ (function () {
    function Locale(locale, numberingSystem, outputCalendar, weekSettings, specifiedLocale) {
        var _a = parseLocaleString(locale), parsedLocale = _a[0], parsedNumberingSystem = _a[1], parsedOutputCalendar = _a[2];
        this.locale = parsedLocale;
        this.numberingSystem = numberingSystem || parsedNumberingSystem;
        this.outputCalendar = outputCalendar || parsedOutputCalendar;
        this._intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
        this._weekSettings = weekSettings;
        this._weekdaysCache = { format: {}, standalone: {} };
        this._monthsCache = { format: {}, standalone: {} };
        this._meridiemCache = undefined;
        this._eraCache = {};
        this._specifiedLocale = specifiedLocale;
        this._fastNumbersCached = undefined;
    }
    Object.defineProperty(Locale.prototype, "fastNumbers", {
        get: function () {
            if (this._fastNumbersCached === undefined) {
                this._fastNumbersCached = this._supportsFastNumbers();
            }
            return this._fastNumbersCached;
        },
        enumerable: false,
        configurable: true
    });
    Locale.create = function (locale, numberingSystem, outputCalendar, weekSettings, defaultToEN) {
        if (defaultToEN === void 0) { defaultToEN = !1; }
        var specifiedLocale = locale || settings_1.Settings.defaultLocale;
        // the system locale is useful for human-readable strings but annoying for parsing/formatting known formats
        var localeR = specifiedLocale || (defaultToEN ? "en-US" : locale_cache_1.LocaleCache.systemLocale());
        var numberingSystemR = numberingSystem || settings_1.Settings.defaultNumberingSystem;
        var outputCalendarR = outputCalendar || settings_1.Settings.defaultOutputCalendar;
        var weekSettingsR = (0, util_1.validateWeekSettings)(weekSettings) || settings_1.Settings.defaultWeekSettings;
        return new Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);
    };
    Locale.fromObject = function (_a) {
        var _b = _a === void 0 ? {} : _a, locale = _b.locale, numberingSystem = _b.numberingSystem, outputCalendar = _b.outputCalendar, weekSettings = _b.weekSettings;
        return Locale.create(locale, numberingSystem, outputCalendar, weekSettings);
    };
    Locale.fromOpts = function (opts) {
        return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.weekSettings, opts.defaultToEN);
    };
    Locale.resetCache = function () {
        locale_cache_1.LocaleCache.reset();
    };
    //
    Locale.prototype.clone = function (alts) {
        if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
            return this;
        }
        else {
            return Locale.create(alts.locale || this._specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, (0, util_1.validateWeekSettings)(alts.weekSettings) || this._weekSettings, alts.defaultToEN || false);
        }
    };
    Locale.prototype.dtFormatter = function (dt, intlOptions) {
        if (intlOptions === void 0) { intlOptions = {}; }
        return new PolyDateFormatter(dt, this._intl, intlOptions);
    };
    Locale.prototype.equals = function (other) {
        return (this.locale === other.locale &&
            this.numberingSystem === other.numberingSystem &&
            this.outputCalendar === other.outputCalendar);
    };
    Locale.prototype.eras = function (length) {
        var _this = this;
        return listStuff(this, length, English.eras, function (len) {
            var intl = { era: len };
            // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
            // to definitely enumerate them.
            if (!_this._eraCache[len]) {
                _this._eraCache[len] = [datetime_1.DateTime.utc(-40, 1, 1), datetime_1.DateTime.utc(2017, 1, 1)].map(function (dt) {
                    return _this.extract(dt, intl, "era");
                });
            }
            return _this._eraCache[len];
        });
    };
    Locale.prototype.extract = function (dt, intlOptions, field) {
        var df = this.dtFormatter(dt, intlOptions), results = df.formatToParts(), matching = results.find(function (m) { return m.type.toLowerCase() === field.toLowerCase(); });
        if (!matching) {
            throw new Error("Invalid extract field ".concat(field));
        }
        return matching.value;
    };
    Locale.prototype.getMinDaysInFirstWeek = function () {
        return this.getWeekSettings().minimalDays;
    };
    Locale.prototype.getStartOfWeek = function () {
        return this.getWeekSettings().firstDay;
    };
    Locale.prototype.getWeekSettings = function () {
        if (this._weekSettings) {
            return this._weekSettings;
        }
        else if (!(0, util_1.hasLocaleWeekInfo)()) {
            return util_1.FALLBACK_WEEK_SETTINGS;
        }
        else {
            return this._getCachedWeekInfo(this.locale);
        }
    };
    Locale.prototype.getWeekendDays = function () {
        return this.getWeekSettings().weekend;
    };
    Locale.prototype.isEnglish = function () {
        return (
        // tslint:disable-next-line:no-bitwise
        !!~["en", "en-us"].indexOf(this.locale.toLowerCase()) ||
            locale_cache_1.LocaleCache.getCachedIntResolvedOptions(this._intl).locale.startsWith("en-us"));
    };
    Locale.prototype.listFormatter = function (opts) {
        if (opts === void 0) { opts = {}; }
        return locale_cache_1.LocaleCache.getCachedLF(this._intl, opts);
    };
    // In Luxon boolean param "defaultOK" was still there, although unused
    Locale.prototype.listingMode = function () {
        var isActuallyEn = this.isEnglish();
        var hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") &&
            (this.outputCalendar === null || this.outputCalendar === "gregory");
        return isActuallyEn && hasNoWeirdness ? "en" : "intl";
    };
    Locale.prototype.meridiems = function () {
        var _this = this;
        return listStuff(this, "long", // arbitrary unused value
        function () { return English.meridiems; }, function () {
            // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
            // for AM and PM. This is probably wrong, but it makes parsing way easier.
            if (_this._meridiemCache === undefined) {
                _this._meridiemCache = [
                    datetime_1.DateTime.utc(2016, 11, 13, 9),
                    datetime_1.DateTime.utc(2016, 11, 13, 19)
                ].map(function (dt) { return _this.extract(dt, { hour: "numeric", hourCycle: "h12" }, "dayPeriod"); });
            }
            return _this._meridiemCache;
        });
    };
    Locale.prototype.months = function (length, format) {
        var _this = this;
        if (format === void 0) { format = false; }
        return listStuff(this, length, English.months, function (len) {
            var intl = format ? { month: len, day: "numeric" } : { month: len };
            var formatStr = format ? "format" : "standalone";
            if (!_this._monthsCache[formatStr][len]) {
                _this._monthsCache[formatStr][len] = mapMonths(function (dt) { return _this.extract(dt, intl, "month"); });
            }
            return _this._monthsCache[formatStr][len];
        });
    };
    Locale.prototype.numberFormatter = function (options) {
        if (options === void 0) { options = {}; }
        return new PolyNumberFormatter(this._intl, this.fastNumbers, options);
    };
    Locale.prototype.redefaultToEN = function (alts) {
        if (alts === void 0) { alts = {}; }
        return this.clone(tslib_1.__assign(tslib_1.__assign({}, alts), { defaultToEN: true }));
    };
    Locale.prototype.redefaultToSystem = function (alts) {
        if (alts === void 0) { alts = {}; }
        return this.clone(tslib_1.__assign(tslib_1.__assign({}, alts), { defaultToEN: false }));
    };
    Locale.prototype.relFormatter = function (options) {
        if (options === void 0) { options = {}; }
        return new PolyRelFormatter(this._intl, this.isEnglish(), options);
    };
    Locale.prototype.toString = function () {
        return "Locale(".concat(this.locale, ", ").concat(this.numberingSystem, ", ").concat(this.outputCalendar, ")");
    };
    Locale.prototype.weekdays = function (length, format) {
        var _this = this;
        if (format === void 0) { format = false; }
        return listStuff(this, length, English.weekdays, function (len) {
            var intl = format
                ? { weekday: len, year: "numeric", month: "long", day: "numeric" }
                : { weekday: len };
            var formatStr = format ? "format" : "standalone";
            if (!_this._weekdaysCache[formatStr][len]) {
                _this._weekdaysCache[formatStr][len] = mapWeekdays(function (dt) { return _this.extract(dt, intl, "weekday"); });
            }
            return _this._weekdaysCache[formatStr][len];
        });
    };
    //
    Locale.prototype._getCachedWeekInfo = function (locString) {
        var data = Locale._weekInfoCache[locString];
        if (!data) {
            var locale = new intl_next_1.default.Locale(locString);
            // browsers currently implement this as a property, but spec says it should be a getter function
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            data = "getWeekInfo" in locale ? locale.getWeekInfo() : locale.weekInfo;
            Locale._weekInfoCache[locString] = data;
        }
        return data;
    };
    Locale.prototype._supportsFastNumbers = function () {
        if (this.numberingSystem && this.numberingSystem !== "latn") {
            return false;
        }
        else {
            return (this.numberingSystem === "latn" ||
                !this.locale ||
                this.locale.startsWith("en") ||
                intl_next_1.default.DateTimeFormat(this._intl).resolvedOptions().numberingSystem === "latn");
        }
    };
    Locale._weekInfoCache = {};
    return Locale;
}());
exports.Locale = Locale;


/***/ }),

/***/ "./src/impl/regexParser.ts":
/*!*********************************!*\
  !*** ./src/impl/regexParser.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IANA_REGEX = void 0;
exports.parseHTTPDate = parseHTTPDate;
exports.parseISODate = parseISODate;
exports.parseISODuration = parseISODuration;
exports.parseISOTimeOnly = parseISOTimeOnly;
exports.parseRFC2822Date = parseRFC2822Date;
exports.parseSQL = parseSQL;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var util_1 = __webpack_require__(/*! ./util */ "./src/impl/util.ts");
var English = tslib_1.__importStar(__webpack_require__(/*! ./english */ "./src/impl/english.ts"));
var fixedOffsetZone_1 = __webpack_require__(/*! ../zones/fixedOffsetZone */ "./src/zones/fixedOffsetZone.ts");
var IANAZone_1 = __webpack_require__(/*! ../zones/IANAZone */ "./src/zones/IANAZone.ts");
function combineRegexes() {
    var regexes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        regexes[_i] = arguments[_i];
    }
    var full = regexes.reduce(function (f, r) { return f + r.source; }, "");
    return RegExp("^".concat(full, "$"));
}
function combineExtractors() {
    var extractors = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        extractors[_i] = arguments[_i];
    }
    return function (m) {
        return extractors
            .reduce(function (_a, ex) {
            var mergedVals = _a[0], mergedZone = _a[1], cursor = _a[2];
            var _b = ex(m, cursor), val = _b[0], zone = _b[1], next = _b[2];
            return [tslib_1.__assign(tslib_1.__assign({}, mergedVals), val), zone || mergedZone, next];
        }, [{}, null, 1])
            .slice(0, 2);
    };
}
function parse(s) {
    var patterns = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        patterns[_i - 1] = arguments[_i];
    }
    if (s === undefined || s === null) {
        return [null, null];
    }
    for (var _a = 0, patterns_1 = patterns; _a < patterns_1.length; _a++) {
        var _b = patterns_1[_a], regex = _b[0], extractor = _b[1];
        var m = regex.exec(s);
        if (!!m) {
            return extractor(m);
        }
    }
    return [null, null];
}
function simpleParse() {
    var keys = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        keys[_i] = arguments[_i];
    }
    return function (match, cursor) {
        var ret = {};
        var i;
        for (i = 0; i < keys.length; i++) {
            ret[keys[i]] = (0, util_1.parseInteger)(match[cursor + i]);
        }
        return [ret, null, cursor + i];
    };
}
// ISO and SQL parsing
exports.IANA_REGEX = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
var offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
var isoExtendedZone = "(?:".concat(offsetRegex.source, "?(?:\\[(").concat(exports.IANA_REGEX.source, ")\\])?)?");
var isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
var isoTimeRegex = RegExp("".concat(isoTimeBaseRegex.source).concat(isoExtendedZone));
var isoTimeExtensionRegex = RegExp("(?:T".concat(isoTimeRegex.source, ")?"));
var isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
var isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
var isoOrdinalRegex = /(\d{4})-?(\d{3})/;
var extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekday");
var extractISOOrdinalData = simpleParse("year", "ordinal");
var sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/; // dumbed-down version of the ISO one
var sqlTimeRegex = RegExp("".concat(isoTimeBaseRegex.source, " ?(?:").concat(offsetRegex.source, "|(").concat(exports.IANA_REGEX.source, "))?"));
var sqlTimeExtensionRegex = RegExp("(?: ".concat(sqlTimeRegex.source, ")?"));
function int(match, pos, fallback) {
    return (0, util_1.isUndefined)(match[pos]) ? fallback : (0, util_1.parseInteger)(match[pos]);
}
function extractISOYmd(match, cursor) {
    var item = {
        year: int(match, cursor, 0), // 0 default value never used?
        month: int(match, cursor + 1, 1),
        day: int(match, cursor + 2, 1)
    };
    return [item, null, cursor + 3];
}
function extractISOTime(match, cursor) {
    var item = {
        hour: int(match, cursor, 0),
        minute: int(match, cursor + 1, 0),
        second: int(match, cursor + 2, 0),
        millisecond: (0, util_1.parseMillis)(match[cursor + 3])
    };
    return [item, null, cursor + 4];
}
function extractISOOffset(match, cursor) {
    var local = !match[cursor] && !match[cursor + 1], fullOffset = (0, util_1.signedOffset)(match[cursor + 1], match[cursor + 2]), zone = local ? null : fixedOffsetZone_1.FixedOffsetZone.instance(fullOffset);
    return [{}, zone, cursor + 3];
}
function extractIANAZone(match, cursor) {
    var zone = match[cursor] ? IANAZone_1.IANAZone.create(match[cursor]) : null;
    return [{}, zone, cursor + 1];
}
// ISO time parsing
var isoTimeOnly = RegExp("^T?".concat(isoTimeBaseRegex.source, "$"));
// ISO duration parsing
var isoDuration = /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;
function extractISODuration(match) {
    var s = match[0], yearStr = match[1], monthStr = match[2], weekStr = match[3], dayStr = match[4], hourStr = match[5], minuteStr = match[6], secondStr = match[7], millisecondsStr = match[8];
    var hasNegativePrefix = s.startsWith("-");
    var negativeSeconds = !!secondStr && secondStr.startsWith("-");
    var maybeNegate = function (num, force) {
        if (force === void 0) { force = !1; }
        return typeof num === typeof 0 && (force || (num && hasNegativePrefix)) ? -num : num;
    };
    return [{
            years: maybeNegate((0, util_1.parseFloating)(yearStr)),
            months: maybeNegate((0, util_1.parseFloating)(monthStr)),
            weeks: maybeNegate((0, util_1.parseFloating)(weekStr)),
            days: maybeNegate((0, util_1.parseFloating)(dayStr)),
            hours: maybeNegate((0, util_1.parseFloating)(hourStr)),
            minutes: maybeNegate((0, util_1.parseFloating)(minuteStr)),
            seconds: maybeNegate((0, util_1.parseFloating)(secondStr), secondStr === "-0"),
            milliseconds: maybeNegate((0, util_1.parseMillis)(millisecondsStr), negativeSeconds)
        }];
}
// These are a little brain dead. EDT *should* tell us that we're in, say, America/New_York
// and not just that we're in -240 *right now*. But since I don't think these are used that often
// I'm just going to ignore that
var obsOffsets = {
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60
};
function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    var weekday;
    if (weekdayStr) {
        weekday = weekdayStr.length > 3
            ? English.weekdaysLong.indexOf(weekdayStr) + 1
            : English.weekdaysShort.indexOf(weekdayStr) + 1;
    }
    var year = yearStr.length === 2 ? (0, util_1.untruncateYear)((0, util_1.parseInteger)(yearStr)) : (0, util_1.parseInteger)(yearStr);
    return {
        year: year,
        month: English.monthsShort.indexOf(monthStr) + 1,
        day: (0, util_1.parseInteger)(dayStr),
        hour: (0, util_1.parseInteger)(hourStr),
        minute: (0, util_1.parseInteger)(minuteStr),
        second: (0, util_1.parseInteger)(secondStr),
        weekday: weekday
    };
}
// RFC 2822/5322
var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
function extractRFC2822(match) {
    var weekdayStr = match[1], dayStr = match[2], monthStr = match[3], yearStr = match[4], hourStr = match[5], minuteStr = match[6], secondStr = match[7], obsOffset = match[8], milOffset = match[9], offHourStr = match[10], offMinuteStr = match[11], result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    var offset;
    if (obsOffset) {
        offset = obsOffsets[obsOffset];
    }
    else if (milOffset) {
        offset = 0;
    }
    else {
        offset = (0, util_1.signedOffset)(offHourStr, offMinuteStr);
    }
    return [result, new fixedOffsetZone_1.FixedOffsetZone(offset)];
}
function preprocessRFC2822(s) {
    // Remove comments and folding whitespace and replace multiple-spaces with a single space
    return s
        .replace(/\([^()]*\)|[\n\t]/g, " ")
        .replace(/(\s\s+)/g, " ")
        .trim();
}
// http date
var rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/, rfc850 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/, ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
function extractRFC1123Or850(match) {
    var weekdayStr = match[1], dayStr = match[2], monthStr = match[3], yearStr = match[4], hourStr = match[5], minuteStr = match[6], secondStr = match[7], result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [result, fixedOffsetZone_1.FixedOffsetZone.utcInstance];
}
function extractASCII(match) {
    var weekdayStr = match[1], monthStr = match[2], dayStr = match[3], hourStr = match[4], minuteStr = match[5], secondStr = match[6], yearStr = match[7], result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [result, fixedOffsetZone_1.FixedOffsetZone.utcInstance];
}
var isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
var isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
var isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
var isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
var extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOOrdinalDateAndTime = combineExtractors(extractISOOrdinalData, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
/**
 * end @private
 */
function parseHTTPDate(s) {
    return parse(s, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);
}
function parseISODate(s) {
    return parse(s, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);
}
function parseISODuration(s) {
    return parse(s, [isoDuration, extractISODuration]);
}
function parseISOTimeOnly(s) {
    return parse(s, [isoTimeOnly, combineExtractors(extractISOTime)]);
}
function parseRFC2822Date(s) {
    return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
}
var sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
var sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
var extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
function parseSQL(s) {
    return parse(s, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);
}


/***/ }),

/***/ "./src/impl/tokenParser.ts":
/*!*********************************!*\
  !*** ./src/impl/tokenParser.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenParser = void 0;
exports.expandMacroTokens = expandMacroTokens;
exports.explainFromTokens = explainFromTokens;
exports.sanitizeSpaces = sanitizeSpaces;
exports.parseFromTokens = parseFromTokens;
exports.formatOptsToTokens = formatOptsToTokens;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var util_1 = __webpack_require__(/*! ./util */ "./src/impl/util.ts");
var formatter_1 = __webpack_require__(/*! ./formatter */ "./src/impl/formatter.ts");
var fixedOffsetZone_1 = __webpack_require__(/*! ../zones/fixedOffsetZone */ "./src/zones/fixedOffsetZone.ts");
var IANAZone_1 = __webpack_require__(/*! ../zones/IANAZone */ "./src/zones/IANAZone.ts");
var digits_1 = __webpack_require__(/*! ./digits */ "./src/impl/digits.ts");
var datetime_1 = __webpack_require__(/*! ../datetime */ "./src/datetime.ts");
var errors_1 = __webpack_require__(/*! ../errors */ "./src/errors.ts");
var missingFtp = "missing Intl.DateTimeFormat.formatToParts support";
function intUnit(regex, post) {
    if (post === void 0) { post = function (i) { return i; }; }
    return { regex: regex, deser: function (_a) {
            var s = _a[0];
            return post((0, digits_1.parseDigits)(s));
        } };
}
var spaceOrNBSPPattern = "[ ".concat(String.fromCharCode(160), "]");
var spaceOrNBSPRegExp = new RegExp(spaceOrNBSPPattern, "g");
function fixListRegex(s) {
    // make dots optional and also make them literal
    // make space and non-breakable space characters interchangeable
    return s.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSPPattern);
}
function stripInsensitivities(s) {
    return s
        .replace(/\./g, "") // ignore dots that were made optional
        .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp
        .toLowerCase();
}
function oneOf(strings, startIndex) {
    return {
        regex: RegExp(strings.map(fixListRegex).join("|")),
        deser: function (_a) {
            var s = _a[0];
            return strings.findIndex(function (i) { return stripInsensitivities(s) === stripInsensitivities(i); }) + startIndex;
        }
    };
}
function offset(regex, groups) {
    return { regex: regex, deser: function (_a) {
            var h = _a[1], m = _a[2];
            return (0, util_1.signedOffset)(h, m);
        }, groups: groups };
}
function simple(regex) {
    return { regex: regex, deser: function (_a) {
            var s = _a[0];
            return s;
        } };
}
function escapeToken(value) {
    return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}
/**
 * @param token
 * @param {Locale} loc
 */
function unitForToken(token, loc) {
    var one = (0, digits_1.digitRegex)(loc), two = (0, digits_1.digitRegex)(loc, "{2}"), three = (0, digits_1.digitRegex)(loc, "{3}"), four = (0, digits_1.digitRegex)(loc, "{4}"), six = (0, digits_1.digitRegex)(loc, "{6}"), oneOrTwo = (0, digits_1.digitRegex)(loc, "{1,2}"), oneToThree = (0, digits_1.digitRegex)(loc, "{1,3}"), oneToSix = (0, digits_1.digitRegex)(loc, "{1,6}"), oneToNine = (0, digits_1.digitRegex)(loc, "{1,9}"), twoToFour = (0, digits_1.digitRegex)(loc, "{2,4}"), fourToSix = (0, digits_1.digitRegex)(loc, "{4,6}"), literal = function (t) { return ({
        regex: RegExp(escapeToken(t.val)),
        deser: function (_a) {
            var s = _a[0];
            return s;
        },
        literal: true
    }); }, unitate = function (t) {
        if (token.literal) {
            return literal(t);
        }
        switch (t.val) {
            // era
            case "G":
                return oneOf(loc.eras("short"), 0);
            case "GG":
                return oneOf(loc.eras("long"), 0);
            // years
            case "y":
                return intUnit(oneToSix);
            case "yy":
                return intUnit(twoToFour, util_1.untruncateYear);
            case "yyyy":
                return intUnit(four);
            case "yyyyy":
                return intUnit(fourToSix);
            case "yyyyyy":
                return intUnit(six);
            // months
            case "M":
                return intUnit(oneOrTwo);
            case "MM":
                return intUnit(two);
            case "MMM":
                return oneOf(loc.months("short", true), 1);
            case "MMMM":
                return oneOf(loc.months("long", true), 1);
            case "L":
                return intUnit(oneOrTwo);
            case "LL":
                return intUnit(two);
            case "LLL":
                return oneOf(loc.months("short", false), 1);
            case "LLLL":
                return oneOf(loc.months("long", false), 1);
            // dates
            case "d":
                return intUnit(oneOrTwo);
            case "dd":
                return intUnit(two);
            // ordinals
            case "o":
                return intUnit(oneToThree);
            case "ooo":
                return intUnit(three);
            // time
            case "HH":
                return intUnit(two);
            case "H":
                return intUnit(oneOrTwo);
            case "hh":
                return intUnit(two);
            case "h":
                return intUnit(oneOrTwo);
            case "mm":
                return intUnit(two);
            case "m":
                return intUnit(oneOrTwo);
            case "q":
                return intUnit(oneOrTwo);
            case "qq":
                return intUnit(two);
            case "s":
                return intUnit(oneOrTwo);
            case "ss":
                return intUnit(two);
            case "S":
                return intUnit(oneToThree);
            case "SSS":
                return intUnit(three);
            case "u":
                return simple(oneToNine);
            // meridiem
            case "a":
                return oneOf(loc.meridiems(), 0);
            // weekYear (k)
            case "kkkk":
                return intUnit(four);
            case "kk":
                return intUnit(twoToFour, util_1.untruncateYear);
            // weekNumber (W)
            case "W":
                return intUnit(oneOrTwo);
            case "WW":
                return intUnit(two);
            // weekdays
            case "E":
            case "c":
                return intUnit(one);
            case "EEE":
                return oneOf(loc.weekdays("short", false), 1);
            case "EEEE":
                return oneOf(loc.weekdays("long", false), 1);
            case "ccc":
                return oneOf(loc.weekdays("short", true), 1);
            case "cccc":
                return oneOf(loc.weekdays("long", true), 1);
            // offset/zone
            case "Z":
            case "ZZ":
                return offset(new RegExp("([+-]".concat(oneOrTwo.source, ")(?::(").concat(two.source, "))?")), 2);
            case "ZZZ":
                return offset(new RegExp("([+-]".concat(oneOrTwo.source, ")(").concat(two.source, ")?")), 2);
            // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
            // because we don't have any way to figure out what they are
            case "z":
                return simple(/[a-z_+-/]{1,256}?/i);
            default:
                return literal(t);
        }
    };
    var unit = unitate(token) || {
        invalidReason: missingFtp
    };
    return tslib_1.__assign(tslib_1.__assign({}, unit), { token: token });
}
var partTypeStyleToTokenVal = {
    year: {
        "2-digit": "yy",
        numeric: "yyyyy"
    },
    month: {
        numeric: "M",
        "2-digit": "MM",
        short: "MMM",
        long: "MMMM"
    },
    day: {
        numeric: "d",
        "2-digit": "dd"
    },
    weekday: {
        short: "EEE",
        long: "EEEE"
    },
    dayPeriod: "a",
    hour12: {
        numeric: "h",
        "2-digit": "hh"
    },
    hour24: {
        numeric: "H",
        "2-digit": "HH"
    },
    hour: {
        numeric: "h",
        "2-digit": "hh"
    },
    minute: {
        numeric: "m",
        "2-digit": "mm"
    },
    second: {
        numeric: "s",
        "2-digit": "ss"
    },
    timeZoneName: {
        long: "ZZZZZ",
        short: "ZZZ"
    }
};
function tokenForPart(part, formatOpts, resolvedOpts) {
    var type = part.type, value = part.value;
    if (type === "literal") {
        var isSpace = /^\s+$/.test(value);
        return {
            literal: !isSpace,
            val: isSpace ? " " : value
        };
    }
    var style = formatOpts[type];
    // The user might have explicitly specified hour12 or hourCycle
    // if so, respect their decision
    // if not, refer back to the resolvedOpts, which are based on the locale
    var actualType = type;
    if (type === "hour") {
        if (formatOpts.hour12 != null) {
            actualType = formatOpts.hour12 ? "hour12" : "hour24";
        }
        else if (formatOpts.hourCycle != null) {
            if (formatOpts.hourCycle === "h11" || formatOpts.hourCycle === "h12") {
                actualType = "hour12";
            }
            else {
                actualType = "hour24";
            }
        }
        else {
            // tokens only differentiate between 24 hours or not,
            // so we do not need to check hourCycle here, which is less supported anyway
            actualType = resolvedOpts.hour12 ? "hour12" : "hour24";
        }
    }
    // TODO: would like a more reliable typing here...
    var val = partTypeStyleToTokenVal[actualType];
    if (typeof val === "object") {
        val = val[style];
    }
    if (val) {
        return {
            literal: false,
            val: val
        };
    }
    return void 0;
}
function buildRegex(units) {
    var re = units.map(function (u) { return u.regex; }).reduce(function (f, r) { return "".concat(f, "(").concat(r.source, ")"); }, "");
    return ["^".concat(re, "$"), units];
}
function match(input, regex, handlers) {
    var matches = regex.exec(input);
    var all = {};
    if (matches !== null) {
        var matchIndex_1 = 1;
        handlers.forEach(function (h) {
            var groups = h.groups ? h.groups + 1 : 1;
            if (!h.literal) {
                all[h.token.val[0]] = h.deser(matches.slice(matchIndex_1, matchIndex_1 + groups));
            }
            matchIndex_1 += groups;
        });
    }
    return [matches, all];
}
function dateTimeFromMatches(matches) {
    var toField = function (token) {
        switch (token) {
            case "S":
                return "millisecond";
            case "s":
                return "second";
            case "m":
                return "minute";
            case "h":
            case "H":
                return "hour";
            case "d":
                return "day";
            case "o":
                return "ordinal";
            case "L":
            case "M":
                return "month";
            case "y":
                return "year";
            case "E":
            case "c":
                return "weekday";
            case "W":
                return "weekNumber";
            case "k":
                return "weekYear";
            case "q":
                return "quarter";
            default:
                return null;
        }
    };
    var zone = null;
    var specificOffset;
    if ((0, util_1.isDefined)(matches.z)) {
        zone = IANAZone_1.IANAZone.create(matches.z);
    }
    if ((0, util_1.isDefined)(matches.Z)) {
        if (!zone) {
            zone = new fixedOffsetZone_1.FixedOffsetZone(+matches.Z);
        }
        specificOffset = +matches.Z;
    }
    if ((0, util_1.isDefined)(matches.q)) {
        matches.M = (matches.q - 1) * 3 + 1;
    }
    if ((0, util_1.isDefined)(matches.h)) {
        if (+matches.h < 12 && matches.a === 1) {
            matches.h = matches.h + 12;
        }
        else if (matches.h === 12 && matches.a === 0) {
            matches.h = 0;
        }
    }
    if (matches.G === 0 && matches.y) {
        matches.y = -matches.y;
    }
    if ((0, util_1.isDefined)(matches.u)) {
        matches.S = (0, util_1.parseMillis)(matches.u) || 0;
    }
    var values = Object.keys(matches).reduce(function (r, k) {
        var f = toField(k);
        if (f) {
            r[f] = matches[k];
        }
        return r;
    }, {});
    return [values, zone, specificOffset];
}
var dummyDateTimeCache;
function getDummyDateTime(locale) {
    if (dummyDateTimeCache === void 0) {
        dummyDateTimeCache = datetime_1.DateTime.fromMillis(1555555555555, {
            locale: locale.locale
        });
    }
    return dummyDateTimeCache;
}
function maybeExpandMacroToken(token, locale) {
    if (token.literal) {
        return token;
    }
    var formatOpts = formatter_1.Formatter.macroTokenToFormatOpts(token.val);
    var tokens = formatOptsToTokens(formatOpts, locale);
    if (tokens == null || tokens.includes(undefined)) {
        return token;
    }
    return tokens;
}
function expandMacroTokens(tokens, locale) {
    var _a;
    return (_a = Array.prototype).concat.apply(_a, tokens.map(function (t) { return maybeExpandMacroToken(t, locale); }));
}
/**
 * @private
 */
var TokenParser = /** @class */ (function () {
    function TokenParser(locale, format) {
        this.locale = locale;
        this.format = format;
        this._mapTokens();
    }
    Object.defineProperty(TokenParser.prototype, "invalidReason", {
        get: function () {
            return this.disqualifyingUnit ? this.disqualifyingUnit.invalidReason : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TokenParser.prototype, "isValid", {
        get: function () {
            return !this.disqualifyingUnit;
        },
        enumerable: false,
        configurable: true
    });
    TokenParser.prototype.explainFromTokens = function (input) {
        if (!this.isValid) {
            return { input: input, tokens: this.tokens, invalidReason: this.invalidReason };
        }
        else {
            var _a = match(input, this.regex, this.handlers), rawMatches = _a[0], matches = _a[1], _b = matches
                ? dateTimeFromMatches(matches)
                : [null, null, undefined], result = _b[0], zone = _b[1], specificOffset = _b[2];
            if (matches.hasOwnProperty("a") && matches.hasOwnProperty("H")) {
                throw new errors_1.ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");
            }
            return {
                input: input,
                tokens: this.tokens,
                regex: this.regex,
                rawMatches: rawMatches,
                matches: matches,
                result: result,
                zone: zone,
                specificOffset: specificOffset
            };
        }
    };
    TokenParser.prototype._mapTokens = function () {
        var _this = this;
        this.tokens = expandMacroTokens(formatter_1.Formatter.parseFormat(this.format), this.locale);
        var units = this.tokens.map(function (t) { return unitForToken(t, _this.locale); });
        this.disqualifyingUnit = units.find(function (t) { return t.invalidReason; });
        this.units = units.filter(function (u) { return !u.invalidReason; });
        if (!this.disqualifyingUnit) {
            var _a = buildRegex(this.units), regexString = _a[0], handlers = _a[1];
            this.regex = RegExp(regexString, "i");
            this.handlers = handlers;
        }
    };
    return TokenParser;
}());
exports.TokenParser = TokenParser;
function explainFromTokens(locale, input, format) {
    var parser = new TokenParser(locale, format);
    return parser.explainFromTokens(input);
}
function sanitizeSpaces(input) {
    return input.replace(/\u202F/g, " ");
}
function parseFromTokens(locale, input, format) {
    var _a = explainFromTokens(locale, sanitizeSpaces(input), sanitizeSpaces(format)), result = _a.result, zone = _a.zone, specificOffset = _a.specificOffset, invalidReason = _a.invalidReason;
    return [result, zone, specificOffset, invalidReason];
}
function formatOptsToTokens(formatOpts, locale) {
    if (!formatOpts) {
        return null;
    }
    var formatter = formatter_1.Formatter.create(locale, formatOpts);
    var df = formatter.dtFormatter(getDummyDateTime(locale));
    var parts = df.formatToParts();
    var resolvedOpts = df.resolvedOptions();
    return parts.map(function (p) { return tokenForPart(p, formatOpts, resolvedOpts); });
}


/***/ }),

/***/ "./src/impl/util.ts":
/*!**************************!*\
  !*** ./src/impl/util.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/*
 This is just a junk drawer, containing anything used across multiple classes.
 Because Luxon is small(ish), this should stay small, and we won't worry about splitting
 it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FALLBACK_WEEK_SETTINGS = exports.PLURAL_MAPPING = exports.HUMAN_ORDERED_UNITS = exports.REVERSE_ORDERED_UNITS = exports.ORDERED_UNITS = void 0;
exports.isDefined = isDefined;
exports.isUndefined = isUndefined;
exports.isNumber = isNumber;
exports.isInteger = isInteger;
exports.isString = isString;
exports.isDate = isDate;
exports.hasRelative = hasRelative;
exports.hasLocaleWeekInfo = hasLocaleWeekInfo;
exports.maybeArray = maybeArray;
exports.bestBy = bestBy;
exports.pick = pick;
exports.validateWeekSettings = validateWeekSettings;
exports.integerBetween = integerBetween;
exports.floorMod = floorMod;
exports.padStart = padStart;
exports.parseInteger = parseInteger;
exports.parseFloating = parseFloating;
exports.parseMillis = parseMillis;
exports.roundTo = roundTo;
exports.isLeapYear = isLeapYear;
exports.daysInYear = daysInYear;
exports.daysInMonth = daysInMonth;
exports.objToLocalTS = objToLocalTS;
exports.weeksInWeekYear = weeksInWeekYear;
exports.untruncateYear = untruncateYear;
exports.parseZoneInfo = parseZoneInfo;
exports.signedOffset = signedOffset;
exports.asNumber = asNumber;
exports.normalizeObject = normalizeObject;
exports.formatOffset = formatOffset;
exports.timeObject = timeObject;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var errors_1 = __webpack_require__(/*! ../errors */ "./src/errors.ts");
var settings_1 = __webpack_require__(/*! ../settings */ "./src/settings.ts");
var conversions_1 = __webpack_require__(/*! ./conversions */ "./src/impl/conversions.ts");
var intl_next_1 = tslib_1.__importDefault(__webpack_require__(/*! ../types/intl-next */ "./src/types/intl-next.ts"));
/**
 * @private
 */
// TYPES
function isDefined(o) {
    return typeof o !== "undefined";
}
function isUndefined(o) {
    return typeof o === "undefined";
}
function isNumber(o) {
    return typeof o === "number";
}
function isInteger(o) {
    return isNumber(o) && o % 1 === 0;
}
function isString(o) {
    return typeof o === "string";
}
function isDate(o) {
    return Object.prototype.toString.call(o) === "[object Date]";
}
// CAPABILITIES
function hasRelative() {
    try {
        return typeof intl_next_1.default !== "undefined" && !!intl_next_1.default.RelativeTimeFormat;
    }
    catch (e) {
        return false;
    }
}
function hasLocaleWeekInfo() {
    try {
        return (typeof intl_next_1.default !== "undefined" &&
            !!intl_next_1.default.Locale &&
            ("weekInfo" in intl_next_1.default.Locale.prototype || "getWeekInfo" in intl_next_1.default.Locale.prototype));
    }
    catch (e) {
        return false;
    }
}
// OBJECTS AND ARRAYS
function maybeArray(thing) {
    return Array.isArray(thing) ? thing : [thing];
}
function bestBy(arr, by, compare) {
    if (arr.length === 0) {
        return void 0;
    }
    var bestResult = arr.reduce(function (best, next) {
        var pair = [by(next), next];
        if (compare(best[0], pair[0]) === best[0]) {
            return best;
        }
        return pair;
    }, [by(arr[0]), arr[0]]);
    return bestResult[1];
}
function pick(obj, keys) {
    return keys.reduce(function (a, k) {
        a[k] = obj[k];
        return a;
    }, {});
}
function validateWeekSettings(settings) {
    if (!settings) {
        return void 0;
    }
    else if (typeof settings !== "object") {
        throw new errors_1.InvalidArgumentError("Week settings must be an object");
    }
    else {
        if (!integerBetween(settings.firstDay, 1, 7) ||
            !integerBetween(settings.minimalDays, 1, 7) ||
            !Array.isArray(settings.weekend) ||
            settings.weekend.some(function (v) { return !integerBetween(v, 1, 7); })) {
            throw new errors_1.InvalidArgumentError("Invalid week settings");
        }
        return {
            firstDay: settings.firstDay,
            minimalDays: settings.minimalDays,
            weekend: settings.weekend
        };
    }
}
// NUMBERS AND STRINGS
function integerBetween(thing, bottom, top) {
    return isInteger(thing) && thing >= bottom && thing <= top;
}
// x % n but takes the sign of n instead of x
function floorMod(x, n) {
    return x - n * Math.floor(x / n);
}
function padStart(input, n) {
    if (n === void 0) { n = 2; }
    var minus = +input < 0 ? "-" : "";
    var target = minus ? +input * -1 : input;
    var result;
    if (target.toString().length < n) {
        result = ("0".repeat(n) + target).slice(-n);
    }
    else {
        result = target.toString();
    }
    return "".concat(minus).concat(result);
}
function parseInteger(text) {
    if (!!text) {
        return parseInt(text, 10);
    }
    return void 0;
}
function parseFloating(text) {
    if (!!text) {
        return parseFloat(text);
    }
    return void 0;
}
function parseMillis(fraction) {
    // Return undefined (instead of 0) in these cases, where fraction is not set
    if (isUndefined(fraction) || fraction === null || fraction === "") {
        return undefined;
    }
    else {
        var f = parseFloat("0." + fraction) * 1000;
        return Math.floor(f);
    }
}
function roundTo(value, digits, towardZero) {
    if (towardZero === void 0) { towardZero = false; }
    var factor = Math.pow(10, digits), rounder = towardZero ? Math.trunc : Math.round;
    return rounder(value * factor) / factor;
}
// DATE BASICS
function isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}
function daysInMonth(year, month) {
    var modMonth = floorMod(month - 1, 12) + 1, modYear = year + (month - modMonth) / 12;
    return [31, isLeapYear(modYear) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
}
// convert a calendar object to a local timestamp (epoch, but with the offset baked in)
function objToLocalTS(obj) {
    var d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond);
    // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that
    if (obj.year < 100 && obj.year >= 0) {
        d = new Date(d);
        // set the month and day again, this is necessary because year 2000 is a leap year, but year 100 is not
        // so if obj.year is in 99, but obj.day makes it roll over into year 100,
        // the calculations done by Date.UTC are using year 2000 - which is incorrect
        d.setUTCFullYear(obj.year, obj.month - 1, obj.day);
    }
    return +d;
}
// adapted from moment.js: https://github.com/moment/moment/blob/000ac1800e620f770f4eb31b5ae908f6167b0ab2/src/lib/units/week-calendar-utils.js
function firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {
    var fwdlw = (0, conversions_1.isoWeekdayToLocal)((0, conversions_1.dayOfWeek)(year, 1, minDaysInFirstWeek), startOfWeek);
    return -fwdlw + minDaysInFirstWeek - 1;
}
function weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek) {
    if (minDaysInFirstWeek === void 0) { minDaysInFirstWeek = 4; }
    if (startOfWeek === void 0) { startOfWeek = 1; }
    var weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);
    var weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);
    return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;
}
function untruncateYear(year) {
    if (year > 99) {
        return year;
    }
    else {
        return year > settings_1.Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;
    }
}
// PARSING
function parseZoneInfo(ts, offsetFormat, locale, timeZone) {
    var date = new Date(ts);
    var intlOpts = {
        hourCycle: "h23",
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        timeZone: timeZone
    };
    var modified = tslib_1.__assign({ timeZoneName: offsetFormat }, intlOpts);
    var parsed = new intl_next_1.default.DateTimeFormat(locale, modified)
        .formatToParts(date)
        .find(function (m) { return m.type.toLowerCase() === "timezonename"; });
    return parsed ? parsed.value : null;
}
// signedOffset('-5', '30') -> -330
function signedOffset(offHourStr, offMinuteStr) {
    var offHour = parseInt(offHourStr, 10);
    // don't || this because we want to preserve -0
    if (Number.isNaN(offHour)) {
        offHour = 0;
    }
    var offMin = parseInt(offMinuteStr, 10) || 0, offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
    return offHour * 60 + offMinSigned;
}
// COERCION
function asNumber(value) {
    var numericValue = Number(value);
    if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue)) {
        throw new errors_1.InvalidArgumentError("Invalid unit value ".concat(value));
    }
    return numericValue;
}
function normalizeObject(obj, normalizer) {
    return Object.keys(obj).reduce(function (acc, u) {
        obj[u] !== void 0 && obj[u] !== null && (acc[normalizer(u)] = asNumber(obj[u]));
        return acc;
    }, {});
}
/**
 * Returns the offset's value as a string
 * @param {number} offset - Epoch milliseconds for which to get the offset
 * @param {string} format - What style of offset to return.
 *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
 * @return {string}
 */
function formatOffset(offset, format) {
    var hours = Math.trunc(Math.abs(offset / 60)), minutes = Math.trunc(Math.abs(offset % 60)), sign = offset >= 0 ? "+" : "-";
    switch (format) {
        case "short":
            return "".concat(sign).concat(padStart(hours, 2), ":").concat(padStart(minutes, 2));
        case "narrow":
            return "".concat(sign).concat(hours).concat(minutes > 0 ? ":".concat(minutes) : "");
        case "techie":
            return "".concat(sign).concat(padStart(hours, 2)).concat(padStart(minutes, 2));
        default:
            throw new RangeError("Value format ".concat(format, " is out of range for property format"));
    }
}
function timeObject(obj) {
    return pick(obj, ["hour", "minute", "second", "millisecond"]);
}
// units ordered by size
exports.ORDERED_UNITS = [
    "years",
    "quarters",
    "months",
    "weeks",
    "days",
    "hours",
    "minutes",
    "seconds",
    "milliseconds"
];
exports.REVERSE_ORDERED_UNITS = exports.ORDERED_UNITS.slice(0).reverse();
exports.HUMAN_ORDERED_UNITS = [
    "years",
    "months",
    "days",
    "hours",
    "minutes",
    "seconds",
    "milliseconds"
];
// All keys here are lowercase because it's searched that way in normalizeUnit
exports.PLURAL_MAPPING = {
    year: "year",
    years: "year",
    quarter: "quarter",
    quarters: "quarter",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    localweeknumber: "localWeekNumber",
    localweeknumbers: "localWeekNumber",
    localweekday: "localWeekday",
    localweekdays: "localWeekday",
    localweekyear: "localWeekYear",
    localweekyears: "localWeekYear",
    minute: "minute",
    minutes: "minute",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal"
};
exports.FALLBACK_WEEK_SETTINGS = {
    firstDay: 1,
    minimalDays: 4,
    weekend: [6, 7]
};


/***/ }),

/***/ "./src/impl/zoneUtil.ts":
/*!******************************!*\
  !*** ./src/impl/zoneUtil.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/**
 * @private
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.normalizeZone = void 0;
var zone_1 = __webpack_require__(/*! ../zone */ "./src/zone.ts");
var IANAZone_1 = __webpack_require__(/*! ../zones/IANAZone */ "./src/zones/IANAZone.ts");
var fixedOffsetZone_1 = __webpack_require__(/*! ../zones/fixedOffsetZone */ "./src/zones/fixedOffsetZone.ts");
var util_1 = __webpack_require__(/*! ./util */ "./src/impl/util.ts");
var invalidZone_1 = __webpack_require__(/*! ../zones/invalidZone */ "./src/zones/invalidZone.ts");
var systemZone_1 = __webpack_require__(/*! ../zones/systemZone */ "./src/zones/systemZone.ts");
var normalizeZone = function (input, defaultZone) {
    if ((0, util_1.isUndefined)(input) || input === null) {
        return defaultZone;
    }
    else if (input instanceof zone_1.Zone) {
        return input;
    }
    else if ((0, util_1.isString)(input)) {
        var lowered = input.toLowerCase();
        if (lowered === "default") {
            return defaultZone;
        }
        else if (lowered === "local" || lowered === "system") {
            return systemZone_1.SystemZone.instance;
        }
        else if (lowered === "utc" || lowered === "gmt") {
            return fixedOffsetZone_1.FixedOffsetZone.utcInstance;
        }
        else {
            return fixedOffsetZone_1.FixedOffsetZone.parseSpecifier(lowered) || IANAZone_1.IANAZone.create(input);
        }
    }
    else if ((0, util_1.isNumber)(input)) {
        return fixedOffsetZone_1.FixedOffsetZone.instance(input);
    }
    else if (typeof input === "object" && "offset" in input && typeof input["offset"] === "function") {
        // This is dumb, but the instanceof check above doesn't seem to really work, so we're duck checking it
        return input;
    }
    else {
        return new invalidZone_1.InvalidZone(input);
    }
};
exports.normalizeZone = normalizeZone;


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.REVERSE_ORDERED_UNITS = exports.ORDERED_UNITS = exports.VERSION = exports.Settings = exports.SystemZone = exports.InvalidZone = exports.IANAZone = exports.FixedOffsetZone = exports.Zone = exports.Info = exports.Interval = exports.Duration = exports.DateTime = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var datetime_1 = __webpack_require__(/*! ./datetime */ "./src/datetime.ts");
Object.defineProperty(exports, "DateTime", ({ enumerable: true, get: function () { return datetime_1.DateTime; } }));
var duration_1 = __webpack_require__(/*! ./duration */ "./src/duration.ts");
Object.defineProperty(exports, "Duration", ({ enumerable: true, get: function () { return duration_1.Duration; } }));
var interval_1 = __webpack_require__(/*! ./interval */ "./src/interval.ts");
Object.defineProperty(exports, "Interval", ({ enumerable: true, get: function () { return interval_1.Interval; } }));
var info_1 = __webpack_require__(/*! ./info */ "./src/info.ts");
Object.defineProperty(exports, "Info", ({ enumerable: true, get: function () { return info_1.Info; } }));
var zone_1 = __webpack_require__(/*! ./zone */ "./src/zone.ts");
Object.defineProperty(exports, "Zone", ({ enumerable: true, get: function () { return zone_1.Zone; } }));
var fixedOffsetZone_1 = __webpack_require__(/*! ./zones/fixedOffsetZone */ "./src/zones/fixedOffsetZone.ts");
Object.defineProperty(exports, "FixedOffsetZone", ({ enumerable: true, get: function () { return fixedOffsetZone_1.FixedOffsetZone; } }));
var IANAZone_1 = __webpack_require__(/*! ./zones/IANAZone */ "./src/zones/IANAZone.ts");
Object.defineProperty(exports, "IANAZone", ({ enumerable: true, get: function () { return IANAZone_1.IANAZone; } }));
var invalidZone_1 = __webpack_require__(/*! ./zones/invalidZone */ "./src/zones/invalidZone.ts");
Object.defineProperty(exports, "InvalidZone", ({ enumerable: true, get: function () { return invalidZone_1.InvalidZone; } }));
var systemZone_1 = __webpack_require__(/*! ./zones/systemZone */ "./src/zones/systemZone.ts");
Object.defineProperty(exports, "SystemZone", ({ enumerable: true, get: function () { return systemZone_1.SystemZone; } }));
var settings_1 = __webpack_require__(/*! ./settings */ "./src/settings.ts");
Object.defineProperty(exports, "Settings", ({ enumerable: true, get: function () { return settings_1.Settings; } }));
var util_1 = __webpack_require__(/*! ./impl/util */ "./src/impl/util.ts");
Object.defineProperty(exports, "ORDERED_UNITS", ({ enumerable: true, get: function () { return util_1.ORDERED_UNITS; } }));
Object.defineProperty(exports, "REVERSE_ORDERED_UNITS", ({ enumerable: true, get: function () { return util_1.REVERSE_ORDERED_UNITS; } }));
tslib_1.__exportStar(__webpack_require__(/*! ./types/public */ "./src/types/public.ts"), exports);
var VERSION = "5.1.0"; // REPLACED WITH WEBPACK
exports.VERSION = VERSION;


/***/ }),

/***/ "./src/info.ts":
/*!*********************!*\
  !*** ./src/info.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Info = void 0;
var datetime_1 = __webpack_require__(/*! ./datetime */ "./src/datetime.ts");
var settings_1 = __webpack_require__(/*! ./settings */ "./src/settings.ts");
var locale_1 = __webpack_require__(/*! ./impl/locale */ "./src/impl/locale.ts");
var IANAZone_1 = __webpack_require__(/*! ./zones/IANAZone */ "./src/zones/IANAZone.ts");
var zoneUtil_1 = __webpack_require__(/*! ./impl/zoneUtil */ "./src/impl/zoneUtil.ts");
var util_1 = __webpack_require__(/*! ./impl/util */ "./src/impl/util.ts");
/**
 * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
 */
var Info = /** @class */ (function () {
    function Info() {
    }
    /**
     * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
     * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
     * @param {Object} options - options
     * @param {string} [options.locale] - the locale code
     * @example Info.eras() //=> [ 'BC', 'AD' ]
     * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
     * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
     * @return {string[]}
     */
    Info.eras = function (length, _a) {
        if (length === void 0) { length = "short"; }
        var _b = _a === void 0 ? {} : _a, locale = _b.locale;
        return locale_1.Locale.create(locale, undefined, "gregory").eras(length);
    };
    /**
     * Return the set of available features in this environment.
     * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
     * Keys:
     * * `relative`: whether this environment supports relative time formatting
     * @example Info.features() //=> { relative: false }
     */
    Info.features = function () {
        return { relative: (0, util_1.hasRelative)(), localeWeek: (0, util_1.hasLocaleWeekInfo)() };
    };
    /**
     * Get the minimum number of days necessary in a week before it is considered part of the next year according
     * to the given locale.
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.locObj=null] - an existing locale object to use
     */
    Info.getMinimumDaysInFirstWeek = function (_a) {
        var _b = _a === void 0 ? {} : _a, locale = _b.locale, locObj = _b.locObj;
        return (locObj || locale_1.Locale.create(locale)).getMinDaysInFirstWeek();
    };
    /**
     * Get the weekday on which the week starts according to the given locale.
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @returns {number} the start of the week, 1 for Monday through 7 for Sunday
     */
    Info.getStartOfWeek = function (_a) {
        var _b = _a === void 0 ? {} : _a, locale = _b.locale, locObj = _b.locObj;
        return (locObj || locale_1.Locale.create(locale)).getStartOfWeek();
    };
    /**
     * Get the weekdays, which are considered the weekend according to the given locale
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday
     */
    Info.getWeekendWeekdays = function (_a) {
        var _b = _a === void 0 ? {} : _a, locale = _b.locale, locObj = _b.locObj;
        // copy the array, because we cache it internally
        return (locObj || locale_1.Locale.create(locale)).getWeekendDays().slice();
    };
    /**
     * Return whether the specified zone contains a DST.
     * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
     * @return {boolean}
     */
    Info.hasDST = function (zone) {
        if (zone === void 0) { zone = settings_1.Settings.defaultZone; }
        var proto = datetime_1.DateTime.now().setZone(zone).set({ month: 12 });
        return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
    };
    /**
     * Return whether the specified zone is a valid IANA specifier.
     * @param {string} zone - Zone to check
     * @return {boolean}
     */
    Info.isValidIANAZone = function (zone) {
        return IANAZone_1.IANAZone.isValidZone(zone);
    };
    /**
     * Return an array of meridiems.
     * @param {Object} options - options
     * @param {string} [options.locale] - the locale code
     * @example Info.meridiems() //=> [ 'AM', 'PM' ]
     * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
     * @return {string[]}
     */
    Info.meridiems = function (_a) {
        var _b = _a === void 0 ? {} : _a, locale = _b.locale;
        return locale_1.Locale.create(locale).meridiems();
    };
    /**
     * Return an array of standalone month names.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @param {string} [opts.outputCalendar='gregory'] - the calendar
     * @example Info.months()[0] //=> 'January'
     * @example Info.months('short')[0] //=> 'Jan'
     * @example Info.months('numeric')[0] //=> '1'
     * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
     * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
     * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
     * @return {string[]}
     */
    Info.months = function (length, _a) {
        if (length === void 0) { length = "long"; }
        var _b = _a === void 0 ? {} : _a, _c = _b.locale, locale = _c === void 0 ? null : _c, _d = _b.locObj, locObj = _d === void 0 ? null : _d, _e = _b.numberingSystem, numberingSystem = _e === void 0 ? null : _e, _f = _b.outputCalendar, outputCalendar = _f === void 0 ? "gregory" : _f;
        return (locObj || locale_1.Locale.create(locale, numberingSystem, outputCalendar)).months(length);
    };
    /**
     * Return an array of format month names.
     * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
     * changes the string.
     * See {@link Info.months}
     * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
     * @param {Object} opts - options
     * @param {string} [opts.locObj] - an existing locale object to use
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem] - the numbering system
     * @param {string} [opts.outputCalendar='gregory'] - the calendar
     * @return {string[]}
     */
    Info.monthsFormat = function (length, _a) {
        if (length === void 0) { length = "long"; }
        var _b = _a === void 0 ? {} : _a, locale = _b.locale, locObj = _b.locObj, numberingSystem = _b.numberingSystem, _c = _b.outputCalendar, outputCalendar = _c === void 0 ? "gregory" : _c;
        return (locObj || locale_1.Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
    };
    /**
     * Converts the input into a {@link Zone} instance.
     *
     * * If `input` is already a Zone instance, it is returned unchanged.
     * * If `input` is a string containing a valid IANA time zone name, a Zone instance
     *   with that name is returned.
     * * If `input` is the string "system", the system's time zone is returned.
     * * If `input` is the string "default", the default time zone, as defined in
     *   Settings.defaultZone is returned.
     * * If `input` is a string that doesn't refer to a known time zone, a Zone
     *   instance with {@link Zone#isValid} == false is returned.
     * * If `input is a number, a Zone instance with the specified fixed offset
     *   in minutes is returned.
     * * If `input` is `null` or `undefined`, the default zone is returned.
     * @param {string|Zone|number} [input] - the value to be converted
     * @return {Zone}
     */
    Info.normalizeZone = function (input) {
        return (0, zoneUtil_1.normalizeZone)(input, settings_1.Settings.defaultZone);
    };
    /**
     * Return an array of standalone week names.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.locObj] - an existing locale object to use
     * @param {string} [opts.numberingSystem] - the numbering system
     * @example Info.weekdays()[0] //=> 'Monday'
     * @example Info.weekdays('short')[0] //=> 'Mon'
     * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
     * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
     * @return {string[]}
     */
    Info.weekdays = function (length, _a) {
        if (length === void 0) { length = "long"; }
        var _b = _a === void 0 ? {} : _a, locale = _b.locale, locObj = _b.locObj, numberingSystem = _b.numberingSystem;
        return (locObj || locale_1.Locale.create(locale, numberingSystem)).weekdays(length);
    };
    /**
     * Return an array of format week names.
     * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
     * changes the string.
     * See {@link Info#weekdays}
     * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
     * @param {Object} options - options
     * @param {string} [options.locale] - the locale code
     * @param {string} [options.numberingSystem] - the numbering system
     * @return {string[]}
     */
    Info.weekdaysFormat = function (length, _a) {
        if (length === void 0) { length = "long"; }
        var _b = _a === void 0 ? {} : _a, locale = _b.locale, locObj = _b.locObj, numberingSystem = _b.numberingSystem;
        return (locObj || locale_1.Locale.create(locale, numberingSystem)).weekdays(length, true);
    };
    return Info;
}());
exports.Info = Info;


/***/ }),

/***/ "./src/interval.ts":
/*!*************************!*\
  !*** ./src/interval.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Interval = void 0;
var datetime_1 = __webpack_require__(/*! ./datetime */ "./src/datetime.ts");
var duration_1 = __webpack_require__(/*! ./duration */ "./src/duration.ts");
var errors_1 = __webpack_require__(/*! ./errors */ "./src/errors.ts");
var invalid_1 = __webpack_require__(/*! ./types/invalid */ "./src/types/invalid.ts");
var settings_1 = __webpack_require__(/*! ./settings */ "./src/settings.ts");
var util_1 = __webpack_require__(/*! ./impl/util */ "./src/impl/util.ts");
var formatter_1 = __webpack_require__(/*! ./impl/formatter */ "./src/impl/formatter.ts");
var formats_1 = __webpack_require__(/*! ./impl/formats */ "./src/impl/formats.ts");
// eslint-disable-next-line @typescript-eslint/naming-convention
var INVALID = "Invalid Interval";
// checks if the start is equal to or before the end
function validateStartEnd(start, end) {
    if (!start || !start.isValid) {
        return Interval.invalid("missing or invalid start");
    }
    else if (!end || !end.isValid) {
        return Interval.invalid("missing or invalid end");
    }
    else if (end < start) {
        return Interval.invalid("end before start", "The end of an interval must be after its start, but you had start=".concat(start.toISO(), " and end=").concat(end.toISO()));
    }
}
function friendlyDateTime(dateTimeish) {
    if (datetime_1.DateTime.isDateTime(dateTimeish)) {
        return dateTimeish;
    }
    else if (dateTimeish && dateTimeish.valueOf && (0, util_1.isNumber)(dateTimeish.valueOf())) {
        return datetime_1.DateTime.fromJSDate(dateTimeish);
    }
    else if (dateTimeish && typeof dateTimeish === "object") {
        return datetime_1.DateTime.fromObject(dateTimeish);
    }
    else {
        throw new errors_1.InvalidArgumentError("Unknown datetime argument: ".concat(dateTimeish, ", of type ").concat(typeof dateTimeish));
    }
}
/**
 * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
 *
 * Here is a brief overview of the most commonly used methods and getters in Interval:
 *
 * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.
 * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.
 * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.
 * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.
 * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}
 * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.
 */
var Interval = /** @class */ (function () {
    /**
     * @private
     */
    function Interval(config) {
        /**
         * @access private
         */
        this._s = config.start;
        /**
         * @access private
         */
        this._e = config.end;
        /**
         * @access private
         */
        this._invalid = config.invalid || null;
        /**
         * @access private
         */
        this._isLuxonInterval = true;
    }
    Object.defineProperty(Interval.prototype, "end", {
        /**
         * Returns the end of the Interval
         */
        get: function () {
            return this.isValid ? this._e : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Interval.prototype, "invalidReason", {
        /**
         * Returns an error code if this Interval is invalid, or null if the Interval is valid
         */
        get: function () {
            return this._invalid ? this._invalid.reason : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Interval.prototype, "isValid", {
        /**
         * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
         */
        get: function () {
            return this.invalidReason === null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Interval.prototype, "lastDateTime", {
        /**
         * Returns the last DateTime included in the interval (since end is not part of the interval)
         * @type {DateTime}
         */
        get: function () {
            var _a;
            return this.isValid ? ((_a = this._e) === null || _a === void 0 ? void 0 : _a.minus(1)) || null : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Interval.prototype, "start", {
        /**
         * Returns the start of the Interval
         */
        get: function () {
            return this.isValid ? this._s : null;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Create an Interval from a start DateTime and a Duration to extend to.
     * @param {DateTime|Date|Object} start
     * @param {Duration|Object} duration - the length of the Interval, as a Duration object.
     */
    Interval.after = function (start, duration) {
        var dur = duration_1.Duration.fromDurationLike(duration), dt = friendlyDateTime(start);
        return new Interval({
            start: dt,
            end: dt ? dt.plus(dur) : void 0
        });
    };
    /**
     * Create an Interval from an end DateTime and a Duration to extend backwards to.
     * @param {DateTime|Date|Object} end
     * @param {Duration|Object} duration - the length of the Interval, as a Duration object.
     */
    Interval.before = function (end, duration) {
        var dur = duration_1.Duration.fromDurationLike(duration), dt = friendlyDateTime(end);
        return new Interval({
            start: dt ? dt.minus(dur) : void 0,
            end: dt
        });
    };
    /**
     * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
     * @param {DateTime|Date|Object} start
     * @param {DateTime|Date|Object} end
     */
    Interval.fromDateTimes = function (start, end) {
        var builtStart = friendlyDateTime(start), builtEnd = friendlyDateTime(end);
        var validateError = validateStartEnd(builtStart, builtEnd);
        return validateError || new Interval({
            start: builtStart,
            end: builtEnd
        });
    };
    /**
     * Create an Interval from an ISO 8601 string.
     * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
     * @param {string} text - the ISO string to parse
     * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     */
    Interval.fromISO = function (text, opts) {
        if (opts === void 0) { opts = {}; }
        var _a = (text || "").split("/", 2), s = _a[0], e = _a[1];
        if (s && e) {
            var start = void 0, startIsValid = void 0;
            try {
                start = datetime_1.DateTime.fromISO(s, opts);
                startIsValid = start.isValid;
            }
            catch (e) {
                startIsValid = false;
            }
            var end = void 0, endIsValid = void 0;
            try {
                end = datetime_1.DateTime.fromISO(e, opts);
                endIsValid = end.isValid;
            }
            catch (e) {
                endIsValid = false;
            }
            if (startIsValid && endIsValid) {
                return Interval.fromDateTimes(start, end);
            }
            if (startIsValid) {
                var dur = duration_1.Duration.fromISO(e, opts);
                if (dur.isValid) {
                    return Interval.after(start, dur);
                }
            }
            else if (endIsValid) {
                var dur = duration_1.Duration.fromISO(s, opts);
                if (dur.isValid) {
                    return Interval.before(end, dur);
                }
            }
        }
        return Interval.invalid("unparsable", "the input \"".concat(text, "\" can't be parsed as ISO 8601"));
    };
    /**
     * Create an invalid Interval.
     * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     */
    Interval.invalid = function (reason, explanation) {
        if (!reason) {
            throw new errors_1.InvalidArgumentError("need to specify a reason the Interval is invalid");
        }
        var invalid = reason instanceof invalid_1.Invalid ? reason : new invalid_1.Invalid(reason, explanation);
        if (settings_1.Settings.throwOnInvalid) {
            throw new errors_1.InvalidIntervalError(invalid);
        }
        else {
            return new Interval({ invalid: invalid });
        }
    };
    /**
     * Check if an object is an Interval. Works across context boundaries
     * @param {Object} o
     */
    Interval.isInterval = function (o) {
        return (!!o && o._isLuxonInterval) || false;
    };
    /**
     * Merge an array of Intervals into a equivalent minimal set of Intervals.
     * Combines overlapping and adjacent Intervals.
     * @param {Interval[]} intervals
     */
    Interval.merge = function (intervals) {
        var _a = intervals
            .sort(function (a, b) { return a._s.valueOf() - b._s.valueOf(); })
            .reduce(function (_a, item) {
            var sofar = _a[0], current = _a[1];
            if (!current) {
                return [sofar, item];
            }
            else if (current.overlaps(item) || current.abutsStart(item)) {
                return [sofar, current.union(item)];
            }
            else {
                return [sofar.concat([current]), item];
            }
        }, [[], null]), found = _a[0], final = _a[1];
        if (final) {
            found.push(final);
        }
        return found;
    };
    /**
     * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
     * @param {Interval[]} intervals
     * @return {Interval[]}
     */
    Interval.xor = function (intervals) {
        var _a;
        var start = null, currentCount = 0;
        var results = [], ends = intervals.map(function (i) { return [
            { time: i._s, type: "s" },
            { time: i._e, type: "e" }
        ]; }), flattened = (_a = Array.prototype).concat.apply(_a, ends), arr = flattened.sort(function (a, b) { return +a.time - +b.time; });
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var i = arr_1[_i];
            currentCount += i.type === "s" ? 1 : -1;
            if (currentCount === 1) {
                start = i.time;
            }
            else {
                if (start && start.valueOf() !== i.time.valueOf()) {
                    results.push(Interval.fromDateTimes(start, i.time));
                }
                start = null;
            }
        }
        return Interval.merge(results);
    };
    // PUBLIC INSTANCE
    /**
     * Returns a string representation of this Interval appropriate for the REPL.
     * @return {string}
     */
    Interval.prototype[Symbol.for("nodejs.util.inspect.custom")] = function () {
        if (this.isValid) {
            return "Interval { start: ".concat(this._s.toISO(), ", end: ").concat(this._e.toISO(), " }");
        }
        else {
            return "Interval { Invalid, reason: ".concat(this.invalidReason, " }");
        }
    };
    /**
     * Return whether this Interval's start is adjacent to the specified Interval's end.
     * @param {Interval} other
     * @return {boolean}
     */
    Interval.prototype.abutsEnd = function (other) {
        return +other._e === +this._s;
    };
    /**
     * Return whether this Interval's end is adjacent to the specified Interval's start.
     * @param {Interval} other
     * @return {boolean}
     */
    Interval.prototype.abutsStart = function (other) {
        return +this._e === +other._s;
    };
    /**
     * Return whether this Interval contains the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    Interval.prototype.contains = function (dateTime) {
        return this._s <= dateTime && this._e > dateTime;
    };
    /**
     * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
     * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
     * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
     * @param {string} [unit='milliseconds'] - the unit of time to count.
     * @param {Object} opts - options
     */
    Interval.prototype.count = function (unit, opts) {
        if (unit === void 0) { unit = "milliseconds"; }
        if (!this.isValid) {
            return NaN;
        }
        var start = this.start.startOf(unit, opts);
        var end;
        if (opts === null || opts === void 0 ? void 0 : opts.useLocaleWeeks) {
            end = this.end.reconfigure({ locale: start.locale });
        }
        else {
            end = this.end;
        }
        end = end.startOf(unit, opts);
        return Math.floor(end.diff(start, unit).get(unit)) + +(end.valueOf() !== this.end.valueOf());
    };
    /**
     * Returns Intervals representing the span(s) of time in this Interval that don't overlap with any of the specified Intervals.
     * @param {...Interval} intervals
     * @return {Interval[]}
     */
    Interval.prototype.difference = function () {
        var _this = this;
        var intervals = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            intervals[_i] = arguments[_i];
        }
        return Interval.xor([this].concat(intervals))
            .map(function (i) { return _this.intersection(i); })
            .filter(function (i) { return i && !i.isEmpty(); });
    };
    /**
     * Split this Interval into the specified number of smaller intervals.
     * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
     * @return {Interval[]}
     */
    Interval.prototype.divideEqually = function (numberOfParts) {
        if (!this.isValid) {
            return [];
        }
        return this.splitBy({ milliseconds: this.length() / numberOfParts }).slice(0, numberOfParts);
    };
    /**
     * Returns true if this Interval fully contains the specified Interval,
     * specifically if the intersection (of this Interval and the other Interval) is equal to the other Interval;
     * false otherwise.
     * @param {Interval} other
     * @return {boolean}
     */
    Interval.prototype.engulfs = function (other) {
        if (!this.isValid) {
            return false;
        }
        return this._s <= other._s && this._e >= other._e;
    };
    /**
     * Return whether this Interval has the same start and end as the specified Interval.
     * @param {Interval} other
     * @return {boolean}
     */
    Interval.prototype.equals = function (other) {
        if (!this.isValid || !other.isValid) {
            return false;
        }
        return this._s.equals(other._s) && this._e.equals(other._e);
    };
    /**
     * Returns whether this Interval's start and end are both in the same unit of time
     * @param {string} unit - the unit of time to check sameness on
     * @return {boolean}
     */
    Interval.prototype.hasSame = function (unit) {
        return this.isValid ? this.isEmpty() || this._e.minus(1).hasSame(this._s, unit) : false;
    };
    /**
     * Return an Interval representing the intersection of this Interval and the specified Interval.
     * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
     * Returns null if the intersection is empty, meaning, the intervals don't intersect.
     * @param {Interval} other
     * @return {Interval|null}
     */
    Interval.prototype.intersection = function (other) {
        if (!this.isValid) {
            return this;
        }
        var s = this._s > other._s ? this._s : other._s, e = this._e < other._e ? this._e : other._e;
        if (s >= e) {
            return null;
        }
        else {
            return Interval.fromDateTimes(s, e);
        }
    };
    /**
     * Return whether this Interval's start is after the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    Interval.prototype.isAfter = function (dateTime) {
        if (!this.isValid) {
            return false;
        }
        return this._s > dateTime;
    };
    /**
     * Return whether this Interval's end is before the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    Interval.prototype.isBefore = function (dateTime) {
        if (!this.isValid) {
            return false;
        }
        return this._e <= dateTime;
    };
    /**
     * Return whether this Interval has the same start and end DateTimes.
     * @return {boolean}
     */
    Interval.prototype.isEmpty = function () {
        return this._s.valueOf() === this._e.valueOf();
    };
    /**
     * Returns the length of the Interval in the specified unit.
     * @param {string} [unit='milliseconds'] - the unit (such as 'hours' or 'days') to return the length in.
     */
    Interval.prototype.length = function (unit) {
        if (unit === void 0) { unit = "milliseconds"; }
        return this.toDuration(unit).get(unit);
    };
    /**
     * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
     * @param {function} mapFn
     * @return {Interval}
     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
     */
    Interval.prototype.mapEndpoints = function (mapFn) {
        return Interval.fromDateTimes(mapFn(this._s), mapFn(this._e));
    };
    /**
     * Return whether this Interval overlaps with the specified Interval
     * @param {Interval} other
     * @return {boolean}
     */
    Interval.prototype.overlaps = function (other) {
        return this._e > other._s && this._s < other._e;
    };
    /**
     * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
     * @param {Object} values - the values to set
     * @param {DateTime} values.start - the starting DateTime
     * @param {DateTime} values.end - the ending DateTime
     * @return {Interval}
     */
    Interval.prototype.set = function (_a) {
        var _b = _a === void 0 ? {} : _a, start = _b.start, end = _b.end;
        if (!this.isValid) {
            return this;
        }
        return Interval.fromDateTimes(start || this._s, end || this._e);
    };
    /**
     * Split this Interval at each of the specified DateTimes
     * @param {...[DateTime]} dateTimes - the unit of time to count.
     * @return {Interval[]}
     */
    Interval.prototype.splitAt = function () {
        var _this = this;
        var dateTimes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            dateTimes[_i] = arguments[_i];
        }
        var sorted = dateTimes
            .map(friendlyDateTime)
            .filter(function (d) { return _this.contains(d); })
            .sort(function (a, b) { return a.toMillis() - b.toMillis(); });
        var results = [];
        var s = this._s, i = 0;
        while (s < this._e) {
            var added = sorted[i] || this._e;
            var next = +added > +this._e ? this._e : added;
            results.push(Interval.fromDateTimes(s, next));
            s = next;
            i += 1;
        }
        return results;
    };
    /**
     * Split this Interval into smaller Intervals, each of the specified length.
     * Left over time is grouped into a smaller interval
     * @param {Duration|Object} duration - The length of each resulting interval, as a Duration object.
     * @return {Interval[]}
     */
    Interval.prototype.splitBy = function (duration) {
        var dur = duration_1.Duration.fromDurationLike(duration);
        if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
            return [];
        }
        var s = this._s, idx = 1, next;
        var results = [];
        while (s < this._e) {
            // Start is not null here because it's valid
            var added = this.start.plus(dur.mapUnits(function (x) { return x * idx; }));
            next = +added > +this._e ? this._e : added;
            results.push(Interval.fromDateTimes(s, next));
            s = next;
            idx += 1;
        }
        return results;
    };
    /**
     * Return a Duration representing the time spanned by this interval.
     * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
     * @return {Duration}
     */
    Interval.prototype.toDuration = function (unit, opts) {
        if (unit === void 0) { unit = "milliseconds"; }
        if (opts === void 0) { opts = {}; }
        if (!this.isValid) {
            return duration_1.Duration.invalid(this._invalid.reason);
        }
        return this._e.diff(this._s, unit, opts);
    };
    /**
     * Returns a string representation of this Interval formatted according to the specified format
     * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
     * formatting tool.
     * @param {string} dateFormat - The format string. This string formats the start and end time.
     * See {@link DateTime#toFormat} for details.
     * @param {Object} opts - Options.
     * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
     * representations.
     * @return {string}
     */
    Interval.prototype.toFormat = function (dateFormat, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.separator, separator = _c === void 0 ? " - " : _c;
        if (!this.isValid) {
            return INVALID;
        }
        return "".concat(this._s.toFormat(dateFormat)).concat(separator).concat(this._e.toFormat(dateFormat));
    };
    /**
     * Returns an ISO 8601-compliant string representation of this Interval.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @param {Object} options - The same options as {@link DateTime#toISO}
     * @return {string}
     */
    Interval.prototype.toISO = function (options) {
        if (options === void 0) { options = {}; }
        if (!this.isValid) {
            return INVALID;
        }
        return "".concat(this._s.toISO(options), "/").concat(this._e.toISO(options));
    };
    /**
     * Returns an ISO 8601-compliant string representation of date of this Interval.
     * The time components are ignored.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @return {string}
     */
    Interval.prototype.toISODate = function () {
        if (!this.isValid) {
            return INVALID;
        }
        return "".concat(this._s.toISODate(), "/").concat(this._e.toISODate());
    };
    /**
     * Returns an ISO 8601-compliant string representation of time of this Interval.
     * The date components are ignored.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @param {Object} options - The same options as {@link DateTime#toISO}
     * @return {string}
     *
     */
    Interval.prototype.toISOTime = function (options) {
        if (options === void 0) { options = {}; }
        if (!this.isValid) {
            return INVALID;
        }
        return "".concat(this._s.toISOTime(options), "/").concat(this._e.toISOTime(options));
    };
    /**
     * Returns a localized string representing this Interval. Accepts the same options as the
     * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
     * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
     * is browser-specific, but in general it will return an appropriate representation of the
     * Interval in the assigned locale. Defaults to the system's locale if no locale has been
     * specified.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
     * Intl.DateTimeFormat constructor options.
     * @param {Object} opts - Options to override the configuration of the start DateTime.
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
     * @return {string}
     */
    Interval.prototype.toLocaleString = function (formatOpts, opts) {
        if (formatOpts === void 0) { formatOpts = formats_1.DATE_SHORT; }
        if (opts === void 0) { opts = {}; }
        return this.isValid
            // tslint:disable-next-line:no-non-null-assertion
            ? formatter_1.Formatter.create(this._s.loc.clone(opts), formatOpts).formatInterval(this)
            : INVALID;
    };
    /**
     * Returns a string representation of this Interval appropriate for debugging.
     * @return {string}
     */
    Interval.prototype.toString = function () {
        if (!this.isValid) {
            return INVALID;
        }
        return "[".concat(this._s.toISO(), " \u2013 ").concat(this._e.toISO(), ")");
    };
    /**
     * Return an Interval representing the union of this Interval and the specified Interval.
     * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
     * @param {Interval} other
     * @return {Interval}
     */
    Interval.prototype.union = function (other) {
        if (!this.isValid) {
            return this;
        }
        var s = this._s < other._s ? this._s : other._s, e = this._e > other._e ? this._e : other._e;
        return Interval.fromDateTimes(s, e);
    };
    return Interval;
}());
exports.Interval = Interval;


/***/ }),

/***/ "./src/settings.ts":
/*!*************************!*\
  !*** ./src/settings.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Settings = void 0;
var IANAZone_1 = __webpack_require__(/*! ./zones/IANAZone */ "./src/zones/IANAZone.ts");
var locale_1 = __webpack_require__(/*! ./impl/locale */ "./src/impl/locale.ts");
var zoneUtil_1 = __webpack_require__(/*! ./impl/zoneUtil */ "./src/impl/zoneUtil.ts");
var systemZone_1 = __webpack_require__(/*! ./zones/systemZone */ "./src/zones/systemZone.ts");
var util_1 = __webpack_require__(/*! ./impl/util */ "./src/impl/util.ts");
var datetime_1 = __webpack_require__(/*! ./datetime */ "./src/datetime.ts");
var digits_1 = __webpack_require__(/*! ./impl/digits */ "./src/impl/digits.ts");
var now = function () { return Date.now(); }, defaultZone = "system", defaultLocale, defaultNumberingSystem, defaultOutputCalendar, twoDigitCutoffYear = 60, throwOnInvalid = !1, defaultWeekSettings;
/**
 * Settings contains static getters and setters that control TsLuxon's overall behavior.
 * TsLuxon is a simple library with few options, but the ones it does have live here.
 */
var Settings = /** @class */ (function () {
    function Settings() {
    }
    Object.defineProperty(Settings, "defaultLocale", {
        /**
         * Get the default locale to create DateTimes with. Does not affect existing instances.
         */
        get: function () {
            return defaultLocale;
        },
        /**
         * Set the default locale to create DateTimes with. Does not affect existing instances.
         */
        set: function (locale) {
            defaultLocale = locale;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Settings, "defaultNumberingSystem", {
        /**
         * Get the default numbering system to create DateTimes with. Does not affect existing instances.
         */
        get: function () {
            return defaultNumberingSystem;
        },
        /**
         * Set the default numbering system to create DateTimes with. Does not affect existing instances.
         * @type {string}
         */
        set: function (numberingSystem) {
            defaultNumberingSystem = numberingSystem;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Settings, "defaultOutputCalendar", {
        /**
         * Get the default output calendar to create DateTimes with. Does not affect existing instances.
         */
        get: function () {
            return defaultOutputCalendar;
        },
        /**
         * Set the default output calendar to create DateTimes with. Does not affect existing instances.
         */
        set: function (outputCalendar) {
            defaultOutputCalendar = outputCalendar;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Settings, "defaultWeekSettings", {
        get: function () {
            return defaultWeekSettings;
        },
        /**
         * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and
         * how many days are required in the first week of a year.
         * Does not affect existing instances.
         */
        set: function (weekSettings) {
            defaultWeekSettings = (0, util_1.validateWeekSettings)(weekSettings);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Settings, "defaultZone", {
        /**
         * Get the default time zone object to create DateTimes in. Does not affect existing instances.
         */
        get: function () {
            return (0, zoneUtil_1.normalizeZone)(defaultZone, systemZone_1.SystemZone.instance);
        },
        /**
         * [TS] had to use type Zone here. I created another setter to use a ZoneLike instead
         * Let's face it. This is ugly. The original should have this approach as well.
         * Set the default time zone to create DateTimes in. Does not affect existing instances.
         * Use the value "system" to reset this value to the system's time zone.
         */
        set: function (zone) {
            defaultZone = zone;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Settings, "defaultZoneLike", {
        /**
         * [TS] can't use the real setter here because set and get must have the same type.
         * Let's face this. This is bullshit. But I get that you want to make life easier for users.
         * Set the default time zone to create DateTimes in. Does not affect existing instances.
         * Use the value "system" to reset this value to the system's time zone.
         */
        set: function (zone) {
            defaultZone = zone;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Settings, "now", {
        /**
         * Get the callback for returning the current timestamp.
         */
        // eslint-disable-next-line @typescript-eslint/naming-convention
        get: function () {
            return now;
        },
        /**
         * Set the callback for returning the current timestamp.
         * The function should return a number, which will be interpreted as an Epoch millisecond count
         * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
         * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
         */
        // eslint-disable-next-line @typescript-eslint/naming-convention
        set: function (n) {
            now = n;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Settings, "throwOnInvalid", {
        /**
         * Get whether TSLuxon will throw when it encounters invalid DateTimes, Durations, or Intervals
         */
        get: function () {
            return throwOnInvalid;
        },
        /**
         * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
         * @type {boolean}
         */
        set: function (t) {
            throwOnInvalid = t;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Settings, "twoDigitCutoffYear", {
        /**
         * Get the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
         * @type {number}
         */
        get: function () {
            return twoDigitCutoffYear;
        },
        /**
         * Set the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
         * @type {number}
         * @example Settings.twoDigitCutoffYear = 0 // all 'yy' are interpreted as 20th century
         * @example Settings.twoDigitCutoffYear = 99 // all 'yy' are interpreted as 21st century
         * @example Settings.twoDigitCutoffYear = 50 // '49' -> 2049; '50' -> 1950
         * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50
         * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50
         */
        set: function (cutoffYear) {
            twoDigitCutoffYear = cutoffYear % 100;
        },
        enumerable: false,
        configurable: true
    });
    // Methods
    /**
     * Reset TSLuxon's global caches. Should only be necessary in testing scenarios.
     */
    Settings.resetCaches = function () {
        locale_1.Locale.resetCache();
        IANAZone_1.IANAZone.resetCache();
        datetime_1.DateTime.resetCache();
        (0, digits_1.resetDigitRegexCache)();
    };
    return Settings;
}());
exports.Settings = Settings;


/***/ }),

/***/ "./src/types/common.ts":
/*!*****************************!*\
  !*** ./src/types/common.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/types/datetime.ts":
/*!*******************************!*\
  !*** ./src/types/datetime.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/types/duration.ts":
/*!*******************************!*\
  !*** ./src/types/duration.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/types/info.ts":
/*!***************************!*\
  !*** ./src/types/info.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/types/interval.ts":
/*!*******************************!*\
  !*** ./src/types/interval.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/types/intl-next.ts":
/*!********************************!*\
  !*** ./src/types/intl-next.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {


/* eslint-disable @typescript-eslint/member-ordering, @typescript-eslint/no-namespace, @typescript-eslint/naming-convention */
// We keep this file to integrate modifications which aren't in ts lib intl yey
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = Intl;


/***/ }),

/***/ "./src/types/invalid.ts":
/*!******************************!*\
  !*** ./src/types/invalid.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Invalid = void 0;
var Invalid = /** @class */ (function () {
    function Invalid(reason, explanation) {
        this.reason = reason;
        this.explanation = explanation;
        this._formattedExplanation = "";
        explanation && (this._formattedExplanation = ": ".concat(explanation));
    }
    Invalid.prototype.toMessage = function () {
        return "".concat(this.reason).concat(this._formattedExplanation);
    };
    return Invalid;
}());
exports.Invalid = Invalid;


/***/ }),

/***/ "./src/types/locale.ts":
/*!*****************************!*\
  !*** ./src/types/locale.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/types/public.ts":
/*!*****************************!*\
  !*** ./src/types/public.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Intl = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
tslib_1.__exportStar(__webpack_require__(/*! ./common */ "./src/types/common.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./datetime */ "./src/types/datetime.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./duration */ "./src/types/duration.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./info */ "./src/types/info.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./interval */ "./src/types/interval.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./locale */ "./src/types/locale.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./zone */ "./src/types/zone.ts"), exports);
var intl_next_1 = tslib_1.__importDefault(__webpack_require__(/*! ./intl-next */ "./src/types/intl-next.ts"));
exports.Intl = intl_next_1.default;


/***/ }),

/***/ "./src/types/zone.ts":
/*!***************************!*\
  !*** ./src/types/zone.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/zone.ts":
/*!*********************!*\
  !*** ./src/zone.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Zone = void 0;
var errors_1 = __webpack_require__(/*! ./errors */ "./src/errors.ts");
// Prefixing the parameter names with a _ confuses ESDoc
function silenceUnusedWarning() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    args.length;
}
/**
 * An abstract Zone class
 * @interface
 */
var Zone = /** @class */ (function () {
    function Zone() {
    }
    Object.defineProperty(Zone.prototype, "type", {
        /**
         * The type of zone
         * @abstract
         * @type {string}
         */
        get: function () {
            throw new errors_1.ZoneIsAbstractError();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Zone.prototype, "ianaName", {
        /**
         * The IANA name of this zone.
         * Defaults to `name` if not overwritten by a subclass.
         * @abstract
         * @type {string}
         */
        get: function () {
            return this.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Zone.prototype, "name", {
        /**
         * The name of this zone.
         * @abstract
         * @type {string}
         */
        get: function () {
            throw new errors_1.ZoneIsAbstractError();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Zone.prototype, "isUniversal", {
        /**
         * Returns whether the offset is known to be fixed for the whole year.
         * @abstract
         * @type {boolean}
         */
        get: function () {
            throw new errors_1.ZoneIsAbstractError();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the offset's common name (such as EST) at the specified timestamp
     * @abstract
     * @param {number} [ts] - Epoch milliseconds for which to get the name
     * @param {Object} [options] - Options to affect the format
     * @param {string} [options.format] - What style of offset to return. Accepts 'long' or 'short'.
     * @param {string} [options.locale] - What locale to return the offset name in.
     * @return {string | null}
     */
    Zone.prototype.offsetName = function (ts, options) {
        silenceUnusedWarning(ts, options);
        throw new errors_1.ZoneIsAbstractError();
    };
    /**
     * Returns the offset's value as a string
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to get the offset
     * @param {string} format - What style of offset to return.
     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
     * @return {string}
     */
    Zone.prototype.formatOffset = function (ts, format) {
        silenceUnusedWarning(ts, format);
        throw new errors_1.ZoneIsAbstractError();
    };
    /**
     * Return the offset in minutes for this zone at the specified timestamp.
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to compute the offset
     * @return {number}
     */
    Zone.prototype.offset = function (ts) {
        silenceUnusedWarning(ts);
        throw new errors_1.ZoneIsAbstractError();
    };
    /**
     * Return whether this Zone is equal to another zone
     * @abstract
     * @param {Zone} other - the zone to compare
     * @return {boolean}
     */
    Zone.prototype.equals = function (other) {
        silenceUnusedWarning(other);
        throw new errors_1.ZoneIsAbstractError();
    };
    Object.defineProperty(Zone.prototype, "isValid", {
        /**
         * Return whether this Zone is valid.
         * @abstract
         * @type {boolean}
         */
        get: function () {
            throw new errors_1.ZoneIsAbstractError();
        },
        enumerable: false,
        configurable: true
    });
    return Zone;
}());
exports.Zone = Zone;


/***/ }),

/***/ "./src/zones/IANAZone.ts":
/*!*******************************!*\
  !*** ./src/zones/IANAZone.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IANAZone = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var util_1 = __webpack_require__(/*! ../impl/util */ "./src/impl/util.ts");
var zone_1 = __webpack_require__(/*! ../zone */ "./src/zone.ts");
var errors_1 = __webpack_require__(/*! ../errors */ "./src/errors.ts");
var intl_next_1 = tslib_1.__importDefault(__webpack_require__(/*! ../types/intl-next */ "./src/types/intl-next.ts"));
var dtfCache = {};
function makeDTF(zone) {
    if (!dtfCache[zone]) {
        try {
            dtfCache[zone] = new intl_next_1.default.DateTimeFormat("en-US", {
                hour12: !1,
                timeZone: zone,
                year: "numeric",
                month: "2-digit",
                day: "2-digit",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit",
                era: "short"
            });
        }
        catch (_a) {
            throw new errors_1.InvalidZoneError(zone);
        }
    }
    return dtfCache[zone];
}
var typeToPos = {
    year: 0,
    month: 1,
    day: 2,
    era: 3,
    hour: 4,
    minute: 5,
    second: 6
};
function hackyOffset(dtf, date) {
    var formatted = dtf.format(date).replace(/\u200E/g, "");
    var parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted);
    var fMonth = parsed[1], fDay = parsed[2], fYear = parsed[3], fadOrBc = parsed[4], fHour = parsed[5], fMinute = parsed[6], fSecond = parsed[7];
    return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
}
function partsOffset(dtf, date) {
    var formatted = dtf.formatToParts(date);
    var filled = [];
    for (var i = 0; i < formatted.length; i++) {
        var _a = formatted[i], type = _a.type, value = _a.value;
        var pos = typeToPos[type];
        if (type === "era") {
            filled[pos] = value;
        }
        else if (!(0, util_1.isUndefined)(pos)) {
            filled[pos] = parseInt(value, 10);
        }
    }
    return filled;
}
var ianaZoneCache = {};
/**
 * A zone identified by an IANA identifier, like America/New_York
 * @implements {Zone}
 */
var IANAZone = /** @class */ (function (_super) {
    tslib_1.__extends(IANAZone, _super);
    function IANAZone(name) {
        var _this = _super.call(this) || this;
        /** @private **/
        _this._zoneName = name;
        /** @private **/
        _this._valid = IANAZone.isValidZone(name);
        return _this;
    }
    /**
     * @param {string} name - Zone name
     * @return {IANAZone}
     */
    IANAZone.create = function (name) {
        // Recreate invalid IanaZones
        if (!ianaZoneCache[name]) {
            ianaZoneCache[name] = new IANAZone(name);
        }
        return ianaZoneCache[name];
    };
    /**
     * Reset local caches. Should only be necessary in testing scenarios.
     * @return {void}
     */
    IANAZone.resetCache = function () {
        ianaZoneCache = {};
        dtfCache = {};
    };
    /**
     * Returns whether the provided string is a valid specifier.
     * This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
     * @param {string} s - The string to check validity on
     * @example IANAZone.isValidSpecifier("America/New_York") //=> true
     * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
     * @deprecated This method returns false for some valid IANA names. Use isValidZone instead.
     * @return {boolean}
     */
    IANAZone.isValidSpecifier = function (s) {
        return this.isValidZone(s);
    };
    /**
     * Returns whether the provided string identifies a real zone
     * @param {string} zone - The string to check
     * @example IANAZone.isValidZone("America/New_York") //=> true
     * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
     * @example IANAZone.isValidZone("Sport~~blorp") //=> false
     * @return {boolean}
     */
    IANAZone.isValidZone = function (zone) {
        if (!zone) {
            return false;
        }
        try {
            new intl_next_1.default.DateTimeFormat("en-US", { timeZone: zone }).format();
            return true;
        }
        catch (e) {
            return false;
        }
    };
    Object.defineProperty(IANAZone.prototype, "type", {
        /** @override **/
        get: function () {
            return "iana";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IANAZone.prototype, "name", {
        /** @override **/
        get: function () {
            return this._zoneName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IANAZone.prototype, "isUniversal", {
        /** @override **/
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    /** @override **/
    IANAZone.prototype.offsetName = function (ts, _a) {
        var _b = _a === void 0 ? {} : _a, format = _b.format, locale = _b.locale;
        return (0, util_1.parseZoneInfo)(ts, format, locale, this.name);
    };
    /** @override **/
    IANAZone.prototype.formatOffset = function (ts, format) {
        return (0, util_1.formatOffset)(this.offset(ts), format);
    };
    /** @override **/
    IANAZone.prototype.offset = function (ts) {
        var date = new Date(ts);
        if (isNaN(+date)) {
            return NaN;
        }
        var dtf = makeDTF(this.name);
        var yearAlt;
        var _a = typeof dtf.formatToParts === typeof isNaN
            ? partsOffset(dtf, date)
            : hackyOffset(dtf, date), year = _a[0], month = _a[1], day = _a[2], adOrBc = _a[3], hour = _a[4], minute = _a[5], second = _a[6];
        if (adOrBc === "BC") {
            yearAlt = -Math.abs(+year) + 1;
        }
        // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat
        var adjustedHour = hour === 24 ? 0 : hour;
        var asUTC = (0, util_1.objToLocalTS)({
            year: yearAlt || +year,
            month: +month,
            day: +day,
            hour: +adjustedHour,
            minute: +minute,
            second: +second,
            millisecond: 0
        });
        var asTS = +date;
        var over = asTS % 1000;
        asTS -= over >= 0 ? over : 1000 + over;
        return (asUTC - asTS) / (60 * 1000);
    };
    /** @override **/
    IANAZone.prototype.equals = function (other) {
        return other.type === "iana" && other.name === this.name;
    };
    Object.defineProperty(IANAZone.prototype, "isValid", {
        /** @override **/
        get: function () {
            return this._valid;
        },
        enumerable: false,
        configurable: true
    });
    return IANAZone;
}(zone_1.Zone));
exports.IANAZone = IANAZone;


/***/ }),

/***/ "./src/zones/fixedOffsetZone.ts":
/*!**************************************!*\
  !*** ./src/zones/fixedOffsetZone.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FixedOffsetZone = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var util_1 = __webpack_require__(/*! ../impl/util */ "./src/impl/util.ts");
var zone_1 = __webpack_require__(/*! ../zone */ "./src/zone.ts");
var singleton = null;
/**
 * A zone with a fixed offset (meaning no DST)
 * @implements {Zone}
 */
var FixedOffsetZone = /** @class */ (function (_super) {
    tslib_1.__extends(FixedOffsetZone, _super);
    function FixedOffsetZone(offset) {
        var _this = _super.call(this) || this;
        /** @private **/
        _this._fixed = offset;
        return _this;
    }
    Object.defineProperty(FixedOffsetZone, "utcInstance", {
        /**
         * Get a singleton instance of UTC
         * @return {FixedOffsetZone}
         */
        get: function () {
            if (singleton === null) {
                singleton = new FixedOffsetZone(0);
            }
            return singleton;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FixedOffsetZone.prototype, "ianaName", {
        /**
         * The IANA name of this zone, i.e. `Etc/UTC` or `Etc/GMT+/-nn`
         *
         * @override
         * @type {string}
         */
        get: function () {
            return this._fixed === 0
                ? "Etc/UTC"
                : "Etc/GMT".concat((0, util_1.formatOffset)(-this._fixed, "narrow"));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FixedOffsetZone.prototype, "isUniversal", {
        /**
         * Returns whether the offset is known to be fixed for the whole year:
         * Always returns true for all fixed offset zones.
         * @override
         * @type {boolean}
         */
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FixedOffsetZone.prototype, "isValid", {
        /**
         * Return whether this Zone is valid:
         * All fixed offset zones are valid.
         * @override
         * @type {boolean}
         */
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FixedOffsetZone.prototype, "name", {
        /**
         * The name of this zone.
         * All fixed zones' names always start with "UTC" (plus optional offset)
         * @override
         * @type {string}
         */
        get: function () {
            return this._fixed === 0 ? "UTC" : "UTC".concat((0, util_1.formatOffset)(this._fixed, "narrow"));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FixedOffsetZone.prototype, "type", {
        /**
         * The type of zone. `fixed` for all instances of `FixedOffsetZone`.
         * @override
         * @type {string}
         */
        get: function () {
            return "fixed";
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Get an instance with a specified offset
     * @param {number} offset - The offset in minutes
     * @return {FixedOffsetZone}
     */
    FixedOffsetZone.instance = function (offset) {
        return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
    };
    /**
     * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
     * @param {string} s - The offset string to parse
     * @example FixedOffsetZone.parseSpecifier("UTC+6")
     * @example FixedOffsetZone.parseSpecifier("UTC+06")
     * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
     * @return {FixedOffsetZone}
     */
    FixedOffsetZone.parseSpecifier = function (s) {
        if (s) {
            var r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
            if (r) {
                return new FixedOffsetZone((0, util_1.signedOffset)(r[1], r[2]));
            }
        }
        return null;
    };
    /**
     * Return whether this Zone is equal to another zone (i.e. also fixed and same offset)
     * @override
     * @param {Zone} otherZone - the zone to compare
     * @return {boolean}
     */
    FixedOffsetZone.prototype.equals = function (otherZone) {
        return otherZone.type === "fixed" && otherZone._fixed === this._fixed;
    };
    /**
     * Returns the offset's value as a string
     * @override
     * @param {number} ts - Epoch milliseconds for which to get the offset
     * @param {string} format - What style of offset to return.
     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
     * @return {string}
     */
    FixedOffsetZone.prototype.formatOffset = function (_ts_, format) {
        return (0, util_1.formatOffset)(this._fixed, format);
    };
    /**
     * Return the offset in minutes for this zone at the specified timestamp.
     *
     * For fixed offset zones, this is constant and does not depend on a timestamp.
     * @override
     * @return {number}
     */
    FixedOffsetZone.prototype.offset = function () {
        return this._fixed;
    };
    /**
     * Returns the offset's common name at the specified timestamp.
     *
     * For fixed offset zones this equals to the zone name.
     * @override
     */
    FixedOffsetZone.prototype.offsetName = function () {
        return this.name;
    };
    return FixedOffsetZone;
}(zone_1.Zone));
exports.FixedOffsetZone = FixedOffsetZone;


/***/ }),

/***/ "./src/zones/invalidZone.ts":
/*!**********************************!*\
  !*** ./src/zones/invalidZone.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InvalidZone = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var zone_1 = __webpack_require__(/*! ../zone */ "./src/zone.ts");
/**
 * A zone that failed to parse. You should never need to instantiate this.
 * @implements {Zone}
 */
var InvalidZone = /** @class */ (function (_super) {
    tslib_1.__extends(InvalidZone, _super);
    function InvalidZone(_zoneName) {
        var _this = _super.call(this) || this;
        _this._zoneName = _zoneName;
        Object.setPrototypeOf(_this, InvalidZone.prototype);
        return _this;
    }
    Object.defineProperty(InvalidZone.prototype, "type", {
        /** @override **/
        get: function () {
            return "invalid";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InvalidZone.prototype, "name", {
        /** @override **/
        get: function () {
            return this._zoneName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InvalidZone.prototype, "isUniversal", {
        /** @override **/
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    /** @override **/
    InvalidZone.prototype.offsetName = function () {
        return null;
    };
    /** @override **/
    InvalidZone.prototype.formatOffset = function () {
        return "";
    };
    /** @override **/
    InvalidZone.prototype.offset = function () {
        return NaN;
    };
    /** @override **/
    InvalidZone.prototype.equals = function () {
        return false;
    };
    Object.defineProperty(InvalidZone.prototype, "isValid", {
        /** @override **/
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    return InvalidZone;
}(zone_1.Zone));
exports.InvalidZone = InvalidZone;


/***/ }),

/***/ "./src/zones/systemZone.ts":
/*!*********************************!*\
  !*** ./src/zones/systemZone.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SystemZone = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
var util_1 = __webpack_require__(/*! ../impl/util */ "./src/impl/util.ts");
var zone_1 = __webpack_require__(/*! ../zone */ "./src/zone.ts");
var singleton = null;
/**
 * Represents the local zone for this JavaScript environment.
 * @implements {Zone}
 */
var SystemZone = /** @class */ (function (_super) {
    tslib_1.__extends(SystemZone, _super);
    function SystemZone() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SystemZone, "instance", {
        /**
         * Get a singleton instance of the local zone
         * @return {SystemZone}
         */
        get: function () {
            if (singleton === null) {
                singleton = new SystemZone();
            }
            return singleton;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SystemZone.prototype, "type", {
        /** @override **/
        get: function () {
            return "system";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SystemZone.prototype, "name", {
        /** @override **/
        get: function () {
            return new Intl.DateTimeFormat().resolvedOptions().timeZone;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SystemZone.prototype, "isUniversal", {
        /** @override **/
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    /** @override **/
    SystemZone.prototype.offsetName = function (ts, _a) {
        var format = _a.format, locale = _a.locale;
        return (0, util_1.parseZoneInfo)(ts, format, locale);
    };
    /** @override **/
    SystemZone.prototype.formatOffset = function (ts, format) {
        return (0, util_1.formatOffset)(this.offset(ts), format);
    };
    /** @override **/
    SystemZone.prototype.offset = function (ts) {
        return -new Date(ts).getTimezoneOffset();
    };
    /** @override **/
    SystemZone.prototype.equals = function (otherZone) {
        return otherZone.type === "system";
    };
    Object.defineProperty(SystemZone.prototype, "isValid", {
        /** @override **/
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    return SystemZone;
}(zone_1.Zone));
exports.SystemZone = SystemZone;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=ts-luxon.umd.js.map