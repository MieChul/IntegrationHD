import { Component, EventEmitter, Output, ViewEncapsulation, Input } from '@angular/core';
import { Color } from '../../models';
import { BASIC_COLORS, stringInputToObject } from '../../helpers';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/material/button";
export class NgxMatColorCollectionComponent {
    constructor() {
        this.colorChanged = new EventEmitter();
        this.colors1 = BASIC_COLORS.slice(0, 8);
        this.colors2 = BASIC_COLORS.slice(8, 16);
    }
    set color(c) {
        if (c) {
            this.selectedColor = c.toHexString();
        }
    }
    ngOnInit() {
    }
    select(hex) {
        this.selectedColor = hex;
        const { r, g, b, a } = stringInputToObject(hex);
        this.colorChanged.emit(new Color(r, g, b, a));
    }
}
/** @nocollapse */ NgxMatColorCollectionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: NgxMatColorCollectionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ NgxMatColorCollectionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: NgxMatColorCollectionComponent, selector: "ngx-mat-color-collection", inputs: { color: "color" }, outputs: { colorChanged: "colorChanged" }, host: { classAttribute: "ngx-mat-color-collection" }, ngImport: i0, template: "<div class=\"color-collection-row\">\r\n  <button *ngFor=\"let c of colors1\" mat-mini-fab [style.background-color]=\"c\" class=\"btn-color\"\r\n    (click)=\"select(c)\" [ngClass]=\"{'active': selectedColor === c}\" [disableRipple]=\"true\">\r\n  </button>\r\n</div>\r\n<div class=\"color-collection-row\">\r\n  <button *ngFor=\"let c of colors2\" mat-mini-fab [style.background-color]=\"c\" class=\"btn-color\"\r\n    (click)=\"select(c)\" [ngClass]=\"{'active': selectedColor === c}\" [disableRipple]=\"true\">\r\n  </button>\r\n</div>", styles: [".ngx-mat-color-collection .btn-color{height:20px;width:20px;margin-right:11px;box-shadow:none;opacity:.3;will-change:opacity;transition:opacity .3s linear}.ngx-mat-color-collection .btn-color.active{box-shadow:0 3px 5px -1px #0003,0 6px 10px #00000024,0 1px 18px #0000001f;opacity:1}.ngx-mat-color-collection .btn-color .mat-mdc-button-touch-target{display:none!important}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2.MatMiniFabButton, selector: "button[mat-mini-fab]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: NgxMatColorCollectionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-mat-color-collection', encapsulation: ViewEncapsulation.None, host: {
                        'class': 'ngx-mat-color-collection'
                    }, template: "<div class=\"color-collection-row\">\r\n  <button *ngFor=\"let c of colors1\" mat-mini-fab [style.background-color]=\"c\" class=\"btn-color\"\r\n    (click)=\"select(c)\" [ngClass]=\"{'active': selectedColor === c}\" [disableRipple]=\"true\">\r\n  </button>\r\n</div>\r\n<div class=\"color-collection-row\">\r\n  <button *ngFor=\"let c of colors2\" mat-mini-fab [style.background-color]=\"c\" class=\"btn-color\"\r\n    (click)=\"select(c)\" [ngClass]=\"{'active': selectedColor === c}\" [disableRipple]=\"true\">\r\n  </button>\r\n</div>", styles: [".ngx-mat-color-collection .btn-color{height:20px;width:20px;margin-right:11px;box-shadow:none;opacity:.3;will-change:opacity;transition:opacity .3s linear}.ngx-mat-color-collection .btn-color.active{box-shadow:0 3px 5px -1px #0003,0 6px 10px #00000024,0 1px 18px #0000001f;opacity:1}.ngx-mat-color-collection .btn-color .mat-mdc-button-touch-target{display:none!important}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { colorChanged: [{
                type: Output
            }], color: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItY29sbGVjdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb2xvci1waWNrZXIvc3JjL2xpYi9jb21wb25lbnRzL2NvbG9yLWNvbGxlY3Rpb24vY29sb3ItY29sbGVjdGlvbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb2xvci1waWNrZXIvc3JjL2xpYi9jb21wb25lbnRzL2NvbG9yLWNvbGxlY3Rpb24vY29sb3ItY29sbGVjdGlvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBVSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxFQUFFLFlBQVksRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQVdsRSxNQUFNLE9BQU8sOEJBQThCO0lBZ0J6QztRQWRVLGlCQUFZLEdBQXdCLElBQUksWUFBWSxFQUFTLENBQUM7UUFXeEUsWUFBTyxHQUFhLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdDLFlBQU8sR0FBYSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUU5QixDQUFDO0lBWmpCLElBQ0ksS0FBSyxDQUFDLENBQVE7UUFDaEIsSUFBSSxDQUFDLEVBQUU7WUFDTCxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0QztJQUNILENBQUM7SUFTRCxRQUFRO0lBQ1IsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFXO1FBQ2hCLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO1FBQ3pCLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7OzhJQXpCVSw4QkFBOEI7a0lBQTlCLDhCQUE4Qiw2TENiM0MsNGhCQVNNOzJGRElPLDhCQUE4QjtrQkFUMUMsU0FBUzsrQkFDRSwwQkFBMEIsaUJBR3JCLGlCQUFpQixDQUFDLElBQUksUUFDL0I7d0JBQ0osT0FBTyxFQUFFLDBCQUEwQjtxQkFDcEM7MEVBSVMsWUFBWTtzQkFBckIsTUFBTTtnQkFHSCxLQUFLO3NCQURSLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBPdXRwdXQsIFZpZXdFbmNhcHN1bGF0aW9uLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uL21vZGVscyc7XHJcbmltcG9ydCB7IEJBU0lDX0NPTE9SUywgc3RyaW5nSW5wdXRUb09iamVjdCB9IGZyb20gJy4uLy4uL2hlbHBlcnMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZ3gtbWF0LWNvbG9yLWNvbGxlY3Rpb24nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9jb2xvci1jb2xsZWN0aW9uLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9jb2xvci1jb2xsZWN0aW9uLmNvbXBvbmVudC5zY3NzJ10sXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICBob3N0OiB7XHJcbiAgICAnY2xhc3MnOiAnbmd4LW1hdC1jb2xvci1jb2xsZWN0aW9uJ1xyXG4gIH1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5neE1hdENvbG9yQ29sbGVjdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIEBPdXRwdXQoKSBjb2xvckNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxDb2xvcj4gPSBuZXcgRXZlbnRFbWl0dGVyPENvbG9yPigpO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHNldCBjb2xvcihjOiBDb2xvcikge1xyXG4gICAgaWYgKGMpIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZENvbG9yID0gYy50b0hleFN0cmluZygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2VsZWN0ZWRDb2xvcjogc3RyaW5nO1xyXG5cclxuICBjb2xvcnMxOiBzdHJpbmdbXSA9IEJBU0lDX0NPTE9SUy5zbGljZSgwLCA4KTtcclxuICBjb2xvcnMyOiBzdHJpbmdbXSA9IEJBU0lDX0NPTE9SUy5zbGljZSg4LCAxNik7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gIH1cclxuXHJcbiAgc2VsZWN0KGhleDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnNlbGVjdGVkQ29sb3IgPSBoZXg7XHJcbiAgICBjb25zdCB7IHIsIGcsIGIsIGEgfSA9IHN0cmluZ0lucHV0VG9PYmplY3QoaGV4KTtcclxuICAgIHRoaXMuY29sb3JDaGFuZ2VkLmVtaXQobmV3IENvbG9yKHIsIGcsIGIsIGEpKTtcclxuICB9XHJcblxyXG59XHJcbiIsIjxkaXYgY2xhc3M9XCJjb2xvci1jb2xsZWN0aW9uLXJvd1wiPlxyXG4gIDxidXR0b24gKm5nRm9yPVwibGV0IGMgb2YgY29sb3JzMVwiIG1hdC1taW5pLWZhYiBbc3R5bGUuYmFja2dyb3VuZC1jb2xvcl09XCJjXCIgY2xhc3M9XCJidG4tY29sb3JcIlxyXG4gICAgKGNsaWNrKT1cInNlbGVjdChjKVwiIFtuZ0NsYXNzXT1cInsnYWN0aXZlJzogc2VsZWN0ZWRDb2xvciA9PT0gY31cIiBbZGlzYWJsZVJpcHBsZV09XCJ0cnVlXCI+XHJcbiAgPC9idXR0b24+XHJcbjwvZGl2PlxyXG48ZGl2IGNsYXNzPVwiY29sb3ItY29sbGVjdGlvbi1yb3dcIj5cclxuICA8YnV0dG9uICpuZ0Zvcj1cImxldCBjIG9mIGNvbG9yczJcIiBtYXQtbWluaS1mYWIgW3N0eWxlLmJhY2tncm91bmQtY29sb3JdPVwiY1wiIGNsYXNzPVwiYnRuLWNvbG9yXCJcclxuICAgIChjbGljayk9XCJzZWxlY3QoYylcIiBbbmdDbGFzc109XCJ7J2FjdGl2ZSc6IHNlbGVjdGVkQ29sb3IgPT09IGN9XCIgW2Rpc2FibGVSaXBwbGVdPVwidHJ1ZVwiPlxyXG4gIDwvYnV0dG9uPlxyXG48L2Rpdj4iXX0=