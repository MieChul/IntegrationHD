import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class NgxMatBaseColorCanvas {
    constructor(zone, elementId) {
        this.zone = zone;
        this.colorChanged = new EventEmitter();
        this.x = 0;
        this.y = 0;
        this.drag = false;
        this._destroyed = new Subject();
        this.elementId = elementId;
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    ngAfterViewInit() {
        this.canvas = document.getElementById(this.elementId);
        this.ctx = this.canvas.getContext('2d');
        this.width = this.canvas.width;
        this.height = this.canvas.height;
        this.draw();
    }
    draw() {
        this.ctx.clearRect(0, 0, this.width, this.height);
        this.ctx.rect(0, 0, this.width, this.height);
        this.fillGradient();
        if (this.y != 0) {
            this.redrawIndicator(this.x, this.y);
        }
    }
    onMousedown(e) {
        this.drag = true;
        this.changeColor(e);
        this.zone.runOutsideAngular(() => {
            this.canvas.addEventListener('mousemove', this.onMousemove.bind(this));
        });
    }
    onMousemove(e) {
        if (this.drag) {
            this.zone.run(() => {
                this.changeColor(e);
            });
        }
    }
    onMouseup(e) {
        this.drag = false;
        this.canvas.removeEventListener('mousemove', this.onMousemove);
    }
    emitChange(color) {
        this.colorChanged.emit(color);
    }
}
/** @nocollapse */ NgxMatBaseColorCanvas.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: NgxMatBaseColorCanvas, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ NgxMatBaseColorCanvas.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.2", type: NgxMatBaseColorCanvas, inputs: { color: "color", theme: "theme" }, outputs: { colorChanged: "colorChanged" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: NgxMatBaseColorCanvas, decorators: [{
            type: Directive,
            args: [{}]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined }]; }, propDecorators: { colorChanged: [{
                type: Output
            }], color: [{
                type: Input
            }], theme: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jb2xvci1jYW52YXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb2xvci1waWNrZXIvc3JjL2xpYi9jb21wb25lbnRzL2NvbG9yLWNhbnZhcy9iYXNlLWNvbG9yLWNhbnZhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekcsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFNL0IsTUFBTSxPQUFnQixxQkFBcUI7SUFxQjFDLFlBQXNCLElBQVksRUFBRSxTQUFpQjtRQUEvQixTQUFJLEdBQUosSUFBSSxDQUFRO1FBbkJ4QixpQkFBWSxHQUF3QixJQUFJLFlBQVksRUFBUyxDQUFDO1FBWXhFLE1BQUMsR0FBVyxDQUFDLENBQUM7UUFDZCxNQUFDLEdBQVcsQ0FBQyxDQUFDO1FBRWQsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUVILGVBQVUsR0FBa0IsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUd6RCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUM1QixDQUFDO0lBRUQsV0FBVztRQUNWLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsZUFBZTtRQUNkLElBQUksQ0FBQyxNQUFNLEdBQXNCLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFFUyxJQUFJO1FBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDckM7SUFDRixDQUFDO0lBR00sV0FBVyxDQUFDLENBQWE7UUFDL0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVwQixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLENBQUMsQ0FBQyxDQUFBO0lBQ0gsQ0FBQztJQUVNLFdBQVcsQ0FBQyxDQUFhO1FBQy9CLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQixDQUFDLENBQUMsQ0FBQTtTQUNGO0lBQ0YsQ0FBQztJQUVNLFNBQVMsQ0FBQyxDQUFhO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRU0sVUFBVSxDQUFDLEtBQVk7UUFDN0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7cUlBeEVvQixxQkFBcUI7eUhBQXJCLHFCQUFxQjsyRkFBckIscUJBQXFCO2tCQUgxQyxTQUFTO21CQUFDLEVBRVY7a0hBR1UsWUFBWTtzQkFBckIsTUFBTTtnQkFDRSxLQUFLO3NCQUFiLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBOZ1pvbmUsIE9uRGVzdHJveSwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRoZW1lUGFsZXR0ZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vbW9kZWxzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG5cclxufSlcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5neE1hdEJhc2VDb2xvckNhbnZhcyBpbXBsZW1lbnRzIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG5cdEBPdXRwdXQoKSBjb2xvckNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxDb2xvcj4gPSBuZXcgRXZlbnRFbWl0dGVyPENvbG9yPigpO1xyXG5cdEBJbnB1dCgpIGNvbG9yOiBDb2xvcjtcclxuXHRASW5wdXQoKSB0aGVtZTogVGhlbWVQYWxldHRlO1xyXG5cclxuXHRjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG5cclxuXHRlbGVtZW50SWQ6IHN0cmluZztcclxuXHJcblx0Y3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XHJcblx0d2lkdGg6IG51bWJlcjtcclxuXHRoZWlnaHQ6IG51bWJlcjtcclxuXHJcblx0eDogbnVtYmVyID0gMDtcclxuXHR5OiBudW1iZXIgPSAwO1xyXG5cclxuXHRkcmFnID0gZmFsc2U7XHJcblxyXG5cdHByb3RlY3RlZCBfZGVzdHJveWVkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcclxuXHJcblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIHpvbmU6IE5nWm9uZSwgZWxlbWVudElkOiBzdHJpbmcpIHtcclxuXHRcdHRoaXMuZWxlbWVudElkID0gZWxlbWVudElkO1xyXG5cdH1cclxuXHJcblx0bmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcblx0XHR0aGlzLl9kZXN0cm95ZWQubmV4dCgpO1xyXG5cdFx0dGhpcy5fZGVzdHJveWVkLmNvbXBsZXRlKCk7XHJcblx0fVxyXG5cclxuXHRuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcblx0XHR0aGlzLmNhbnZhcyA9IDxIVE1MQ2FudmFzRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmVsZW1lbnRJZCk7XHJcblx0XHR0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblx0XHR0aGlzLndpZHRoID0gdGhpcy5jYW52YXMud2lkdGg7XHJcblx0XHR0aGlzLmhlaWdodCA9IHRoaXMuY2FudmFzLmhlaWdodDtcclxuXHRcdHRoaXMuZHJhdygpO1xyXG5cdH1cclxuXHJcblx0cHJvdGVjdGVkIGRyYXcoKSB7XHJcblx0XHR0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG5cdFx0dGhpcy5jdHgucmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcblx0XHR0aGlzLmZpbGxHcmFkaWVudCgpO1xyXG5cdFx0aWYgKHRoaXMueSAhPSAwKSB7XHJcblx0XHRcdHRoaXMucmVkcmF3SW5kaWNhdG9yKHRoaXMueCwgdGhpcy55KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxuXHRwdWJsaWMgb25Nb3VzZWRvd24oZTogTW91c2VFdmVudCkge1xyXG5cdFx0dGhpcy5kcmFnID0gdHJ1ZTtcclxuXHRcdHRoaXMuY2hhbmdlQ29sb3IoZSk7XHJcblxyXG5cdFx0dGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuXHRcdFx0dGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlbW92ZS5iaW5kKHRoaXMpKTtcclxuXHRcdH0pXHJcblx0fVxyXG5cclxuXHRwdWJsaWMgb25Nb3VzZW1vdmUoZTogTW91c2VFdmVudCkge1xyXG5cdFx0aWYgKHRoaXMuZHJhZykge1xyXG5cdFx0XHR0aGlzLnpvbmUucnVuKCgpID0+IHtcclxuXHRcdFx0XHR0aGlzLmNoYW5nZUNvbG9yKGUpO1xyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHVibGljIG9uTW91c2V1cChlOiBNb3VzZUV2ZW50KSB7XHJcblx0XHR0aGlzLmRyYWcgPSBmYWxzZTtcclxuXHRcdHRoaXMuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZW1vdmUpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGVtaXRDaGFuZ2UoY29sb3I6IENvbG9yKSB7XHJcblx0XHR0aGlzLmNvbG9yQ2hhbmdlZC5lbWl0KGNvbG9yKTtcclxuXHR9XHJcblxyXG5cdGFic3RyYWN0IGNoYW5nZUNvbG9yKGU6IE1vdXNlRXZlbnQpOiB2b2lkO1xyXG5cdGFic3RyYWN0IGZpbGxHcmFkaWVudCgpOiB2b2lkO1xyXG5cdGFic3RyYWN0IHJlZHJhd0luZGljYXRvcih4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQ7XHJcblxyXG59XHJcbiJdfQ==