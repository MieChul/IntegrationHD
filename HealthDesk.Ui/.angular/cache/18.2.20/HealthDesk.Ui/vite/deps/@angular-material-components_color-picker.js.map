{
  "version": 3,
  "sources": ["../../../../../../node_modules/@angular/material/fesm2022/card.mjs", "../../../../../../node_modules/@angular-material-components/color-picker/fesm2020/angular-material-components-color-picker.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Optional, Input, Directive, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Injection token that can be used to provide the default options the card module. */\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"mat-card-title\"], [\"mat-card-subtitle\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardTitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], [[\"\", \"mat-card-image\", \"\"], [\"\", \"matCardImage\", \"\"], [\"\", \"mat-card-sm-image\", \"\"], [\"\", \"matCardImageSmall\", \"\"], [\"\", \"mat-card-md-image\", \"\"], [\"\", \"matCardImageMedium\", \"\"], [\"\", \"mat-card-lg-image\", \"\"], [\"\", \"matCardImageLarge\", \"\"], [\"\", \"mat-card-xl-image\", \"\"], [\"\", \"matCardImageXLarge\", \"\"]], \"*\"];\nconst _c2 = [\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\", \"[mat-card-image], [matCardImage],\\n                    [mat-card-sm-image], [matCardImageSmall],\\n                    [mat-card-md-image], [matCardImageMedium],\\n                    [mat-card-lg-image], [matCardImageLarge],\\n                    [mat-card-xl-image], [matCardImageXLarge]\", \"*\"];\nconst _c3 = [[[\"\", \"mat-card-avatar\", \"\"], [\"\", \"matCardAvatar\", \"\"]], [[\"mat-card-title\"], [\"mat-card-subtitle\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardTitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], \"*\"];\nconst _c4 = [\"[mat-card-avatar], [matCardAvatar]\", \"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\", \"*\"];\nconst MAT_CARD_CONFIG = new InjectionToken('MAT_CARD_CONFIG');\n/**\n * Material Design card component. Cards contain content and actions about a single subject.\n * See https://material.io/design/components/cards.html\n *\n * MatCard provides no behaviors, instead serving as a purely visual treatment.\n */\nclass MatCard {\n  constructor(config) {\n    this.appearance = config?.appearance || 'raised';\n  }\n  static {\n    this.ɵfac = function MatCard_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCard)(i0.ɵɵdirectiveInject(MAT_CARD_CONFIG, 8));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatCard,\n      selectors: [[\"mat-card\"]],\n      hostAttrs: [1, \"mat-mdc-card\", \"mdc-card\"],\n      hostVars: 4,\n      hostBindings: function MatCard_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"mat-mdc-card-outlined\", ctx.appearance === \"outlined\")(\"mdc-card--outlined\", ctx.appearance === \"outlined\");\n        }\n      },\n      inputs: {\n        appearance: \"appearance\"\n      },\n      exportAs: [\"matCard\"],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function MatCard_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      styles: [\".mat-mdc-card{display:flex;flex-direction:column;box-sizing:border-box;position:relative;border-style:solid;border-width:0;background-color:var(--mdc-elevated-card-container-color, var(--mat-app-surface-container-low));border-color:var(--mdc-elevated-card-container-color, var(--mat-app-surface-container-low));border-radius:var(--mdc-elevated-card-container-shape, var(--mat-app-corner-medium));box-shadow:var(--mdc-elevated-card-container-elevation, var(--mat-app-level1))}.mat-mdc-card::after{position:absolute;top:0;left:0;width:100%;height:100%;border:solid 1px rgba(0,0,0,0);content:\\\"\\\";display:block;pointer-events:none;box-sizing:border-box;border-radius:var(--mdc-elevated-card-container-shape, var(--mat-app-corner-medium))}.mat-mdc-card-outlined{background-color:var(--mdc-outlined-card-container-color, var(--mat-app-surface));border-radius:var(--mdc-outlined-card-container-shape, var(--mat-app-corner-medium));border-width:var(--mdc-outlined-card-outline-width);border-color:var(--mdc-outlined-card-outline-color, var(--mat-app-outline-variant));box-shadow:var(--mdc-outlined-card-container-elevation, var(--mat-app-level0))}.mat-mdc-card-outlined::after{border:none}.mdc-card__media{position:relative;box-sizing:border-box;background-repeat:no-repeat;background-position:center;background-size:cover}.mdc-card__media::before{display:block;content:\\\"\\\"}.mdc-card__media:first-child{border-top-left-radius:inherit;border-top-right-radius:inherit}.mdc-card__media:last-child{border-bottom-left-radius:inherit;border-bottom-right-radius:inherit}.mat-mdc-card-actions{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;min-height:52px;padding:8px}.mat-mdc-card-title{font-family:var(--mat-card-title-text-font, var(--mat-app-title-large-font));line-height:var(--mat-card-title-text-line-height, var(--mat-app-title-large-line-height));font-size:var(--mat-card-title-text-size, var(--mat-app-title-large-size));letter-spacing:var(--mat-card-title-text-tracking, var(--mat-app-title-large-tracking));font-weight:var(--mat-card-title-text-weight, var(--mat-app-title-large-weight))}.mat-mdc-card-subtitle{color:var(--mat-card-subtitle-text-color, var(--mat-app-on-surface));font-family:var(--mat-card-subtitle-text-font, var(--mat-app-title-medium-font));line-height:var(--mat-card-subtitle-text-line-height, var(--mat-app-title-medium-line-height));font-size:var(--mat-card-subtitle-text-size, var(--mat-app-title-medium-size));letter-spacing:var(--mat-card-subtitle-text-tracking, var(--mat-app-title-medium-tracking));font-weight:var(--mat-card-subtitle-text-weight, var(--mat-app-title-medium-weight))}.mat-mdc-card-title,.mat-mdc-card-subtitle{display:block;margin:0}.mat-mdc-card-avatar~.mat-mdc-card-header-text .mat-mdc-card-title,.mat-mdc-card-avatar~.mat-mdc-card-header-text .mat-mdc-card-subtitle{padding:16px 16px 0}.mat-mdc-card-header{display:flex;padding:16px 16px 0}.mat-mdc-card-content{display:block;padding:0 16px}.mat-mdc-card-content:first-child{padding-top:16px}.mat-mdc-card-content:last-child{padding-bottom:16px}.mat-mdc-card-title-group{display:flex;justify-content:space-between;width:100%}.mat-mdc-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;margin-bottom:16px;object-fit:cover}.mat-mdc-card-avatar~.mat-mdc-card-header-text .mat-mdc-card-subtitle,.mat-mdc-card-avatar~.mat-mdc-card-header-text .mat-mdc-card-title{line-height:normal}.mat-mdc-card-sm-image{width:80px;height:80px}.mat-mdc-card-md-image{width:112px;height:112px}.mat-mdc-card-lg-image{width:152px;height:152px}.mat-mdc-card-xl-image{width:240px;height:240px}.mat-mdc-card-subtitle~.mat-mdc-card-title,.mat-mdc-card-title~.mat-mdc-card-subtitle,.mat-mdc-card-header .mat-mdc-card-header-text .mat-mdc-card-title,.mat-mdc-card-header .mat-mdc-card-header-text .mat-mdc-card-subtitle,.mat-mdc-card-title-group .mat-mdc-card-title,.mat-mdc-card-title-group .mat-mdc-card-subtitle{padding-top:0}.mat-mdc-card-content>:last-child:not(.mat-mdc-card-footer){margin-bottom:0}.mat-mdc-card-actions-align-end{justify-content:flex-end}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCard, [{\n    type: Component,\n    args: [{\n      selector: 'mat-card',\n      host: {\n        'class': 'mat-mdc-card mdc-card',\n        '[class.mat-mdc-card-outlined]': 'appearance === \"outlined\"',\n        '[class.mdc-card--outlined]': 'appearance === \"outlined\"'\n      },\n      exportAs: 'matCard',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      standalone: true,\n      template: \"<ng-content></ng-content>\\n\",\n      styles: [\".mat-mdc-card{display:flex;flex-direction:column;box-sizing:border-box;position:relative;border-style:solid;border-width:0;background-color:var(--mdc-elevated-card-container-color, var(--mat-app-surface-container-low));border-color:var(--mdc-elevated-card-container-color, var(--mat-app-surface-container-low));border-radius:var(--mdc-elevated-card-container-shape, var(--mat-app-corner-medium));box-shadow:var(--mdc-elevated-card-container-elevation, var(--mat-app-level1))}.mat-mdc-card::after{position:absolute;top:0;left:0;width:100%;height:100%;border:solid 1px rgba(0,0,0,0);content:\\\"\\\";display:block;pointer-events:none;box-sizing:border-box;border-radius:var(--mdc-elevated-card-container-shape, var(--mat-app-corner-medium))}.mat-mdc-card-outlined{background-color:var(--mdc-outlined-card-container-color, var(--mat-app-surface));border-radius:var(--mdc-outlined-card-container-shape, var(--mat-app-corner-medium));border-width:var(--mdc-outlined-card-outline-width);border-color:var(--mdc-outlined-card-outline-color, var(--mat-app-outline-variant));box-shadow:var(--mdc-outlined-card-container-elevation, var(--mat-app-level0))}.mat-mdc-card-outlined::after{border:none}.mdc-card__media{position:relative;box-sizing:border-box;background-repeat:no-repeat;background-position:center;background-size:cover}.mdc-card__media::before{display:block;content:\\\"\\\"}.mdc-card__media:first-child{border-top-left-radius:inherit;border-top-right-radius:inherit}.mdc-card__media:last-child{border-bottom-left-radius:inherit;border-bottom-right-radius:inherit}.mat-mdc-card-actions{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;min-height:52px;padding:8px}.mat-mdc-card-title{font-family:var(--mat-card-title-text-font, var(--mat-app-title-large-font));line-height:var(--mat-card-title-text-line-height, var(--mat-app-title-large-line-height));font-size:var(--mat-card-title-text-size, var(--mat-app-title-large-size));letter-spacing:var(--mat-card-title-text-tracking, var(--mat-app-title-large-tracking));font-weight:var(--mat-card-title-text-weight, var(--mat-app-title-large-weight))}.mat-mdc-card-subtitle{color:var(--mat-card-subtitle-text-color, var(--mat-app-on-surface));font-family:var(--mat-card-subtitle-text-font, var(--mat-app-title-medium-font));line-height:var(--mat-card-subtitle-text-line-height, var(--mat-app-title-medium-line-height));font-size:var(--mat-card-subtitle-text-size, var(--mat-app-title-medium-size));letter-spacing:var(--mat-card-subtitle-text-tracking, var(--mat-app-title-medium-tracking));font-weight:var(--mat-card-subtitle-text-weight, var(--mat-app-title-medium-weight))}.mat-mdc-card-title,.mat-mdc-card-subtitle{display:block;margin:0}.mat-mdc-card-avatar~.mat-mdc-card-header-text .mat-mdc-card-title,.mat-mdc-card-avatar~.mat-mdc-card-header-text .mat-mdc-card-subtitle{padding:16px 16px 0}.mat-mdc-card-header{display:flex;padding:16px 16px 0}.mat-mdc-card-content{display:block;padding:0 16px}.mat-mdc-card-content:first-child{padding-top:16px}.mat-mdc-card-content:last-child{padding-bottom:16px}.mat-mdc-card-title-group{display:flex;justify-content:space-between;width:100%}.mat-mdc-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;margin-bottom:16px;object-fit:cover}.mat-mdc-card-avatar~.mat-mdc-card-header-text .mat-mdc-card-subtitle,.mat-mdc-card-avatar~.mat-mdc-card-header-text .mat-mdc-card-title{line-height:normal}.mat-mdc-card-sm-image{width:80px;height:80px}.mat-mdc-card-md-image{width:112px;height:112px}.mat-mdc-card-lg-image{width:152px;height:152px}.mat-mdc-card-xl-image{width:240px;height:240px}.mat-mdc-card-subtitle~.mat-mdc-card-title,.mat-mdc-card-title~.mat-mdc-card-subtitle,.mat-mdc-card-header .mat-mdc-card-header-text .mat-mdc-card-title,.mat-mdc-card-header .mat-mdc-card-header-text .mat-mdc-card-subtitle,.mat-mdc-card-title-group .mat-mdc-card-title,.mat-mdc-card-title-group .mat-mdc-card-subtitle{padding-top:0}.mat-mdc-card-content>:last-child:not(.mat-mdc-card-footer){margin-bottom:0}.mat-mdc-card-actions-align-end{justify-content:flex-end}\"]\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_CARD_CONFIG]\n    }, {\n      type: Optional\n    }]\n  }], {\n    appearance: [{\n      type: Input\n    }]\n  });\n})();\n// TODO(jelbourn): add `MatActionCard`, which is a card that acts like a button (and has a ripple).\n// Supported in MDC with `.mdc-card__primary-action`. Will require additional a11y docs for users.\n/**\n * Title of a card, intended for use within `<mat-card>`. This component is an optional\n * convenience for one variety of card title; any custom title element may be used in its place.\n *\n * MatCardTitle provides no behaviors, instead serving as a purely visual treatment.\n */\nclass MatCardTitle {\n  static {\n    this.ɵfac = function MatCardTitle_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardTitle)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatCardTitle,\n      selectors: [[\"mat-card-title\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"matCardTitle\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-card-title\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardTitle, [{\n    type: Directive,\n    args: [{\n      selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n      host: {\n        'class': 'mat-mdc-card-title'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n/**\n * Container intended to be used within the `<mat-card>` component. Can contain exactly one\n * `<mat-card-title>`, one `<mat-card-subtitle>` and one content image of any size\n * (e.g. `<img matCardLgImage>`).\n */\nclass MatCardTitleGroup {\n  static {\n    this.ɵfac = function MatCardTitleGroup_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardTitleGroup)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatCardTitleGroup,\n      selectors: [[\"mat-card-title-group\"]],\n      hostAttrs: [1, \"mat-mdc-card-title-group\"],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c2,\n      decls: 4,\n      vars: 0,\n      template: function MatCardTitleGroup_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c1);\n          i0.ɵɵelementStart(0, \"div\");\n          i0.ɵɵprojection(1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵprojection(2, 1);\n          i0.ɵɵprojection(3, 2);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardTitleGroup, [{\n    type: Component,\n    args: [{\n      selector: 'mat-card-title-group',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-mdc-card-title-group'\n      },\n      standalone: true,\n      template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"[mat-card-image], [matCardImage],\\n                    [mat-card-sm-image], [matCardImageSmall],\\n                    [mat-card-md-image], [matCardImageMedium],\\n                    [mat-card-lg-image], [matCardImageLarge],\\n                    [mat-card-xl-image], [matCardImageXLarge]\\\"></ng-content>\\n<ng-content></ng-content>\\n\"\n    }]\n  }], null, null);\n})();\n/**\n * Content of a card, intended for use within `<mat-card>`. This component is an optional\n * convenience for use with other convenience elements, such as `<mat-card-title>`; any custom\n * content block element may be used in its place.\n *\n * MatCardContent provides no behaviors, instead serving as a purely visual treatment.\n */\nclass MatCardContent {\n  static {\n    this.ɵfac = function MatCardContent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardContent)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatCardContent,\n      selectors: [[\"mat-card-content\"]],\n      hostAttrs: [1, \"mat-mdc-card-content\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardContent, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-card-content',\n      host: {\n        'class': 'mat-mdc-card-content'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n/**\n * Sub-title of a card, intended for use within `<mat-card>` beneath a `<mat-card-title>`. This\n * component is an optional convenience for use with other convenience elements, such as\n * `<mat-card-title>`.\n *\n * MatCardSubtitle provides no behaviors, instead serving as a purely visual treatment.\n */\nclass MatCardSubtitle {\n  static {\n    this.ɵfac = function MatCardSubtitle_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardSubtitle)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatCardSubtitle,\n      selectors: [[\"mat-card-subtitle\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-card-subtitle\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardSubtitle, [{\n    type: Directive,\n    args: [{\n      selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n      host: {\n        'class': 'mat-mdc-card-subtitle'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n/**\n * Bottom area of a card that contains action buttons, intended for use within `<mat-card>`.\n * This component is an optional convenience for use with other convenience elements, such as\n * `<mat-card-content>`; any custom action block element may be used in its place.\n *\n * MatCardActions provides no behaviors, instead serving as a purely visual treatment.\n */\nclass MatCardActions {\n  constructor() {\n    // TODO(jelbourn): deprecate `align` in favor of `actionPosition` or `actionAlignment`\n    // as to not conflict with the native `align` attribute.\n    /** Position of the actions inside the card. */\n    this.align = 'start';\n  }\n  static {\n    this.ɵfac = function MatCardActions_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardActions)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatCardActions,\n      selectors: [[\"mat-card-actions\"]],\n      hostAttrs: [1, \"mat-mdc-card-actions\", \"mdc-card__actions\"],\n      hostVars: 2,\n      hostBindings: function MatCardActions_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"mat-mdc-card-actions-align-end\", ctx.align === \"end\");\n        }\n      },\n      inputs: {\n        align: \"align\"\n      },\n      exportAs: [\"matCardActions\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardActions, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-card-actions',\n      exportAs: 'matCardActions',\n      host: {\n        'class': 'mat-mdc-card-actions mdc-card__actions',\n        '[class.mat-mdc-card-actions-align-end]': 'align === \"end\"'\n      },\n      standalone: true\n    }]\n  }], null, {\n    align: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Header region of a card, intended for use within `<mat-card>`. This header captures\n * a card title, subtitle, and avatar.  This component is an optional convenience for use with\n * other convenience elements, such as `<mat-card-footer>`; any custom header block element may be\n * used in its place.\n *\n * MatCardHeader provides no behaviors, instead serving as a purely visual treatment.\n */\nclass MatCardHeader {\n  static {\n    this.ɵfac = function MatCardHeader_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardHeader)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatCardHeader,\n      selectors: [[\"mat-card-header\"]],\n      hostAttrs: [1, \"mat-mdc-card-header\"],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c4,\n      decls: 4,\n      vars: 0,\n      consts: [[1, \"mat-mdc-card-header-text\"]],\n      template: function MatCardHeader_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c3);\n          i0.ɵɵprojection(0);\n          i0.ɵɵelementStart(1, \"div\", 0);\n          i0.ɵɵprojection(2, 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵprojection(3, 2);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardHeader, [{\n    type: Component,\n    args: [{\n      selector: 'mat-card-header',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-mdc-card-header'\n      },\n      standalone: true,\n      template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-mdc-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\"\n    }]\n  }], null, null);\n})();\n/**\n * Footer area a card, intended for use within `<mat-card>`.\n * This component is an optional convenience for use with other convenience elements, such as\n * `<mat-card-content>`; any custom footer block element may be used in its place.\n *\n * MatCardFooter provides no behaviors, instead serving as a purely visual treatment.\n */\nclass MatCardFooter {\n  static {\n    this.ɵfac = function MatCardFooter_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardFooter)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatCardFooter,\n      selectors: [[\"mat-card-footer\"]],\n      hostAttrs: [1, \"mat-mdc-card-footer\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardFooter, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-card-footer',\n      host: {\n        'class': 'mat-mdc-card-footer'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n// TODO(jelbourn): deprecate the \"image\" selectors to replace with \"media\".\n// TODO(jelbourn): support `.mdc-card__media-content`.\n/**\n * Primary image content for a card, intended for use within `<mat-card>`. Can be applied to\n * any media element, such as `<img>` or `<picture>`.\n *\n * This component is an optional convenience for use with other convenience elements, such as\n * `<mat-card-content>`; any custom media element may be used in its place.\n *\n * MatCardImage provides no behaviors, instead serving as a purely visual treatment.\n */\nclass MatCardImage {\n  static {\n    this.ɵfac = function MatCardImage_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardImage)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatCardImage,\n      selectors: [[\"\", \"mat-card-image\", \"\"], [\"\", \"matCardImage\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-card-image\", \"mdc-card__media\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardImage, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-card-image], [matCardImage]',\n      host: {\n        'class': 'mat-mdc-card-image mdc-card__media'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n/** Same as `MatCardImage`, but small. */\nclass MatCardSmImage {\n  static {\n    this.ɵfac = function MatCardSmImage_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardSmImage)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatCardSmImage,\n      selectors: [[\"\", \"mat-card-sm-image\", \"\"], [\"\", \"matCardImageSmall\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-card-sm-image\", \"mdc-card__media\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardSmImage, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-card-sm-image], [matCardImageSmall]',\n      host: {\n        'class': 'mat-mdc-card-sm-image mdc-card__media'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n/** Same as `MatCardImage`, but medium. */\nclass MatCardMdImage {\n  static {\n    this.ɵfac = function MatCardMdImage_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardMdImage)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatCardMdImage,\n      selectors: [[\"\", \"mat-card-md-image\", \"\"], [\"\", \"matCardImageMedium\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-card-md-image\", \"mdc-card__media\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardMdImage, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-card-md-image], [matCardImageMedium]',\n      host: {\n        'class': 'mat-mdc-card-md-image mdc-card__media'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n/** Same as `MatCardImage`, but large. */\nclass MatCardLgImage {\n  static {\n    this.ɵfac = function MatCardLgImage_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardLgImage)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatCardLgImage,\n      selectors: [[\"\", \"mat-card-lg-image\", \"\"], [\"\", \"matCardImageLarge\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-card-lg-image\", \"mdc-card__media\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardLgImage, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-card-lg-image], [matCardImageLarge]',\n      host: {\n        'class': 'mat-mdc-card-lg-image mdc-card__media'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n/** Same as `MatCardImage`, but extra-large. */\nclass MatCardXlImage {\n  static {\n    this.ɵfac = function MatCardXlImage_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardXlImage)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatCardXlImage,\n      selectors: [[\"\", \"mat-card-xl-image\", \"\"], [\"\", \"matCardImageXLarge\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-card-xl-image\", \"mdc-card__media\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardXlImage, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-card-xl-image], [matCardImageXLarge]',\n      host: {\n        'class': 'mat-mdc-card-xl-image mdc-card__media'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n/**\n * Avatar image content for a card, intended for use within `<mat-card>`. Can be applied to\n * any media element, such as `<img>` or `<picture>`.\n *\n * This component is an optional convenience for use with other convenience elements, such as\n * `<mat-card-title>`; any custom media element may be used in its place.\n *\n * MatCardAvatar provides no behaviors, instead serving as a purely visual treatment.\n */\nclass MatCardAvatar {\n  static {\n    this.ɵfac = function MatCardAvatar_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardAvatar)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatCardAvatar,\n      selectors: [[\"\", \"mat-card-avatar\", \"\"], [\"\", \"matCardAvatar\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-card-avatar\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardAvatar, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-card-avatar], [matCardAvatar]',\n      host: {\n        'class': 'mat-mdc-card-avatar'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\nconst CARD_DIRECTIVES = [MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage];\nclass MatCardModule {\n  static {\n    this.ɵfac = function MatCardModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCardModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatCardModule,\n      imports: [MatCommonModule, CommonModule, MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage],\n      exports: [MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage, MatCommonModule]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [MatCommonModule, CommonModule, MatCommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, CommonModule, ...CARD_DIRECTIVES],\n      exports: [CARD_DIRECTIVES, MatCommonModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CARD_CONFIG, MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardModule, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage };\n", "import { ComponentPortal, PortalModule } from '@angular/cdk/portal';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, Input, Component, HostListener, ViewEncapsulation, Injectable, InjectionToken, ChangeDetectionStrategy, ViewChild, Optional, Inject, forwardRef, ContentChild, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { FormGroup, FormControl, Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i2$1 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport * as i2$2 from '@angular/material/dialog';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport * as i3$1 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i1 from '@angular/material/input';\nimport { MAT_INPUT_VALUE_ACCESSOR, MatInputModule } from '@angular/material/input';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { Subject, merge, Subscription, of } from 'rxjs';\nimport { takeUntil, debounceTime, distinctUntilChanged, take, filter } from 'rxjs/operators';\nimport * as i2 from '@angular/material/form-field';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i3 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { mixinColor } from '@angular/material/core';\nimport { matDatepickerAnimations } from '@angular/material/datepicker';\nimport * as i5 from '@angular/cdk/bidi';\nconst _c0 = a0 => ({\n  \"active\": a0\n});\nfunction NgxMatColorCollectionComponent_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function NgxMatColorCollectionComponent_button_1_Template_button_click_0_listener() {\n      const c_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.select(c_r2));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const c_r2 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", c_r2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c0, ctx_r2.selectedColor === c_r2))(\"disableRipple\", true);\n  }\n}\nfunction NgxMatColorCollectionComponent_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function NgxMatColorCollectionComponent_button_3_Template_button_click_0_listener() {\n      const c_r5 = i0.ɵɵrestoreView(_r4).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.select(c_r5));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const c_r5 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", c_r5);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c0, ctx_r2.selectedColor === c_r5))(\"disableRipple\", true);\n  }\n}\nconst _c1 = [\"button\"];\nconst _c2 = [[[\"\", \"ngxMatColorpickerToggleIcon\", \"\"]]];\nconst _c3 = [\"[ngxMatColorpickerToggleIcon]\"];\nfunction NgxMatColorToggleComponent_mat_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\");\n    i0.ɵɵtext(1, \" palette \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"color\", ctx_r1.picker == null ? null : ctx_r1.picker._selected == null ? null : ctx_r1.picker._selected.rgba);\n  }\n}\nconst trimLeft = /^\\s+/;\nconst trimRight = /\\s+$/;\nconst tinyCounter = 0;\nconst mathRound = Math.round;\nconst mathMin = Math.min;\nconst mathMax = Math.max;\nconst mathRandom = Math.random;\nconst NUMERIC_REGEX = /[^0-9]/g;\nconst MAX_RGB = 255;\nconst MIN_RGB = 0;\n/** List basic colors */\nconst BASIC_COLORS = [\"#ffffff\", \"#ffff00\", \"#ff00ff\", \"#ff0000\", \"#c0c0c0\", \"#808080\", \"#808000\", \"#800080\", \"#800000\", \"#00ffff\", \"#00ff00\", \"#008080\", \"#008000\", \"#0000ff\", \"#000080\", \"#000000\"];\n/**\r\n * Get color at position\r\n * @param ctx\r\n * @param x\r\n * @param y\r\n */\nfunction getColorAtPosition(ctx, x, y) {\n  const imageData = ctx.getImageData(x, y, 1, 1).data;\n  return {\n    r: imageData[0],\n    g: imageData[1],\n    b: imageData[2]\n  };\n}\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n  var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))];\n  // Return a 4 character hex if possible\n  if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n  }\n  return hex.join(\"\");\n}\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n  return c.length == 1 ? '0' + c : '' + c;\n}\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n  return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n  return parseIntFromHex(h) / 255;\n}\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n  return parseInt(val, 16);\n}\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n  var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];\n  // Return a 3 character hex if possible\n  if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n  }\n  return hex.join(\"\");\n}\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening parent\nconst CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\nconst CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\nconst CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\nconst PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\nconst PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\nconst matchers = {\n  CSS_UNIT: new RegExp(CSS_UNIT),\n  rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n  rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n  hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n  hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n  hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n  hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n};\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n  color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();\n  // Try to match string input using regular expressions.\n  // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n  // Just return an object and let the conversion functions handle that.\n  // This way the result will be the same whether the tinycolor is initialized with string or object.\n  let match;\n  let obj;\n  if (match = matchers.rgb.exec(color)) {\n    return {\n      r: match[1],\n      g: match[2],\n      b: match[3],\n      a: 1\n    };\n  }\n  if (match = matchers.rgba.exec(color)) {\n    return {\n      r: match[1],\n      g: match[2],\n      b: match[3],\n      a: match[4]\n    };\n  }\n  if (match = matchers.hex8.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1]),\n      g: parseIntFromHex(match[2]),\n      b: parseIntFromHex(match[3]),\n      a: convertHexToDecimal(match[4])\n    };\n  }\n  if (match = matchers.hex6.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1]),\n      g: parseIntFromHex(match[2]),\n      b: parseIntFromHex(match[3]),\n      a: 1\n    };\n  }\n  if (match = matchers.hex4.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1] + '' + match[1]),\n      g: parseIntFromHex(match[2] + '' + match[2]),\n      b: parseIntFromHex(match[3] + '' + match[3]),\n      a: convertHexToDecimal(match[4] + '' + match[4])\n    };\n  }\n  if (match = matchers.hex3.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1] + '' + match[1]),\n      g: parseIntFromHex(match[2] + '' + match[2]),\n      b: parseIntFromHex(match[3] + '' + match[3]),\n      a: 1\n    };\n  }\n  return null;\n}\nfunction createMissingDateImplError(provider) {\n  return Error(`NgxMatColorPicker: No provider found for ${provider}. You must define MAT_COLOR_FORMATS in your module`);\n}\nclass Color {\n  constructor(_r, _g, _b, _a) {\n    this.r = _r > MAX_RGB ? MAX_RGB : _r;\n    this.g = _g > MAX_RGB ? MAX_RGB : _g;\n    this.b = _b > MAX_RGB ? MAX_RGB : _b;\n    if (_a != null) {\n      this.a = _a > 1 ? 1 : _a;\n    } else {\n      this.a = 1;\n    }\n    this.roundA = Math.round(this.a);\n    this.hex = rgbToHex(this.r, this.g, this.b);\n    this.rgba = this.toRgba();\n  }\n  toHex(allow3Char) {\n    return rgbToHex(this.r, this.g, this.b, allow3Char);\n  }\n  toRgba() {\n    return `rgba(${this.r},${this.g},${this.b},${this.a})`;\n  }\n  toHexString(allow3Char) {\n    return '#' + this.toHex(allow3Char);\n  }\n  toRgbString() {\n    return this.a === 1 ? \"rgb(\" + Math.round(this.r) + \", \" + Math.round(this.g) + \", \" + Math.round(this.b) + \")\" : \"rgba(\" + Math.round(this.r) + \", \" + Math.round(this.g) + \", \" + Math.round(this.b) + \", \" + this.roundA + \")\";\n  }\n  toHex8(allow4Char) {\n    return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\n  }\n  toHex8String(allow4Char) {\n    return '#' + this.toHex8(allow4Char);\n  }\n  toString(format) {\n    let formatSet = !!format;\n    let formattedString;\n    let hasAlpha = this.a < 1 && this.a >= 0;\n    let needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\");\n    if (needsAlphaFormat) {\n      return this.toRgbString();\n    }\n    if (format === \"rgb\") {\n      formattedString = this.toRgbString();\n    }\n    if (format === \"hex\" || format === \"hex6\") {\n      formattedString = this.toHexString();\n    }\n    if (format === \"hex3\") {\n      formattedString = this.toHexString(true);\n    }\n    if (format === \"hex4\") {\n      formattedString = this.toHex8String(true);\n    }\n    if (format === \"hex8\") {\n      formattedString = this.toHex8String();\n    }\n    return formattedString || this.toHexString();\n  }\n}\nclass NgxMatBaseColorCanvas {\n  constructor(zone, elementId) {\n    this.zone = zone;\n    this.colorChanged = new EventEmitter();\n    this.x = 0;\n    this.y = 0;\n    this.drag = false;\n    this._destroyed = new Subject();\n    this.elementId = elementId;\n  }\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  ngAfterViewInit() {\n    this.canvas = document.getElementById(this.elementId);\n    this.ctx = this.canvas.getContext('2d');\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.draw();\n  }\n  draw() {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    this.ctx.rect(0, 0, this.width, this.height);\n    this.fillGradient();\n    if (this.y != 0) {\n      this.redrawIndicator(this.x, this.y);\n    }\n  }\n  onMousedown(e) {\n    this.drag = true;\n    this.changeColor(e);\n    this.zone.runOutsideAngular(() => {\n      this.canvas.addEventListener('mousemove', this.onMousemove.bind(this));\n    });\n  }\n  onMousemove(e) {\n    if (this.drag) {\n      this.zone.run(() => {\n        this.changeColor(e);\n      });\n    }\n  }\n  onMouseup(e) {\n    this.drag = false;\n    this.canvas.removeEventListener('mousemove', this.onMousemove);\n  }\n  emitChange(color) {\n    this.colorChanged.emit(color);\n  }\n}\n/** @nocollapse */\nNgxMatBaseColorCanvas.ɵfac = function NgxMatBaseColorCanvas_Factory(__ngFactoryType__) {\n  i0.ɵɵinvalidFactory();\n};\n/** @nocollapse */\nNgxMatBaseColorCanvas.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMatBaseColorCanvas,\n  inputs: {\n    color: \"color\",\n    theme: \"theme\"\n  },\n  outputs: {\n    colorChanged: \"colorChanged\"\n  }\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatBaseColorCanvas, [{\n    type: Directive,\n    args: [{}]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined\n    }];\n  }, {\n    colorChanged: [{\n      type: Output\n    }],\n    color: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatColorSliderComponent extends NgxMatBaseColorCanvas {\n  constructor(zone) {\n    super(zone, 'color-strip');\n    this.zone = zone;\n  }\n  ngOnInit() {}\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n  }\n  fillGradient() {\n    const grd = this.ctx.createLinearGradient(0, 0, 0, this.height);\n    grd.addColorStop(0, 'rgba(255, 0, 0, 1)');\n    grd.addColorStop(0.17, 'rgba(255, 255, 0, 1)');\n    grd.addColorStop(0.34, 'rgba(0, 255, 0, 1)');\n    grd.addColorStop(0.51, 'rgba(0, 255, 255, 1)');\n    grd.addColorStop(0.68, 'rgba(0, 0, 255, 1)');\n    grd.addColorStop(0.85, 'rgba(255, 0, 255, 1)');\n    grd.addColorStop(1, 'rgba(255, 0, 0, 1)');\n    this.ctx.fillStyle = grd;\n    this.ctx.fill();\n  }\n  redrawIndicator(x, y) {\n    this.ctx.beginPath();\n    this.ctx.strokeStyle = 'white';\n    this.ctx.lineWidth = 2;\n    this.ctx.arc(7.5, y, 7.5, 0, 2 * Math.PI, false);\n    this.ctx.stroke();\n    this.ctx.closePath();\n  }\n  changeColor(e) {\n    this.x = e.offsetX;\n    this.y = e.offsetY;\n    this.draw();\n    const {\n      r,\n      g,\n      b\n    } = getColorAtPosition(this.ctx, e.offsetX, e.offsetY);\n    this.emitChange(new Color(r, g, b));\n  }\n}\n/** @nocollapse */\nNgxMatColorSliderComponent.ɵfac = function NgxMatColorSliderComponent_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgxMatColorSliderComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n};\n/** @nocollapse */\nNgxMatColorSliderComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorSliderComponent,\n  selectors: [[\"ngx-mat-color-slider\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"id\", \"color-strip\", \"width\", \"15\", \"height\", \"234\", 1, \"zone-strip\", 3, \"mousedown\", \"mouseup\"]],\n  template: function NgxMatColorSliderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"canvas\", 0);\n      i0.ɵɵlistener(\"mousedown\", function NgxMatColorSliderComponent_Template_canvas_mousedown_0_listener($event) {\n        return ctx.onMousedown($event);\n      })(\"mouseup\", function NgxMatColorSliderComponent_Template_canvas_mouseup_0_listener($event) {\n        return ctx.onMouseup($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n  }\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorSliderComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-slider',\n      template: \"<canvas id=\\\"color-strip\\\" class=\\\"zone-strip\\\" (mousedown)=\\\"onMousedown($event)\\\" (mouseup)=\\\"onMouseup($event)\\\"\\r\\n width=\\\"15\\\" height=\\\"234\\\"></canvas>\"\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass NumericColorInputDirective {\n  constructor() {}\n  onInput($event) {\n    this._formatInput($event.target);\n  }\n  /**\r\n  * Format input\r\n  * @param input\r\n  */\n  _formatInput(input) {\n    let val = Number(input.value.replace(NUMERIC_REGEX, ''));\n    val = isNaN(val) ? 0 : val;\n    input.value = val;\n  }\n}\n/** @nocollapse */\nNumericColorInputDirective.ɵfac = function NumericColorInputDirective_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NumericColorInputDirective)();\n};\n/** @nocollapse */\nNumericColorInputDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NumericColorInputDirective,\n  selectors: [[\"\", \"ngxMatNumericColorInput\", \"\"]],\n  hostBindings: function NumericColorInputDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"input\", function NumericColorInputDirective_input_HostBindingHandler($event) {\n        return ctx.onInput($event);\n      });\n    }\n  }\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NumericColorInputDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatNumericColorInput]'\n    }]\n  }], function () {\n    return [];\n  }, {\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }]\n  });\n})();\nconst RADIUS_NOB = 5;\nclass NgxMatColorCanvasComponent extends NgxMatBaseColorCanvas {\n  constructor(zone) {\n    super(zone, 'color-block');\n    this.zone = zone;\n    this._resetBaseColor = true;\n    this.formGroup = new FormGroup({\n      r: new FormControl(null, [Validators.required]),\n      g: new FormControl(null, [Validators.required]),\n      b: new FormControl(null, [Validators.required]),\n      a: new FormControl(null, [Validators.required]),\n      hex: new FormControl(null, [Validators.required, Validators.pattern(matchers.hex6)])\n    });\n  }\n  get rCtrl() {\n    return this.formGroup.get('r');\n  }\n  get gCtrl() {\n    return this.formGroup.get('g');\n  }\n  get bCtrl() {\n    return this.formGroup.get('b');\n  }\n  get aCtrl() {\n    return this.formGroup.get('a');\n  }\n  get hexCtrl() {\n    return this.formGroup.get('hex');\n  }\n  ngOnInit() {\n    const rgbaCtrl$ = merge(this.rCtrl.valueChanges, this.gCtrl.valueChanges, this.bCtrl.valueChanges, this.aCtrl.valueChanges);\n    rgbaCtrl$.pipe(takeUntil(this._destroyed), debounceTime(400)).subscribe(_ => {\n      const color = new Color(Number(this.rCtrl.value), Number(this.gCtrl.value), Number(this.bCtrl.value), Number(this.aCtrl.value));\n      this.emitChange(color);\n    });\n    const hexCtrl$ = this.hexCtrl.valueChanges;\n    hexCtrl$.pipe(takeUntil(this._destroyed), debounceTime(400), distinctUntilChanged()).subscribe(hex => {\n      const obj = stringInputToObject(hex);\n      if (obj != null) {\n        const color = new Color(obj.r, obj.g, obj.b, obj.a);\n        this.emitChange(color);\n      }\n    });\n  }\n  ngOnChanges(changes) {\n    if (changes.color && changes.color.currentValue) {\n      this.updateForm(changes.color.currentValue);\n      if (this._resetBaseColor) {\n        this._baseColor = changes.color.currentValue;\n      }\n      this._resetBaseColor = true;\n      if (!changes.color.firstChange) {\n        this.draw();\n      }\n    }\n  }\n  updateForm(val) {\n    const config = {\n      emitEvent: false\n    };\n    this.rCtrl.setValue(val.r, config);\n    this.gCtrl.setValue(val.g, config);\n    this.bCtrl.setValue(val.b, config);\n    this.aCtrl.setValue(val.a, config);\n    this.hexCtrl.setValue(val.hex, config);\n  }\n  redrawIndicator(x, y) {\n    this.ctx.beginPath();\n    this.ctx.strokeStyle = 'white';\n    this.ctx.arc(x, y, RADIUS_NOB, 0, 2 * Math.PI, false);\n    this.ctx.stroke();\n    this.ctx.closePath();\n  }\n  fillGradient() {\n    this.ctx.fillStyle = this._baseColor ? this._baseColor.rgba : 'rgba(255,255,255,1)';\n    this.ctx.fillRect(0, 0, this.width, this.height);\n    const grdWhite = this.ctx.createLinearGradient(0, 0, this.width, 0);\n    grdWhite.addColorStop(0, 'rgba(255,255,255,1)');\n    grdWhite.addColorStop(1, 'rgba(255,255,255,0)');\n    this.ctx.fillStyle = grdWhite;\n    this.ctx.fillRect(0, 0, this.width, this.height);\n    const grdBlack = this.ctx.createLinearGradient(0, 0, 0, this.height);\n    grdBlack.addColorStop(0, 'rgba(0,0,0,0)');\n    grdBlack.addColorStop(1, 'rgba(0,0,0,1)');\n    this.ctx.fillStyle = grdBlack;\n    this.ctx.fillRect(0, 0, this.width, this.height);\n  }\n  onSliderColorChanged(c) {\n    this._baseColor = c;\n    this.color = c;\n    this.fillGradient();\n    this.emitChange(c);\n  }\n  changeColor(e) {\n    this.x = e.offsetX;\n    this.y = e.offsetY;\n    this._resetBaseColor = false;\n    this.draw();\n    const {\n      r,\n      g,\n      b\n    } = getColorAtPosition(this.ctx, e.offsetX, e.offsetY);\n    this.emitChange(new Color(r, g, b));\n  }\n}\n/** @nocollapse */\nNgxMatColorCanvasComponent.ɵfac = function NgxMatColorCanvasComponent_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgxMatColorCanvasComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n};\n/** @nocollapse */\nNgxMatColorCanvasComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorCanvasComponent,\n  selectors: [[\"ngx-mat-color-canvas\"]],\n  hostAttrs: [1, \"ngx-mat-color-canvas\"],\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 30,\n  vars: 8,\n  consts: [[3, \"formGroup\"], [1, \"color-canvas-row\"], [1, \"zone-canvas\"], [\"id\", \"color-block\", \"width\", \"200\", \"height\", \"235\", 1, \"zone-block\", 3, \"mousedown\", \"mouseup\"], [3, \"colorChanged\"], [1, \"zone-inputs\"], [3, \"color\"], [\"matInput\", \"\", \"formControlName\", \"r\", \"ngxMatNumericColorInput\", \"\", \"autocomplete\", \"off\"], [\"matInput\", \"\", \"formControlName\", \"g\", \"ngxMatNumericColorInput\", \"\", \"autocomplete\", \"off\"], [\"matInput\", \"\", \"formControlName\", \"b\", \"ngxMatNumericColorInput\", \"\", \"autocomplete\", \"off\"], [\"mat-mini-fab\", \"\", 1, \"preview\"], [\"matPrefix\", \"\", 1, \"symbol\"], [\"matInput\", \"\", \"formControlName\", \"hex\", \"autocomplete\", \"off\"], [1, \"input-opacity\", 3, \"color\"], [\"matInput\", \"\", \"formControlName\", \"a\", \"type\", \"number\", \"min\", \"0\", \"max\", \"1\", \"step\", \"0.1\", \"autocomplete\", \"off\"]],\n  template: function NgxMatColorCanvasComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"canvas\", 3);\n      i0.ɵɵlistener(\"mousedown\", function NgxMatColorCanvasComponent_Template_canvas_mousedown_3_listener($event) {\n        return ctx.onMousedown($event);\n      })(\"mouseup\", function NgxMatColorCanvasComponent_Template_canvas_mouseup_3_listener($event) {\n        return ctx.onMouseup($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"ngx-mat-color-slider\", 4);\n      i0.ɵɵlistener(\"colorChanged\", function NgxMatColorCanvasComponent_Template_ngx_mat_color_slider_colorChanged_4_listener($event) {\n        return ctx.onSliderColorChanged($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 5)(6, \"mat-form-field\", 6)(7, \"mat-label\");\n      i0.ɵɵtext(8, \"R\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"mat-form-field\", 6)(11, \"mat-label\");\n      i0.ɵɵtext(12, \"G\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"mat-form-field\", 6)(15, \"mat-label\");\n      i0.ɵɵtext(16, \"B\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 9);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(18, \"div\", 1);\n      i0.ɵɵelement(19, \"button\", 10);\n      i0.ɵɵelementStart(20, \"mat-form-field\", 6)(21, \"mat-label\");\n      i0.ɵɵtext(22, \"HEX6\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"mat-label\", 11);\n      i0.ɵɵtext(24, \"#\\xA0\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(25, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"mat-form-field\", 13)(27, \"mat-label\");\n      i0.ɵɵtext(28, \"A\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(29, \"input\", 14);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"color\", ctx.theme);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"color\", ctx.theme);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"color\", ctx.theme);\n      i0.ɵɵadvance(5);\n      i0.ɵɵstyleProp(\"background-color\", (ctx.color == null ? null : ctx.color.rgba) || \"transparent\");\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"color\", ctx.theme);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"color\", ctx.theme);\n    }\n  },\n  dependencies: [i1.MatInput, i2.MatFormField, i2.MatLabel, i2.MatPrefix, i2$1.MatMiniFabButton, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.MinValidator, i4.MaxValidator, i4.FormGroupDirective, i4.FormControlName, NgxMatColorSliderComponent, NumericColorInputDirective],\n  styles: [\".ngx-mat-color-canvas .color-canvas-row{display:flex}.ngx-mat-color-canvas .color-canvas-row:first-of-type{height:235px;margin-bottom:12px}.ngx-mat-color-canvas .color-canvas-row:first-of-type .card{height:180px}.ngx-mat-color-canvas .color-canvas-row canvas:hover{cursor:crosshair}.ngx-mat-color-canvas .color-canvas-row .zone{display:flex}.ngx-mat-color-canvas .color-canvas-row .zone-canvas{height:235px}.ngx-mat-color-canvas .color-canvas-row .zone-canvas .zone-block{border:1px solid rgba(0,0,0,.12)}.ngx-mat-color-canvas .color-canvas-row .zone-strip{flex-basis:auto;margin-left:10px}.ngx-mat-color-canvas .color-canvas-row .zone-inputs{display:flex;width:60px;height:235px;flex-direction:column;margin-left:16px;margin-top:12px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2){display:flex}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .preview{min-width:40px;min-height:40px;height:40px;width:40px;margin-top:12px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-mdc-form-field{margin-left:16px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-mdc-form-field:first-of-type{width:170px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-mdc-form-field:first-of-type .symbol{font-weight:700;color:#0000008a}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-mdc-form-field:last-of-type{width:60px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-mdc-form-field:last-of-type .mat-mdc-text-field-wrapper{padding:0 8px}.ngx-mat-color-canvas .mat-mdc-form-field-label{font-weight:700}.ngx-mat-color-canvas .mat-mdc-form-field .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent}\\n\"],\n  encapsulation: 2\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorCanvasComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-canvas',\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'ngx-mat-color-canvas'\n      },\n      template: \"<form [formGroup]=\\\"formGroup\\\">\\r\\n    <div class=\\\"color-canvas-row\\\">\\r\\n        <div class=\\\"zone-canvas\\\">\\r\\n            <canvas id=\\\"color-block\\\" class=\\\"zone-block\\\" (mousedown)=\\\"onMousedown($event)\\\" (mouseup)=\\\"onMouseup($event)\\\"\\r\\n                width=\\\"200\\\" height=\\\"235\\\"></canvas>\\r\\n            <ngx-mat-color-slider (colorChanged)=\\\"onSliderColorChanged($event)\\\"></ngx-mat-color-slider>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"zone-inputs\\\">\\r\\n            <mat-form-field [color]=\\\"theme\\\">\\r\\n                <mat-label>R</mat-label>\\r\\n                <input matInput formControlName=\\\"r\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field [color]=\\\"theme\\\">\\r\\n                <mat-label>G</mat-label>\\r\\n                <input matInput formControlName=\\\"g\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field [color]=\\\"theme\\\">\\r\\n                <mat-label>B</mat-label>\\r\\n                <input matInput formControlName=\\\"b\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"color-canvas-row\\\">\\r\\n        <button mat-mini-fab [style.background-color]=\\\"color?.rgba || 'transparent'\\\" class=\\\"preview\\\"></button>\\r\\n        <mat-form-field [color]=\\\"theme\\\">\\r\\n            <mat-label>HEX6</mat-label>\\r\\n            <mat-label matPrefix class=\\\"symbol\\\">#&nbsp;</mat-label>\\r\\n            <input matInput formControlName=\\\"hex\\\" autocomplete=\\\"off\\\">\\r\\n        </mat-form-field>\\r\\n        <mat-form-field class=\\\"input-opacity\\\" [color]=\\\"theme\\\">\\r\\n            <mat-label>A</mat-label>\\r\\n            <input matInput formControlName=\\\"a\\\" type=\\\"number\\\" min=\\\"0\\\" max=\\\"1\\\" step=\\\"0.1\\\" autocomplete=\\\"off\\\">\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n</form>\",\n      styles: [\".ngx-mat-color-canvas .color-canvas-row{display:flex}.ngx-mat-color-canvas .color-canvas-row:first-of-type{height:235px;margin-bottom:12px}.ngx-mat-color-canvas .color-canvas-row:first-of-type .card{height:180px}.ngx-mat-color-canvas .color-canvas-row canvas:hover{cursor:crosshair}.ngx-mat-color-canvas .color-canvas-row .zone{display:flex}.ngx-mat-color-canvas .color-canvas-row .zone-canvas{height:235px}.ngx-mat-color-canvas .color-canvas-row .zone-canvas .zone-block{border:1px solid rgba(0,0,0,.12)}.ngx-mat-color-canvas .color-canvas-row .zone-strip{flex-basis:auto;margin-left:10px}.ngx-mat-color-canvas .color-canvas-row .zone-inputs{display:flex;width:60px;height:235px;flex-direction:column;margin-left:16px;margin-top:12px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2){display:flex}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .preview{min-width:40px;min-height:40px;height:40px;width:40px;margin-top:12px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-mdc-form-field{margin-left:16px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-mdc-form-field:first-of-type{width:170px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-mdc-form-field:first-of-type .symbol{font-weight:700;color:#0000008a}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-mdc-form-field:last-of-type{width:60px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-mdc-form-field:last-of-type .mat-mdc-text-field-wrapper{padding:0 8px}.ngx-mat-color-canvas .mat-mdc-form-field-label{font-weight:700}.ngx-mat-color-canvas .mat-mdc-form-field .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass NgxMatColorCollectionComponent {\n  constructor() {\n    this.colorChanged = new EventEmitter();\n    this.colors1 = BASIC_COLORS.slice(0, 8);\n    this.colors2 = BASIC_COLORS.slice(8, 16);\n  }\n  set color(c) {\n    if (c) {\n      this.selectedColor = c.toHexString();\n    }\n  }\n  ngOnInit() {}\n  select(hex) {\n    this.selectedColor = hex;\n    const {\n      r,\n      g,\n      b,\n      a\n    } = stringInputToObject(hex);\n    this.colorChanged.emit(new Color(r, g, b, a));\n  }\n}\n/** @nocollapse */\nNgxMatColorCollectionComponent.ɵfac = function NgxMatColorCollectionComponent_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgxMatColorCollectionComponent)();\n};\n/** @nocollapse */\nNgxMatColorCollectionComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorCollectionComponent,\n  selectors: [[\"ngx-mat-color-collection\"]],\n  hostAttrs: [1, \"ngx-mat-color-collection\"],\n  inputs: {\n    color: \"color\"\n  },\n  outputs: {\n    colorChanged: \"colorChanged\"\n  },\n  decls: 4,\n  vars: 2,\n  consts: [[1, \"color-collection-row\"], [\"mat-mini-fab\", \"\", \"class\", \"btn-color\", 3, \"background-color\", \"ngClass\", \"disableRipple\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"mat-mini-fab\", \"\", 1, \"btn-color\", 3, \"click\", \"ngClass\", \"disableRipple\"]],\n  template: function NgxMatColorCollectionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, NgxMatColorCollectionComponent_button_1_Template, 1, 6, \"button\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 0);\n      i0.ɵɵtemplate(3, NgxMatColorCollectionComponent_button_3_Template, 1, 6, \"button\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"ngForOf\", ctx.colors1);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.colors2);\n    }\n  },\n  dependencies: [i1$1.NgClass, i1$1.NgForOf, i2$1.MatMiniFabButton],\n  styles: [\".ngx-mat-color-collection .btn-color{height:20px;width:20px;margin-right:11px;box-shadow:none;opacity:.3;will-change:opacity;transition:opacity .3s linear}.ngx-mat-color-collection .btn-color.active{box-shadow:0 3px 5px -1px #0003,0 6px 10px #00000024,0 1px 18px #0000001f;opacity:1}.ngx-mat-color-collection .btn-color .mat-mdc-button-touch-target{display:none!important}\\n\"],\n  encapsulation: 2\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorCollectionComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-collection',\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'ngx-mat-color-collection'\n      },\n      template: \"<div class=\\\"color-collection-row\\\">\\r\\n  <button *ngFor=\\\"let c of colors1\\\" mat-mini-fab [style.background-color]=\\\"c\\\" class=\\\"btn-color\\\"\\r\\n    (click)=\\\"select(c)\\\" [ngClass]=\\\"{'active': selectedColor === c}\\\" [disableRipple]=\\\"true\\\">\\r\\n  </button>\\r\\n</div>\\r\\n<div class=\\\"color-collection-row\\\">\\r\\n  <button *ngFor=\\\"let c of colors2\\\" mat-mini-fab [style.background-color]=\\\"c\\\" class=\\\"btn-color\\\"\\r\\n    (click)=\\\"select(c)\\\" [ngClass]=\\\"{'active': selectedColor === c}\\\" [disableRipple]=\\\"true\\\">\\r\\n  </button>\\r\\n</div>\",\n      styles: [\".ngx-mat-color-collection .btn-color{height:20px;width:20px;margin-right:11px;box-shadow:none;opacity:.3;will-change:opacity;transition:opacity .3s linear}.ngx-mat-color-collection .btn-color.active{box-shadow:0 3px 5px -1px #0003,0 6px 10px #00000024,0 1px 18px #0000001f;opacity:1}.ngx-mat-color-collection .btn-color .mat-mdc-button-touch-target{display:none!important}\\n\"]\n    }]\n  }], function () {\n    return [];\n  }, {\n    colorChanged: [{\n      type: Output\n    }],\n    color: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatColorPaletteComponent {\n  constructor() {\n    this.colorChanged = new EventEmitter();\n  }\n  ngOnInit() {}\n  handleColorChanged(color) {\n    this.colorChanged.emit(color);\n  }\n}\n/** @nocollapse */\nNgxMatColorPaletteComponent.ɵfac = function NgxMatColorPaletteComponent_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgxMatColorPaletteComponent)();\n};\n/** @nocollapse */\nNgxMatColorPaletteComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorPaletteComponent,\n  selectors: [[\"ngx-mat-color-palette\"]],\n  hostAttrs: [1, \"ngx-mat-color-palette\"],\n  inputs: {\n    color: \"color\",\n    theme: \"theme\"\n  },\n  outputs: {\n    colorChanged: \"colorChanged\"\n  },\n  decls: 2,\n  vars: 3,\n  consts: [[3, \"colorChanged\", \"color\", \"theme\"], [3, \"colorChanged\", \"color\"]],\n  template: function NgxMatColorPaletteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-mat-color-canvas\", 0);\n      i0.ɵɵlistener(\"colorChanged\", function NgxMatColorPaletteComponent_Template_ngx_mat_color_canvas_colorChanged_0_listener($event) {\n        return ctx.handleColorChanged($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(1, \"ngx-mat-color-collection\", 1);\n      i0.ɵɵlistener(\"colorChanged\", function NgxMatColorPaletteComponent_Template_ngx_mat_color_collection_colorChanged_1_listener($event) {\n        return ctx.handleColorChanged($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"color\", ctx.color)(\"theme\", ctx.theme);\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"color\", ctx.color);\n    }\n  },\n  dependencies: [NgxMatColorCanvasComponent, NgxMatColorCollectionComponent],\n  styles: [\".ngx-mat-color-palette .actions{margin-top:10px;display:flex}.ngx-mat-color-palette .actions .left{display:flex;flex-direction:column;margin-right:15px}.ngx-mat-color-palette .actions .left .preview{flex:2 1 auto;margin-bottom:10px}.ngx-mat-color-palette .actions .right{display:flex;width:60px;flex-direction:column}\\n\"],\n  encapsulation: 2\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorPaletteComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-palette',\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'ngx-mat-color-palette'\n      },\n      template: \"<ngx-mat-color-canvas (colorChanged)=\\\"handleColorChanged($event)\\\" [color]=\\\"color\\\"\\r\\n  [theme]=\\\"theme\\\"></ngx-mat-color-canvas>\\r\\n\\r\\n<ngx-mat-color-collection (colorChanged)=\\\"handleColorChanged($event)\\\" [color]=\\\"color\\\">\\r\\n</ngx-mat-color-collection>\",\n      styles: [\".ngx-mat-color-palette .actions{margin-top:10px;display:flex}.ngx-mat-color-palette .actions .left{display:flex;flex-direction:column;margin-right:15px}.ngx-mat-color-palette .actions .left .preview{flex:2 1 auto;margin-bottom:10px}.ngx-mat-color-palette .actions .right{display:flex;width:60px;flex-direction:column}\\n\"]\n    }]\n  }], function () {\n    return [];\n  }, {\n    colorChanged: [{\n      type: Output\n    }],\n    color: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }]\n  });\n})();\nclass ColorAdapter {\n  constructor() {}\n  sameColor(a, b) {\n    if (a == null && b == null) return true;\n    if (a != null && b != null) return a.rgba === b.rgba;\n    return false;\n  }\n  format(c, format) {\n    return c.toString(format);\n  }\n  parse(value) {\n    const obj = stringInputToObject(value);\n    if (obj) {\n      return new Color(obj.r, obj.g, obj.b, obj.a);\n    }\n    return null;\n  }\n}\n/** @nocollapse */\nColorAdapter.ɵfac = function ColorAdapter_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ColorAdapter)();\n};\n/** @nocollapse */\nColorAdapter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ColorAdapter,\n  factory: ColorAdapter.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ColorAdapter, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\nconst NGX_MAT_COLOR_FORMATS = {\n  display: {\n    colorInput: 'hex'\n  }\n};\nconst MAT_COLOR_FORMATS = new InjectionToken('mat-color-formats');\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nconst NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY = new InjectionToken('ngx-mat-colorpicker-scroll-strategy');\nfunction NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\nconst NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY\n};\nconst _MatColorpickerContentBase = mixinColor(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n});\nclass NgxMatColorPickerContentComponent extends _MatColorpickerContentBase {\n  constructor(elementRef) {\n    super(elementRef);\n  }\n}\n/** @nocollapse */\nNgxMatColorPickerContentComponent.ɵfac = function NgxMatColorPickerContentComponent_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgxMatColorPickerContentComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n/** @nocollapse */\nNgxMatColorPickerContentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorPickerContentComponent,\n  selectors: [[\"ngx-mat-color-picker-content\"]],\n  viewQuery: function NgxMatColorPickerContentComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(NgxMatColorPaletteComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._palette = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ngx-mat-colorpicker-content\"],\n  hostVars: 3,\n  hostBindings: function NgxMatColorPickerContentComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵsyntheticHostProperty(\"@transformPanel\", \"enter\");\n      i0.ɵɵclassProp(\"ngx-mat-colorpicker-content-touch\", ctx.picker.touchUi);\n    }\n  },\n  inputs: {\n    color: \"color\"\n  },\n  exportAs: [\"ngxMatColorPickerContent\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 2,\n  consts: [[3, \"colorChanged\", \"color\", \"theme\"]],\n  template: function NgxMatColorPickerContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-mat-color-palette\", 0);\n      i0.ɵɵlistener(\"colorChanged\", function NgxMatColorPickerContentComponent_Template_ngx_mat_color_palette_colorChanged_0_listener($event) {\n        return ctx.picker.select($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"color\", ctx.picker._selected)(\"theme\", ctx.color);\n    }\n  },\n  dependencies: [NgxMatColorPaletteComponent],\n  styles: [\".ngx-mat-colorpicker-content{display:block;border-radius:4px;box-shadow:0 2px 4px -1px #0003,0 4px 5px #00000024,0 1px 10px #0000001f;background-color:#fff;color:#000000de;padding:16px}.ngx-mat-colorpicker-content .ngx-mat-color-palette{width:296px;height:354px}.ngx-mat-colorpicker-content-touch{display:block;max-height:80vh;overflow:auto}.ngx-mat-colorpicker-content-touch .ngx-mat-color-palette{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation: landscape){.mat-colorpicker-content-touch .ngx-mat-color-palette{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-colorpicker-content-touch .ngx-mat-color-palette{width:80vw;height:100vw}}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar]\n  },\n  changeDetection: 0\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorPickerContentComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-picker-content',\n      host: {\n        'class': 'ngx-mat-colorpicker-content',\n        '[@transformPanel]': '\"enter\"',\n        '[class.ngx-mat-colorpicker-content-touch]': 'picker.touchUi'\n      },\n      animations: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar],\n      exportAs: 'ngxMatColorPickerContent',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['color'],\n      template: \"<ngx-mat-color-palette (colorChanged)=\\\"picker.select($event)\\\" \\r\\n[color]=\\\"picker._selected\\\"\\r\\n[theme]=\\\"color\\\"></ngx-mat-color-palette>\",\n      styles: [\".ngx-mat-colorpicker-content{display:block;border-radius:4px;box-shadow:0 2px 4px -1px #0003,0 4px 5px #00000024,0 1px 10px #0000001f;background-color:#fff;color:#000000de;padding:16px}.ngx-mat-colorpicker-content .ngx-mat-color-palette{width:296px;height:354px}.ngx-mat-colorpicker-content-touch{display:block;max-height:80vh;overflow:auto}.ngx-mat-colorpicker-content-touch .ngx-mat-color-palette{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation: landscape){.mat-colorpicker-content-touch .ngx-mat-color-palette{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-colorpicker-content-touch .ngx-mat-color-palette{width:80vw;height:100vw}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    _palette: [{\n      type: ViewChild,\n      args: [NgxMatColorPaletteComponent]\n    }]\n  });\n})();\nclass NgxMatColorPickerComponent {\n  constructor(_dialog, _overlay, _zone, _adapter, _dir, scrollStrategy, _document, _viewContainerRef) {\n    this._dialog = _dialog;\n    this._overlay = _overlay;\n    this._zone = _zone;\n    this._adapter = _adapter;\n    this._dir = _dir;\n    this._document = _document;\n    this._viewContainerRef = _viewContainerRef;\n    /** Emits when the datepicker has been opened. */\n    this.openedStream = new EventEmitter();\n    /** Emits when the datepicker has been closed. */\n    this.closedStream = new EventEmitter();\n    this._touchUi = false;\n    this._opened = false;\n    this._defaultColor = 'primary';\n    this._validSelected = null;\n    /** Emits when the datepicker is disabled. */\n    this._disabledChange = new Subject();\n    /** The element that was focused before the datepicker was opened. */\n    this._focusedElementBeforeOpen = null;\n    /** Subscription to value changes in the associated input element. */\n    this._inputSubscription = Subscription.EMPTY;\n    /** Emits new selected date when selected date changes. */\n    this._selectedChanged = new Subject();\n    this._scrollStrategy = scrollStrategy;\n  }\n  get disabled() {\n    return this._disabled === undefined && this._pickerInput ? this._pickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  get touchUi() {\n    return this._touchUi;\n  }\n  set touchUi(value) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  /** Whether the calendar is open. */\n  get opened() {\n    return this._opened;\n  }\n  set opened(value) {\n    value ? this.open() : this.close();\n  }\n  /** Default Color palette to use on the datepicker's calendar. */\n  get defaultColor() {\n    return this._defaultColor;\n  }\n  set defaultColor(value) {\n    this._defaultColor = value;\n  }\n  /** Color palette to use on the datepicker's calendar. */\n  get color() {\n    return this._color || (this._pickerInput ? this._pickerInput.getThemePalette() : undefined);\n  }\n  set color(value) {\n    this._color = value;\n  }\n  /** The currently selected date. */\n  get _selected() {\n    return this._validSelected;\n  }\n  set _selected(value) {\n    this._validSelected = value;\n  }\n  ngOnInit() {}\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n  /** Selects the given date */\n  select(nextVal) {\n    let oldValue = this._selected;\n    this._selected = nextVal;\n    if (!this._adapter.sameColor(oldValue, this._selected)) {\n      this._selectedChanged.next(nextVal);\n    }\n  }\n  /**\r\n  * Register an input with this datepicker.\r\n  * @param input The datepicker input to register with this datepicker.\r\n  */\n  registerInput(input) {\n    if (this._pickerInput) {\n      throw Error('A ColorPicker can only be associated with a single input.');\n    }\n    this._pickerInput = input;\n    this._inputSubscription = this._pickerInput._valueChange.subscribe(value => this._selected = value);\n  }\n  open() {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._pickerInput) {\n      throw Error('Attempted to open an ColorPicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n  /** Open the calendar as a dialog. */\n  _openAsDialog() {\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n    this._dialogRef = this._dialog.open(NgxMatColorPickerContentComponent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'ngx-mat-colorpicker-dialog'\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.picker = this;\n    this._setColor();\n  }\n  /** Open the calendar as a popup. */\n  _openAsPopup() {\n    if (!this._portal) {\n      this._portal = new ComponentPortal(NgxMatColorPickerContentComponent, this._viewContainerRef);\n    }\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._portal);\n      this._popupComponentRef.instance.picker = this;\n      this._setColor();\n      // Update the position once the calendar has rendered.\n      this._zone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n  /** Create the popup. */\n  _createPopup() {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-colorpicker-popup'\n    });\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n    merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter(event => {\n      // Closing on alt + up is only valid when there's an input associated with the datepicker.\n      return event.keyCode === ESCAPE || this._pickerInput && event.altKey && event.keyCode === UP_ARROW;\n    }))).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n      this.close();\n    });\n  }\n  close() {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._portal && this._portal.isAttached) {\n      this._portal.detach();\n    }\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n    if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n  /** Passes the current theme color along to the calendar overlay. */\n  _setColor() {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n  /** Create the popup PositionStrategy. */\n  _createPopupPositionStrategy() {\n    return this._overlay.position().flexibleConnectedTo(this._pickerInput.getConnectedOverlayOrigin()).withTransformOriginOn('.ngx-mat-colorpicker-content').withFlexibleDimensions(false).withViewportMargin(8).withLockedPosition().withPositions([{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }, {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top'\n    }, {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom'\n    }]);\n  }\n}\n/** @nocollapse */\nNgxMatColorPickerComponent.ɵfac = function NgxMatColorPickerComponent_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgxMatColorPickerComponent)(i0.ɵɵdirectiveInject(i2$2.MatDialog), i0.ɵɵdirectiveInject(i3.Overlay), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(ColorAdapter), i0.ɵɵdirectiveInject(i5.Directionality, 8), i0.ɵɵdirectiveInject(NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n};\n/** @nocollapse */\nNgxMatColorPickerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorPickerComponent,\n  selectors: [[\"ngx-mat-color-picker\"]],\n  inputs: {\n    disabled: \"disabled\",\n    touchUi: \"touchUi\",\n    opened: \"opened\",\n    defaultColor: \"defaultColor\",\n    color: \"color\"\n  },\n  outputs: {\n    openedStream: \"opened\",\n    closedStream: \"closed\"\n  },\n  exportAs: [\"ngxMatColorPicker\"],\n  decls: 0,\n  vars: 0,\n  template: function NgxMatColorPickerComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorPickerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-picker',\n      template: '',\n      exportAs: 'ngxMatColorPicker',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: i2$2.MatDialog\n    }, {\n      type: i3.Overlay\n    }, {\n      type: i0.NgZone\n    }, {\n      type: ColorAdapter\n    }, {\n      type: i5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.ViewContainerRef\n    }];\n  }, {\n    openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    disabled: [{\n      type: Input\n    }],\n    touchUi: [{\n      type: Input\n    }],\n    opened: [{\n      type: Input\n    }],\n    defaultColor: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatColorPickerInputEvent {\n  constructor(/** Reference to the colorpicker input component that emitted the event. */\n  target, /** Reference to the native input element associated with the colorpicker input. */\n  targetElement) {\n    this.target = target;\n    this.targetElement = targetElement;\n    this.value = this.target.value;\n  }\n}\nconst MAT_COLORPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgxMatColorPickerInput),\n  multi: true\n};\nconst MAT_COLORPICKER_VALIDATORS = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NgxMatColorPickerInput),\n  multi: true\n};\nclass NgxMatColorPickerInput {\n  constructor(_elementRef, _formField, _colorFormats, _adapter) {\n    this._elementRef = _elementRef;\n    this._formField = _formField;\n    this._colorFormats = _colorFormats;\n    this._adapter = _adapter;\n    /** Emits when a `change` event is fired on this `<input>`. */\n    this.colorChange = new EventEmitter();\n    /** Emits when an `input` event is fired on this `<input>`. */\n    this.colorInput = new EventEmitter();\n    /** Emits when the disabled state has changed */\n    this._disabledChange = new EventEmitter();\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    this._valueChange = new EventEmitter();\n    this._onTouched = () => {};\n    this._cvaOnChange = () => {};\n    this._validatorOnChange = () => {};\n    this._pickerSubscription = Subscription.EMPTY;\n    /** The combined form control validator for this input. */\n    this._validator = Validators.compose([]);\n    /** Whether the last value set on the input was valid. */\n    this._lastValueValid = false;\n    if (!this._colorFormats) {\n      throw createMissingDateImplError('MAT_COLOR_FORMATS');\n    }\n  }\n  set ngxMatColorPicker(value) {\n    if (!value) {\n      return;\n    }\n    this._picker = value;\n    this._picker.registerInput(this);\n    this._pickerSubscription.unsubscribe();\n    this._pickerSubscription = this._picker._selectedChanged.subscribe(selected => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.colorInput.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\n      this.colorChange.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  /** Whether the colorpicker-input is disabled. */\n  get disabled() {\n    return !!this._disabled;\n  }\n  set disabled(value) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  /** The value of the input. */\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    const oldValue = this.value;\n    this._value = value;\n    this._formatValue(value);\n    if (!this._adapter.sameColor(oldValue, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  /** Returns the palette used by the input's form field, if any. */\n  getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n  registerOnValidatorChange(fn) {\n    this._validatorOnChange = fn;\n  }\n  validate(c) {\n    return this._validator ? this._validator(c) : null;\n  }\n  /**\r\n   * @deprecated\r\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\r\n   */\n  getPopupConnectionElementRef() {\n    return this.getConnectedOverlayOrigin();\n  }\n  /**\r\n  * Gets the element that the colorpicker popup should be connected to.\r\n  * @return The element to connect the popup to.\r\n  */\n  getConnectedOverlayOrigin() {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n  ngOnInit() {}\n  ngOnDestroy() {\n    this._pickerSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value) {\n    this.value = value;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._cvaOnChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  _onChange() {\n    this.colorChange.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\n  }\n  _onKeydown(event) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n    if (this._picker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._picker.open();\n      event.preventDefault();\n    }\n  }\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n    this._onTouched();\n  }\n  /** Formats a value and sets it on the input element. */\n  _formatValue(value) {\n    this._elementRef.nativeElement.value = value ? this._adapter.format(value, this._colorFormats.display.colorInput) : '';\n  }\n  _onInput(value) {\n    const lastValueWasValid = this._lastValueValid;\n    const nextValue = this._adapter.parse(value);\n    if (!this._adapter.sameColor(nextValue, this._value)) {\n      this._value = nextValue;\n      this._cvaOnChange(nextValue);\n      this._valueChange.emit(nextValue);\n      this.colorInput.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\n    } else if (lastValueWasValid !== this._lastValueValid) {\n      this._validatorOnChange();\n    }\n  }\n}\n/** @nocollapse */\nNgxMatColorPickerInput.ɵfac = function NgxMatColorPickerInput_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgxMatColorPickerInput)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.MatFormField, 8), i0.ɵɵdirectiveInject(MAT_COLOR_FORMATS, 8), i0.ɵɵdirectiveInject(ColorAdapter));\n};\n/** @nocollapse */\nNgxMatColorPickerInput.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMatColorPickerInput,\n  selectors: [[\"input\", \"ngxMatColorPicker\", \"\"]],\n  hostVars: 3,\n  hostBindings: function NgxMatColorPickerInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"input\", function NgxMatColorPickerInput_input_HostBindingHandler($event) {\n        return ctx._onInput($event.target.value);\n      })(\"change\", function NgxMatColorPickerInput_change_HostBindingHandler() {\n        return ctx._onChange();\n      })(\"blur\", function NgxMatColorPickerInput_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      })(\"keydown\", function NgxMatColorPickerInput_keydown_HostBindingHandler($event) {\n        return ctx._onKeydown($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n      i0.ɵɵattribute(\"aria-haspopup\", ctx._picker ? \"dialog\" : null)(\"aria-owns\", (ctx._picker == null ? null : ctx._picker.opened) && ctx._picker.id || null);\n    }\n  },\n  inputs: {\n    ngxMatColorPicker: \"ngxMatColorPicker\",\n    disabled: \"disabled\",\n    value: \"value\"\n  },\n  outputs: {\n    colorChange: \"colorChange\",\n    colorInput: \"colorInput\"\n  },\n  exportAs: [\"ngxMatColorPickerInput\"],\n  features: [i0.ɵɵProvidersFeature([MAT_COLORPICKER_VALUE_ACCESSOR, MAT_COLORPICKER_VALIDATORS, {\n    provide: MAT_INPUT_VALUE_ACCESSOR,\n    useExisting: NgxMatColorPickerInput\n  }])]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorPickerInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[ngxMatColorPicker]',\n      providers: [MAT_COLORPICKER_VALUE_ACCESSOR, MAT_COLORPICKER_VALIDATORS, {\n        provide: MAT_INPUT_VALUE_ACCESSOR,\n        useExisting: NgxMatColorPickerInput\n      }],\n      host: {\n        '[attr.aria-haspopup]': '_picker ? \"dialog\" : null',\n        '[attr.aria-owns]': '(_picker?.opened && _picker.id) || null',\n        '[disabled]': 'disabled',\n        '(input)': '_onInput($event.target.value)',\n        '(change)': '_onChange()',\n        '(blur)': '_onBlur()',\n        '(keydown)': '_onKeydown($event)'\n      },\n      exportAs: 'ngxMatColorPickerInput'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i2.MatFormField,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_COLOR_FORMATS]\n      }]\n    }, {\n      type: ColorAdapter\n    }];\n  }, {\n    ngxMatColorPicker: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    colorChange: [{\n      type: Output\n    }],\n    colorInput: [{\n      type: Output\n    }]\n  });\n})();\nclass NgxMatColorpickerToggleIcon {}\n/** @nocollapse */\nNgxMatColorpickerToggleIcon.ɵfac = function NgxMatColorpickerToggleIcon_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgxMatColorpickerToggleIcon)();\n};\n/** @nocollapse */\nNgxMatColorpickerToggleIcon.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMatColorpickerToggleIcon,\n  selectors: [[\"\", \"ngxMatColorpickerToggleIcon\", \"\"]]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorpickerToggleIcon, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatColorpickerToggleIcon]'\n    }]\n  }], null, null);\n})();\nclass NgxMatColorToggleComponent {\n  constructor(_cd) {\n    this._cd = _cd;\n    this._stateChanges = Subscription.EMPTY;\n  }\n  get disabled() {\n    if (this._disabled == null && this.picker) {\n      return this.picker.disabled;\n    }\n  }\n  set disabled(value) {\n    this._disabled = value;\n  }\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    if (changes['picker']) {\n      this._watchStateChanges();\n    }\n  }\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n  open(event) {\n    if (this.picker && !this.disabled) {\n      this.picker.open();\n      event.stopPropagation();\n    }\n  }\n  _watchStateChanges() {\n    const disabled$ = this.picker ? this.picker._disabledChange : of();\n    const inputDisabled$ = this.picker && this.picker._pickerInput ? this.picker._pickerInput._disabledChange : of();\n    const pickerToggled$ = this.picker ? merge(this.picker.openedStream, this.picker.closedStream) : of();\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(disabled$, inputDisabled$, pickerToggled$).subscribe(() => this._cd.markForCheck());\n  }\n}\n/** @nocollapse */\nNgxMatColorToggleComponent.ɵfac = function NgxMatColorToggleComponent_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgxMatColorToggleComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n/** @nocollapse */\nNgxMatColorToggleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorToggleComponent,\n  selectors: [[\"ngx-mat-color-toggle\"]],\n  contentQueries: function NgxMatColorToggleComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, NgxMatColorpickerToggleIcon, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._customIcon = _t.first);\n    }\n  },\n  viewQuery: function NgxMatColorToggleComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._button = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ngx-mat-color-toggle\"],\n  hostVars: 7,\n  hostBindings: function NgxMatColorToggleComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function NgxMatColorToggleComponent_focus_HostBindingHandler() {\n        return ctx._button.focus();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", -1);\n      i0.ɵɵclassProp(\"ngx-mat-color-toggle-active\", ctx.picker && ctx.picker.opened)(\"mat-accent\", ctx.picker && ctx.picker.color === \"accent\")(\"mat-warn\", ctx.picker && ctx.picker.color === \"warn\");\n    }\n  },\n  inputs: {\n    picker: [0, \"for\", \"picker\"],\n    tabIndex: \"tabIndex\",\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\"\n  },\n  exportAs: [\"ngxMatColorPickerToggle\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c3,\n  decls: 4,\n  vars: 5,\n  consts: [[\"button\", \"\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 3, \"click\", \"disabled\", \"disableRipple\"], [3, \"color\", 4, \"ngIf\"]],\n  template: function NgxMatColorToggleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r1 = i0.ɵɵgetCurrentView();\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵelementStart(0, \"button\", 1, 0);\n      i0.ɵɵlistener(\"click\", function NgxMatColorToggleComponent_Template_button_click_0_listener($event) {\n        i0.ɵɵrestoreView(_r1);\n        return i0.ɵɵresetView(ctx.open($event));\n      });\n      i0.ɵɵtemplate(2, NgxMatColorToggleComponent_mat_icon_2_Template, 2, 2, \"mat-icon\", 2);\n      i0.ɵɵprojection(3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"disableRipple\", ctx.disableRipple);\n      i0.ɵɵattribute(\"aria-haspopup\", ctx.picker ? \"dialog\" : null)(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx._customIcon);\n    }\n  },\n  dependencies: [i1$1.NgIf, i2$1.MatIconButton, i3$1.MatIcon],\n  styles: [\".mat-form-field-appearance .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field-appearance .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance) .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance) .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance) .mat-form-field-prefix .mat-icon-button .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance) .mat-form-field-suffix .mat-icon-button .ngx-mat-color-toggle-default-icon{margin:auto}\\n\"],\n  encapsulation: 2\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorToggleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-toggle',\n      host: {\n        'class': 'ngx-mat-color-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.ngx-mat-color-toggle-active]': 'picker && picker.opened',\n        '[class.mat-accent]': 'picker && picker.color === \"accent\"',\n        '[class.mat-warn]': 'picker && picker.color === \"warn\"',\n        '(focus)': '_button.focus()'\n      },\n      exportAs: 'ngxMatColorPickerToggle',\n      encapsulation: ViewEncapsulation.None,\n      template: \"<button #button mat-icon-button type=\\\"button\\\" [attr.aria-haspopup]=\\\"picker ? 'dialog' : null\\\"\\r\\n  [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [disabled]=\\\"disabled\\\" (click)=\\\"open($event)\\\"\\r\\n  [disableRipple]=\\\"disableRipple\\\">\\r\\n\\r\\n  <mat-icon *ngIf=\\\"!_customIcon\\\" [style.color]=\\\"picker?._selected?.rgba\\\">\\r\\n    palette\\r\\n  </mat-icon>\\r\\n\\r\\n  <ng-content select=\\\"[ngxMatColorpickerToggleIcon]\\\"></ng-content>\\r\\n\\r\\n</button>\",\n      styles: [\".mat-form-field-appearance .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field-appearance .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance) .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance) .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance) .mat-form-field-prefix .mat-icon-button .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance) .mat-form-field-suffix .mat-icon-button .ngx-mat-color-toggle-default-icon{margin:auto}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    picker: [{\n      type: Input,\n      args: ['for']\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    disableRipple: [{\n      type: Input\n    }],\n    _customIcon: [{\n      type: ContentChild,\n      args: [NgxMatColorpickerToggleIcon]\n    }],\n    _button: [{\n      type: ViewChild,\n      args: ['button']\n    }]\n  });\n})();\nclass NgxMatColorPickerModule {}\n/** @nocollapse */\nNgxMatColorPickerModule.ɵfac = function NgxMatColorPickerModule_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgxMatColorPickerModule)();\n};\n/** @nocollapse */\nNgxMatColorPickerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMatColorPickerModule,\n  declarations: [NgxMatColorPaletteComponent, NgxMatColorCanvasComponent, NgxMatColorCollectionComponent, NgxMatColorSliderComponent, NumericColorInputDirective, NgxMatColorPickerContentComponent, NgxMatColorPickerComponent, NgxMatColorToggleComponent, NgxMatColorpickerToggleIcon, NgxMatColorPickerInput],\n  imports: [CommonModule, MatInputModule, MatButtonModule, MatCardModule, MatRadioModule, FormsModule, ReactiveFormsModule, MatDialogModule, PortalModule, MatIconModule],\n  exports: [NgxMatColorToggleComponent, NgxMatColorPickerInput, NgxMatColorPickerComponent, NgxMatColorpickerToggleIcon]\n});\n/** @nocollapse */\nNgxMatColorPickerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ColorAdapter, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [CommonModule, MatInputModule, MatButtonModule, MatCardModule, MatRadioModule, FormsModule, ReactiveFormsModule, MatDialogModule, PortalModule, MatIconModule]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorPickerModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxMatColorPaletteComponent, NgxMatColorCanvasComponent, NgxMatColorCollectionComponent, NgxMatColorSliderComponent, NumericColorInputDirective, NgxMatColorPickerContentComponent, NgxMatColorPickerComponent, NgxMatColorToggleComponent, NgxMatColorpickerToggleIcon, NgxMatColorPickerInput],\n      imports: [CommonModule, MatInputModule, MatButtonModule, MatCardModule, MatRadioModule, FormsModule, ReactiveFormsModule, MatDialogModule, PortalModule, MatIconModule],\n      exports: [NgxMatColorToggleComponent, NgxMatColorPickerInput, NgxMatColorPickerComponent, NgxMatColorpickerToggleIcon],\n      entryComponents: [NgxMatColorPickerContentComponent],\n      providers: [ColorAdapter, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/*\r\n * Public API Surface of color-picker\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BASIC_COLORS, Color, ColorAdapter, MAT_COLORPICKER_VALIDATORS, MAT_COLORPICKER_VALUE_ACCESSOR, MAT_COLOR_FORMATS, MAX_RGB, MIN_RGB, NGX_MAT_COLOR_FORMATS, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, NUMERIC_REGEX, NgxMatColorCanvasComponent, NgxMatColorCollectionComponent, NgxMatColorPaletteComponent, NgxMatColorPickerComponent, NgxMatColorPickerContentComponent, NgxMatColorPickerInput, NgxMatColorPickerInputEvent, NgxMatColorPickerModule, NgxMatColorSliderComponent, NgxMatColorToggleComponent, NgxMatColorpickerToggleIcon, NumericColorInputDirective, convertDecimalToHex, createMissingDateImplError, getColorAtPosition, matchers, pad2, rgbToHex, rgbaToHex, stringInputToObject };\n"],
  "mappings": "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",
  "names": ["_c0", "_c1", "_c2", "_c3", "_c1", "_c3", "_c2"]
}
