import{a as g,c}from"./chunk-GFTAKBCK.js";import{H as h}from"./chunk-NCKMNMSI.js";import{i as u}from"./chunk-H5ORMA4Q.js";var p=(()=>{class l{constructor(){this.database={Drugs:[],Strengths:[],Frequencies:[],Systems:[],Routes:[],Forms:[],Symptoms:[],Vaccines:[],Durations:[],Investigations:[],Councils:[],Assessments:[],Colleges:[],Brands:[],SelfRecords:[],Foods:[],Exercises:[],Specializations:[],Specialities:[],Graduations:[],PostGraduations:[],HospitalServices:[]},this.drugData=[],this.selfRecordData=[],this.CACHE_KEY="databaseCache",this.isLoaded=!1}loadDatabase(){return u(this,null,function*(){if(this.isLoaded)return;let r=sessionStorage.getItem(this.CACHE_KEY);if(r){let t=JSON.parse(r);this.database=t.database,this.drugData=t.drugData||[],this.selfRecordData=t.selfRecordData||[],console.log("Loaded database from cache.");return}let a="assets/db/database.xlsx";try{let i=yield(yield fetch(a)).arrayBuffer(),m=g(i,{type:"array"});for(let o of Object.keys(this.database)){let n=m.Sheets[o];if(n)if(o==="Drugs"){let e=c.sheet_to_json(n,{header:1}).map(s=>({name:s[0],dosageForm:s[1],strengthUnit:s[2]})).filter(s=>s.name);this.drugData=e,this.database.Drugs=Array.from(new Set(e.map(s=>s.name))).filter(Boolean)}else if(o==="SelfRecords"){let e=c.sheet_to_json(n,{header:1}).map(s=>({recordType:s[0],unit:s[1]})).filter(s=>s.recordType);this.selfRecordData=e,this.database.SelfRecords=Array.from(new Set(e.map(s=>s.recordType))).filter(Boolean)}else if(o==="Foods"){let d=c.sheet_to_json(n,{header:1});this.database.Foods=d.map(e=>`${e[0]}: ${parseInt(e[1],10)}`).filter(e=>e&&!e.includes("NaN"))}else if(o==="Exercises"){let d=c.sheet_to_json(n,{header:1});this.database.Exercises=d.map(e=>`${e[0]}: ${parseInt(e[1],10)}`).filter(e=>e&&!e.includes("NaN"))}else{let e=c.sheet_to_json(n,{header:1}).map(s=>s[0]);this.database[o]=Array.from(new Set(e)).filter(s=>s)}}sessionStorage.setItem(this.CACHE_KEY,JSON.stringify({database:this.database,drugData:this.drugData,selfRecordData:this.selfRecordData})),this.isLoaded=!0,console.log("Database loaded and cached successfully.")}catch(t){console.error("Error loading database:",t)}})}clearCache(){sessionStorage.removeItem(this.CACHE_KEY),this.isLoaded=!1}getDrugs(){return this.database.Drugs}getStrengths(r,a){let t=this.drugData.filter(i=>i.name===r&&i.dosageForm===a).map(i=>i.strengthUnit).filter(Boolean);return Array.from(new Set(t))}getFrequencies(){return this.database.Frequencies}getSystems(){return this.database.Systems}getRoutes(){return this.database.Routes}getForms(r){let a=this.drugData.filter(t=>t.name===r).map(t=>t.dosageForm).filter(Boolean);return Array.from(new Set(a))}getSymptoms(){return this.database.Symptoms}getVaccines(){return this.database.Vaccines}getDurations(){return this.database.Durations}getInvestigations(){return this.database.Investigations}getCouncils(){return this.database.Councils}getAssessments(){return this.database.Assessments}getMedicalColleges(){return this.database.Colleges}getDrugBrands(){return this.database.Brands}getSelfRecords(){return this.database.SelfRecords}getSelfRecordUnit(r){let a=this.selfRecordData.find(t=>t.recordType===r);return a?a.unit:null}getUnits(){return this.database.Strengths}getDosageForms(){return this.database.Forms}getFoodItems(){return this.database.Foods.map(r=>{let[a,t]=r.split(":");return{name:a.trim(),calories:Number(t)||0}})}getExercises(){return this.database.Exercises.map(r=>{let[a,t]=r.split(":");return{name:a.trim(),calories:Number(t)||0}})}getSpecializations(){return this.database.Specializations}getPostGraduations(){return this.database.PostGraduations}getGraduations(){return this.database.Graduations}getSpecialities(){return this.database.Specialities}getHospitalServcies(){return this.database.HospitalServices}static{this.\u0275fac=function(a){return new(a||l)}}static{this.\u0275prov=h({token:l,factory:l.\u0275fac,providedIn:"root"})}}return l})();export{p as a};
